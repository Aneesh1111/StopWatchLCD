
USB2_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800bab4  0800bab4  0001bab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb8c  0800bb8c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb8c  0800bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb94  0800bb94  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb94  0800bb94  0001bb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb98  0800bb98  0001bb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800bb9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029fc  200001f8  0800bd94  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bf4  0800bd94  00022bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c5e2  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000050cf  00000000  00000000  0004c80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ec8  00000000  00000000  000518e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c80  00000000  00000000  000537a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009394  00000000  00000000  00055428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bd42  00000000  00000000  0005e7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc3bd  00000000  00000000  0007a4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001568bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081ec  00000000  00000000  00156938  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba9c 	.word	0x0800ba9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800ba9c 	.word	0x0800ba9c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fbb3 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f820 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f920 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8ae 	bl	8000644 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f007 ff3e 	bl	8008368 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <main+0x3c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x40>)
 80004f2:	f007 ffa3 	bl	800843c <osThreadNew>
 80004f6:	4602      	mov	r2, r0
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x44>)
 80004fa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(start_task, NULL, NULL);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2100      	movs	r1, #0
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x48>)
 8000502:	f007 ff9b 	bl	800843c <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000506:	f007 ff63 	bl	80083d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050a:	e7fe      	b.n	800050a <main+0x3a>
 800050c:	0800bb20 	.word	0x0800bb20
 8000510:	080007b5 	.word	0x080007b5
 8000514:	20001ae4 	.word	0x20001ae4
 8000518:	08000bc9 	.word	0x08000bc9

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ac      	sub	sp, #176	; 0xb0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f00b f9f3 	bl	800b916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2254      	movs	r2, #84	; 0x54
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f00b f9e5 	bl	800b916 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f002 f9aa 	bl	80028a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000550:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <SystemClock_Config+0x124>)
 8000552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000556:	4a3a      	ldr	r2, [pc, #232]	; (8000640 <SystemClock_Config+0x124>)
 8000558:	f023 0318 	bic.w	r3, r3, #24
 800055c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000560:	2314      	movs	r3, #20
 8000562:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800058c:	2310      	movs	r3, #16
 800058e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f9ff 	bl	80029ac <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b4:	f000 f91a 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fe0a 	bl	80031ec <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005de:	f000 f905 	bl	80007ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 80005e2:	f242 0302 	movw	r3, #8194	; 0x2002
 80005e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005f2:	2301      	movs	r3, #1
 80005f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005fa:	2318      	movs	r3, #24
 80005fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005fe:	2307      	movs	r3, #7
 8000600:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800060a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800060e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f820 	bl	8003658 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x106>
  {
    Error_Handler();
 800061e:	f000 f8e5 	bl	80007ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000626:	f002 f95b 	bl	80028e0 <HAL_PWREx_ControlVoltageScaling>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000630:	f000 f8dc 	bl	80007ec <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000634:	f003 fa02 	bl	8003a3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000638:	bf00      	nop
 800063a:	37b0      	adds	r7, #176	; 0xb0
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_SPI1_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_SPI1_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_SPI1_Init+0x74>)
 800065e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000662:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_SPI1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000676:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_SPI1_Init+0x74>)
 800067a:	2208      	movs	r2, #8
 800067c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_SPI1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000692:	2207      	movs	r2, #7
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_SPI1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_SPI1_Init+0x74>)
 80006a4:	f003 faca 	bl	8003c3c <HAL_SPI_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f000 f89d 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20001ae8 	.word	0x20001ae8
 80006bc:	40013000 	.word	0x40013000

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART2_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x58>)
 8000704:	f003 fdbc 	bl	8004280 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f86d 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20001b4c 	.word	0x20001b4c
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_GPIO_Init+0x8c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_GPIO_Init+0x8c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_GPIO_Init+0x8c>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2108      	movs	r1, #8
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0x90>)
 8000784:	f000 fce0 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000788:	2308      	movs	r3, #8
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0x90>)
 80007a0:	f000 fb68 	bl	8000e74 <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400

080007b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007bc:	f00a fb0e 	bl	800addc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f007 fee1 	bl	8008588 <osDelay>
 80007c6:	e7fb      	b.n	80007c0 <StartDefaultTask+0xc>

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 fa49 	bl	8000c70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40001000 	.word	0x40001000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <Error_Handler+0x6>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_MspInit+0x4c>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6613      	str	r3, [r2, #96]	; 0x60
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x4c>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_MspInit+0x4c>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6593      	str	r3, [r2, #88]	; 0x58
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	210f      	movs	r1, #15
 800082e:	f06f 0001 	mvn.w	r0, #1
 8000832:	f000 faf5 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <HAL_SPI_MspInit+0x7c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d128      	bne.n	80008b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_SPI_MspInit+0x80>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_SPI_MspInit+0x80>)
 800086c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_SPI_MspInit+0x80>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_SPI_MspInit+0x80>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_SPI_MspInit+0x80>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_SPI_MspInit+0x80>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000896:	2382      	movs	r3, #130	; 0x82
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a6:	2305      	movs	r3, #5
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 fade 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40013000 	.word	0x40013000
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <HAL_UART_MspInit+0xa0>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d13a      	bne.n	8000960 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_UART_MspInit+0xa4>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_UART_MspInit+0xa4>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_UART_MspInit+0xa4>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_UART_MspInit+0xa4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_MspInit+0xa4>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0xa4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800091a:	2304      	movs	r3, #4
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fa9c 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800093c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800094e:	2303      	movs	r3, #3
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fa8a 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2036      	movs	r0, #54	; 0x36
 8000986:	f000 fa4b 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800098a:	2036      	movs	r0, #54	; 0x36
 800098c:	f000 fa64 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <HAL_InitTick+0x9c>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <HAL_InitTick+0x9c>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6593      	str	r3, [r2, #88]	; 0x58
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_InitTick+0x9c>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fdbe 	bl	8003534 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b8:	f002 fd90 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 80009bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c0:	4a13      	ldr	r2, [pc, #76]	; (8000a10 <HAL_InitTick+0xa0>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	0c9b      	lsrs	r3, r3, #18
 80009c8:	3b01      	subs	r3, #1
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_InitTick+0xa4>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <HAL_InitTick+0xa8>)
 80009d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_InitTick+0xa4>)
 80009d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_InitTick+0xa4>)
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_InitTick+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_InitTick+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <HAL_InitTick+0xa4>)
 80009ee:	f003 f9c8 	bl	8003d82 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d104      	bne.n	8000a02 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <HAL_InitTick+0xa4>)
 80009fa:	f003 fa23 	bl	8003e44 <HAL_TIM_Base_Start_IT>
 80009fe:	4603      	mov	r3, r0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	20001bcc 	.word	0x20001bcc
 8000a18:	40001000 	.word	0x40001000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM6_DAC_IRQHandler+0x10>)
 8000a4e:	f003 fa4d 	bl	8003eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20001bcc 	.word	0x20001bcc

08000a5c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USB_IRQHandler+0x10>)
 8000a62:	f000 fcbd 	bl	80013e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200028fc 	.word	0x200028fc

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f00a fef4 	bl	800b88c <__errno>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20010000 	.word	0x20010000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	20000214 	.word	0x20000214
 8000ad8:	20002bf8 	.word	0x20002bf8

08000adc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <SystemInit+0x64>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <SystemInit+0x64>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <SystemInit+0x68>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <SystemInit+0x68>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <SystemInit+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <SystemInit+0x68>)
 8000b08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <SystemInit+0x68>)
 8000b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <SystemInit+0x68>)
 8000b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <SystemInit+0x68>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SystemInit+0x64>)
 8000b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b32:	609a      	str	r2, [r3, #8]
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	40021000 	.word	0x40021000

08000b48 <_ZN9LED_flashC1Emm>:

	bool LED_out = 0;


public:
	LED_flash(uint32_t x, uint32_t y) :
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
		LED_period1(x), LED_period2(y) { }
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	721a      	strb	r2, [r3, #8]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_ZN9LED_flash4loopEv>:

	void loop()
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	{
		for(;;)
		{
			LED_out = LED_out ^ 1;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7a1b      	ldrb	r3, [r3, #8]
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	721a      	strb	r2, [r3, #8]

			if (LED_out==0)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7a1b      	ldrb	r3, [r3, #8]
 8000b8e:	f083 0301 	eor.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00a      	beq.n	8000bae <_ZN9LED_flash4loopEv+0x3a>
			{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <_ZN9LED_flash4loopEv+0x50>)
 8000b9e:	f000 fad3 	bl	8001148 <HAL_GPIO_WritePin>
				osDelay(LED_period1);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f007 fcee 	bl	8008588 <osDelay>
 8000bac:	e7e6      	b.n	8000b7c <_ZN9LED_flash4loopEv+0x8>
			}
			else
			{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <_ZN9LED_flash4loopEv+0x50>)
 8000bb4:	f000 fac8 	bl	8001148 <HAL_GPIO_WritePin>
				osDelay(LED_period2);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 fce3 	bl	8008588 <osDelay>
			LED_out = LED_out ^ 1;
 8000bc2:	e7db      	b.n	8000b7c <_ZN9LED_flash4loopEv+0x8>
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <start_task>:

#include "LCD_flash.hpp"
#include "tasks.h"

void start_task(void *pvParameters)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	LED_flash LD3(800,200);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	22c8      	movs	r2, #200	; 0xc8
 8000bd6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ffb4 	bl	8000b48 <_ZN9LED_flashC1Emm>

	LD3.loop();
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffc5 	bl	8000b74 <_ZN9LED_flash4loopEv>
	while(1)
 8000bea:	e7fe      	b.n	8000bea <start_task+0x22>

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ff74 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bf4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bf6:	e003      	b.n	8000c00 <LoopCopyDataInit>

08000bf8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bfa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bfc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bfe:	3104      	adds	r1, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c00:	480a      	ldr	r0, [pc, #40]	; (8000c2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c08:	d3f6      	bcc.n	8000bf8 <CopyDataInit>
	ldr	r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c0c:	e002      	b.n	8000c14 <LoopFillZerobss>

08000c0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c10:	f842 3b04 	str.w	r3, [r2], #4

08000c14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <LoopForever+0x16>)
	cmp	r2, r3
 8000c16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c18:	d3f9      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f00a fe3d 	bl	800b898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fc57 	bl	80004d0 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c28:	0800bb9c 	.word	0x0800bb9c
	ldr	r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c30:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8000c34:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8000c38:	20002bf4 	.word	0x20002bf4

08000c3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_IRQHandler>

08000c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f8de 	bl	8000e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe8e 	bl	8000970 <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c60:	f7ff fdc8 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20001c18 	.word	0x20001c18

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20001c18 	.word	0x20001c18

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff4c 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e32:	f7ff ff61 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff ffb1 	bl	8000da4 <NVIC_EncodePriority>
 8000e42:	4602      	mov	r2, r0
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff80 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff54 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e148      	b.n	8001116 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 813a 	beq.w	8001110 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d00b      	beq.n	8000ebc <HAL_GPIO_Init+0x48>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb0:	2b11      	cmp	r3, #17
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b12      	cmp	r3, #18
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0xea>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0203 	and.w	r2, r3, #3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8094 	beq.w	8001110 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe8:	4b52      	ldr	r3, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x2c0>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x2c0>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff4:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x2c0>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001000:	4a4d      	ldr	r2, [pc, #308]	; (8001138 <HAL_GPIO_Init+0x2c4>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1d4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a43      	ldr	r2, [pc, #268]	; (800113c <HAL_GPIO_Init+0x2c8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1d0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a42      	ldr	r2, [pc, #264]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1cc>
 800103c:	2302      	movs	r3, #2
 800103e:	e004      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001040:	2307      	movs	r3, #7
 8001042:	e002      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_GPIO_Init+0x1d6>
 8001048:	2300      	movs	r3, #0
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105a:	4937      	ldr	r1, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2c4>)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800108c:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b6:	4a23      	ldr	r2, [pc, #140]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_GPIO_Init+0x2d0>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f aeaf 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 8001126:	bf00      	nop
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	40010000 	.word	0x40010000
 800113c:	48000400 	.word	0x48000400
 8001140:	48000800 	.word	0x48000800
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001164:	e002      	b.n	800116c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b08b      	sub	sp, #44	; 0x2c
 800117c:	af06      	add	r7, sp, #24
 800117e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e104      	b.n	8001394 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f00a f80c 	bl	800b1bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fc4d 	bl	8004a50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	687e      	ldr	r6, [r7, #4]
 80011be:	466d      	mov	r5, sp
 80011c0:	f106 0410 	add.w	r4, r6, #16
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	602b      	str	r3, [r5, #0]
 80011cc:	1d33      	adds	r3, r6, #4
 80011ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f003 fc15 	bl	8004a00 <USB_CoreInit>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0d5      	b.n	8001394 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fc49 	bl	8004a86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e04c      	b.n	8001294 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3301      	adds	r3, #1
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	b298      	uxth	r0, r3
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3336      	adds	r3, #54	; 0x36
 8001238:	4602      	mov	r2, r0
 800123a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	440b      	add	r3, r1
 800124c:	3303      	adds	r3, #3
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	440b      	add	r3, r1
 8001260:	3338      	adds	r3, #56	; 0x38
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	333c      	adds	r3, #60	; 0x3c
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	3340      	adds	r3, #64	; 0x40
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	3301      	adds	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d3ad      	bcc.n	80011fa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e044      	b.n	800132e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3b5      	bcc.n	80012a4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	687e      	ldr	r6, [r7, #4]
 8001340:	466d      	mov	r5, sp
 8001342:	f106 0410 	add.w	r4, r6, #16
 8001346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	1d33      	adds	r3, r6, #4
 8001350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f003 fba4 	bl	8004aa0 <USB_DevInit>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2202      	movs	r2, #2
 8001362:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e014      	b.n	8001394 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f001 fa63 	bl	800284e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f005 fb5d 	bl	8006a4c <USB_DevDisconnect>

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800139c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_PCD_Start+0x16>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e012      	b.n	80013d8 <HAL_PCD_Start+0x3c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fb2f 	bl	8004a22 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 fb28 	bl	8006a1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fb42 	bl	8006a76 <USB_ReadInterrupts>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fc:	d102      	bne.n	8001404 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fb5b 	bl	8001aba <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f005 fb34 	bl	8006a76 <USB_ReadInterrupts>
 800140e:	4603      	mov	r3, r0
 8001410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001418:	d112      	bne.n	8001440 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142c:	b292      	uxth	r2, r2
 800142e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f009 ff3d 	bl	800b2b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001438:	2100      	movs	r1, #0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f91e 	bl	800167c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fb16 	bl	8006a76 <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001454:	d10b      	bne.n	800146e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001468:	b292      	uxth	r2, r2
 800146a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f005 faff 	bl	8006a76 <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001482:	d10b      	bne.n	800149c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800148c:	b29a      	uxth	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001496:	b292      	uxth	r2, r2
 8001498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fae8 	bl	8006a76 <USB_ReadInterrupts>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014b0:	d133      	bne.n	800151a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0204 	bic.w	r2, r2, #4
 80014c4:	b292      	uxth	r2, r2
 80014c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0208 	bic.w	r2, r2, #8
 80014dc:	b292      	uxth	r2, r2
 80014de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014f4:	2100      	movs	r1, #0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f00a f98c 	bl	800b814 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f009 ff11 	bl	800b324 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001514:	b292      	uxth	r2, r2
 8001516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f005 faa9 	bl	8006a76 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800152e:	d126      	bne.n	800157e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001550:	b29a      	uxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800155a:	b292      	uxth	r2, r2
 800155c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0204 	orr.w	r2, r2, #4
 8001572:	b292      	uxth	r2, r2
 8001574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f009 feb9 	bl	800b2f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fa77 	bl	8006a76 <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	2b80      	cmp	r3, #128	; 0x80
 8001590:	d13f      	bne.n	8001612 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d12b      	bne.n	800160c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015bc:	b29a      	uxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0204 	orr.w	r2, r2, #4
 80015c6:	b292      	uxth	r2, r2
 80015c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0208 	orr.w	r2, r2, #8
 80015de:	b292      	uxth	r2, r2
 80015e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f00a f905 	bl	800b814 <HAL_PCDEx_LPM_Callback>
 800160a:	e002      	b.n	8001612 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f009 fe6f 	bl	800b2f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f005 fa2d 	bl	8006a76 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001626:	d10e      	bne.n	8001646 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800163a:	b292      	uxth	r2, r2
 800163c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f009 fe28 	bl	800b296 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f005 fa13 	bl	8006a76 <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165a:	d10b      	bne.n	8001674 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_PCD_SetAddress+0x1a>
 8001692:	2302      	movs	r3, #2
 8001694:	e013      	b.n	80016be <HAL_PCD_SetAddress+0x42>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f005 f9a1 	bl	80069f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	4608      	mov	r0, r1
 80016d0:	4611      	mov	r1, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	70fb      	strb	r3, [r7, #3]
 80016d8:	460b      	mov	r3, r1
 80016da:	803b      	strh	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0e      	bge.n	800170a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	705a      	strb	r2, [r3, #1]
 8001708:	e00e      	b.n	8001728 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0207 	and.w	r2, r3, #7
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	b2da      	uxtb	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001734:	883a      	ldrh	r2, [r7, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	78ba      	ldrb	r2, [r7, #2]
 800173e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001752:	78bb      	ldrb	r3, [r7, #2]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d102      	bne.n	800175e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_PCD_EP_Open+0xa6>
 8001768:	2302      	movs	r3, #2
 800176a:	e00e      	b.n	800178a <HAL_PCD_EP_Open+0xc4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 f9b2 	bl	8004ae4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001788:	7afb      	ldrb	r3, [r7, #11]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800179e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da0e      	bge.n	80017c4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	705a      	strb	r2, [r3, #1]
 80017c2:	e00e      	b.n	80017e2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0207 	and.w	r2, r3, #7
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_PCD_EP_Close+0x6a>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e00e      	b.n	800181a <HAL_PCD_EP_Close+0x88>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fcd8 	bl	80051c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	460b      	mov	r3, r1
 8001830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	f003 0207 	and.w	r2, r3, #7
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2200      	movs	r2, #0
 8001860:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	b2da      	uxtb	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	2b00      	cmp	r3, #0
 8001876:	d106      	bne.n	8001886 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fe8b 	bl	800559a <USB_EPStartXfer>
 8001884:	e005      	b.n	8001892 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6979      	ldr	r1, [r7, #20]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fe84 	bl	800559a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 0207 	and.w	r2, r3, #7
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	460b      	mov	r3, r1
 80018da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2201      	movs	r2, #1
 8001916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	b2da      	uxtb	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001924:	7afb      	ldrb	r3, [r7, #11]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fe30 	bl	800559a <USB_EPStartXfer>
 800193a:	e005      	b.n	8001948 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6979      	ldr	r1, [r7, #20]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 fe29 	bl	800559a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0207 	and.w	r2, r3, #7
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d901      	bls.n	8001970 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e04c      	b.n	8001a0a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da0e      	bge.n	8001996 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	705a      	strb	r2, [r3, #1]
 8001994:	e00c      	b.n	80019b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_PCD_EP_SetStall+0x7e>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e01c      	b.n	8001a0a <HAL_PCD_EP_SetStall+0xb8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 ff0a 	bl	80067f8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f005 f84b 	bl	8006a96 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 020f 	and.w	r2, r3, #15
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d901      	bls.n	8001a30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e040      	b.n	8001ab2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da0e      	bge.n	8001a56 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	705a      	strb	r2, [r3, #1]
 8001a54:	e00e      	b.n	8001a74 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 0207 	and.w	r2, r3, #7
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_PCD_EP_ClrStall+0x82>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e00e      	b.n	8001ab2 <HAL_PCD_EP_ClrStall+0xa0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68f9      	ldr	r1, [r7, #12]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 fef9 	bl	800689a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b08e      	sub	sp, #56	; 0x38
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ac2:	e2d1      	b.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ada:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8152 	bne.w	8001d88 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d150      	bne.n	8001b90 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afe:	81fb      	strh	r3, [r7, #14]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3328      	adds	r3, #40	; 0x28
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	441a      	add	r2, r3
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f009 fb86 	bl	800b262 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8282 	beq.w	8002068 <PCD_EP_ISR_Handler+0x5ae>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f040 827d 	bne.w	8002068 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b292      	uxth	r2, r2
 8001b82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b8e:	e26b      	b.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ba0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d032      	beq.n	8001c10 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f004 ffa3 	bl	8006b30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	823b      	strh	r3, [r7, #16]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	8a3a      	ldrh	r2, [r7, #16]
 8001c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c04:	b292      	uxth	r2, r2
 8001c06:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f009 fafd 	bl	800b208 <HAL_PCD_SetupStageCallback>
 8001c0e:	e22b      	b.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f280 8227 	bge.w	8002068 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c26:	4013      	ands	r3, r2
 8001c28:	83bb      	strh	r3, [r7, #28]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	8bba      	ldrh	r2, [r7, #28]
 8001c30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c34:	b292      	uxth	r2, r2
 8001c36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d019      	beq.n	8001c9c <PCD_EP_ISR_Handler+0x1e2>
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d015      	beq.n	8001c9c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	6959      	ldr	r1, [r3, #20]
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f004 ff55 	bl	8006b30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	441a      	add	r2, r3
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c94:	2100      	movs	r1, #0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f009 fac8 	bl	800b22c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d112      	bne.n	8001cea <PCD_EP_ISR_Handler+0x230>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	801a      	strh	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	e02f      	b.n	8001d4a <PCD_EP_ISR_Handler+0x290>
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b3e      	cmp	r3, #62	; 0x3e
 8001cf0:	d813      	bhi.n	8001d1a <PCD_EP_ISR_Handler+0x260>
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <PCD_EP_ISR_Handler+0x252>
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	3301      	adds	r3, #1
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	029b      	lsls	r3, r3, #10
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	e017      	b.n	8001d4a <PCD_EP_ISR_Handler+0x290>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <PCD_EP_ISR_Handler+0x27a>
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	3b01      	subs	r3, #1
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	029b      	lsls	r3, r3, #10
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	827b      	strh	r3, [r7, #18]
 8001d5c:	8a7b      	ldrh	r3, [r7, #18]
 8001d5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d62:	827b      	strh	r3, [r7, #18]
 8001d64:	8a7b      	ldrh	r3, [r7, #18]
 8001d66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d6a:	827b      	strh	r3, [r7, #18]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	8a7b      	ldrh	r3, [r7, #18]
 8001d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	8013      	strh	r3, [r2, #0]
 8001d86:	e16f      	b.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d9a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f280 80e4 	bge.w	8001f6c <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dba:	4013      	ands	r3, r2
 8001dbc:	853b      	strh	r3, [r7, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dd6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	7b1b      	ldrb	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d120      	bne.n	8001e36 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e18:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8083 	beq.w	8001f28 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	6959      	ldr	r1, [r3, #20]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	88da      	ldrh	r2, [r3, #6]
 8001e2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e30:	f004 fe7e 	bl	8006b30 <USB_ReadPMA>
 8001e34:	e078      	b.n	8001f28 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d108      	bne.n	8001e50 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e40:	461a      	mov	r2, r3
 8001e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f91d 	bl	8002084 <HAL_PCD_EP_DB_Receive>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e4e:	e06b      	b.n	8001f28 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01f      	beq.n	8001eea <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ece:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d028      	beq.n	8001f28 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	6959      	ldr	r1, [r3, #20]
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	891a      	ldrh	r2, [r3, #8]
 8001ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ee4:	f004 fe24 	bl	8006b30 <USB_ReadPMA>
 8001ee8:	e01e      	b.n	8001f28 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	895a      	ldrh	r2, [r3, #10]
 8001f22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f24:	f004 fe04 	bl	8006b30 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f2e:	441a      	add	r2, r3
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f3a:	441a      	add	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <PCD_EP_ISR_Handler+0x498>
 8001f48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d206      	bcs.n	8001f60 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f009 f967 	bl	800b22c <HAL_PCD_DataOutStageCallback>
 8001f5e:	e005      	b.n	8001f6c <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fb17 	bl	800559a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d078      	beq.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa4:	843b      	strh	r3, [r7, #32]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	441a      	add	r2, r3
 8001fb4:	8c3b      	ldrh	r3, [r7, #32]
 8001fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	78db      	ldrb	r3, [r3, #3]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d108      	bne.n	8001fdc <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d144      	bne.n	800205c <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d13f      	bne.n	800205c <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002000:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	8bfb      	ldrh	r3, [r7, #30]
 8002008:	429a      	cmp	r2, r3
 800200a:	d906      	bls.n	800201a <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	8bfb      	ldrh	r3, [r7, #30]
 8002012:	1ad2      	subs	r2, r2, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	619a      	str	r2, [r3, #24]
 8002018:	e002      	b.n	8002020 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f009 f917 	bl	800b262 <HAL_PCD_DataInStageCallback>
 8002034:	e018      	b.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	8bfb      	ldrh	r3, [r7, #30]
 800203c:	441a      	add	r2, r3
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	441a      	add	r2, r3
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002054:	4618      	mov	r0, r3
 8002056:	f003 faa0 	bl	800559a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800205a:	e005      	b.n	8002068 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800205c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800205e:	461a      	mov	r2, r3
 8002060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f917 	bl	8002296 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f6ff ad25 	blt.w	8001ac4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3738      	adds	r7, #56	; 0x38
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d07c      	beq.n	8002196 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	8b7b      	ldrh	r3, [r7, #26]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d306      	bcc.n	80020da <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	8b7b      	ldrh	r3, [r7, #26]
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	619a      	str	r2, [r3, #24]
 80020d8:	e002      	b.n	80020e0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d123      	bne.n	8002130 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	833b      	strh	r3, [r7, #24]
 8002104:	8b3b      	ldrh	r3, [r7, #24]
 8002106:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800210a:	833b      	strh	r3, [r7, #24]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	441a      	add	r2, r3
 800211a:	8b3b      	ldrh	r3, [r7, #24]
 800211c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	b29b      	uxth	r3, r3
 800212e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01f      	beq.n	800217a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002154:	82fb      	strh	r3, [r7, #22]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	8afb      	ldrh	r3, [r7, #22]
 8002166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002172:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002176:	b29b      	uxth	r3, r3
 8002178:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800217a:	8b7b      	ldrh	r3, [r7, #26]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8085 	beq.w	800228c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6959      	ldr	r1, [r3, #20]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	891a      	ldrh	r2, [r3, #8]
 800218e:	8b7b      	ldrh	r3, [r7, #26]
 8002190:	f004 fcce 	bl	8006b30 <USB_ReadPMA>
 8002194:	e07a      	b.n	800228c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d306      	bcc.n	80021d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	8b7b      	ldrh	r3, [r7, #26]
 80021cc:	1ad2      	subs	r2, r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	619a      	str	r2, [r3, #24]
 80021d2:	e002      	b.n	80021da <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d123      	bne.n	800222a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fc:	83fb      	strh	r3, [r7, #30]
 80021fe:	8bfb      	ldrh	r3, [r7, #30]
 8002200:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002204:	83fb      	strh	r3, [r7, #30]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	441a      	add	r2, r3
 8002214:	8bfb      	ldrh	r3, [r7, #30]
 8002216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	b29b      	uxth	r3, r3
 8002228:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11f      	bne.n	8002274 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	83bb      	strh	r3, [r7, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	8bbb      	ldrh	r3, [r7, #28]
 8002260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002270:	b29b      	uxth	r3, r3
 8002272:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6959      	ldr	r1, [r3, #20]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	895a      	ldrh	r2, [r3, #10]
 8002286:	8b7b      	ldrh	r3, [r7, #26]
 8002288:	f004 fc52 	bl	8006b30 <USB_ReadPMA>
    }
  }

  return count;
 800228c:	8b7b      	ldrh	r3, [r7, #26]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b092      	sub	sp, #72	; 0x48
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	4613      	mov	r3, r2
 80022a2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8130 	beq.w	8002510 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022dc:	429a      	cmp	r2, r3
 80022de:	d906      	bls.n	80022ee <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022e6:	1ad2      	subs	r2, r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	619a      	str	r2, [r3, #24]
 80022ec:	e002      	b.n	80022f4 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d12c      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f008 ffad 	bl	800b262 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 822d 	beq.w	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232e:	827b      	strh	r3, [r7, #18]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	8a7b      	ldrh	r3, [r7, #18]
 8002340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800234c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002350:	b29b      	uxth	r3, r3
 8002352:	8013      	strh	r3, [r2, #0]
 8002354:	e20b      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01f      	beq.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800238c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800239c:	b29b      	uxth	r3, r3
 800239e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 81e1 	bne.w	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023b2:	441a      	add	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023be:	441a      	add	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d309      	bcc.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6a1a      	ldr	r2, [r3, #32]
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	1ad2      	subs	r2, r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	621a      	str	r2, [r3, #32]
 80023e2:	e014      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80023ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023f8:	e009      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d155      	bne.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002424:	b29b      	uxth	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	00da      	lsls	r2, r3, #3
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4413      	add	r3, r2
 8002438:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002440:	2b00      	cmp	r3, #0
 8002442:	d112      	bne.n	800246a <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800244e:	b29a      	uxth	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002462:	b29a      	uxth	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	e047      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x264>
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	2b3e      	cmp	r3, #62	; 0x3e
 800246e:	d811      	bhi.n	8002494 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	3301      	adds	r3, #1
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	b29b      	uxth	r3, r3
 800248a:	029b      	lsls	r3, r3, #10
 800248c:	b29a      	uxth	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e032      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x264>
 8002494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
 800249a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <HAL_PCD_EP_DB_Transmit+0x214>
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	029b      	lsls	r3, r3, #10
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	e01b      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x264>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	785b      	ldrb	r3, [r3, #1]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d117      	bne.n	80024fa <HAL_PCD_EP_DB_Transmit+0x264>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	623b      	str	r3, [r7, #32]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	4413      	add	r3, r2
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	4413      	add	r3, r2
 80024ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6959      	ldr	r1, [r3, #20]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	891a      	ldrh	r2, [r3, #8]
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	b29b      	uxth	r3, r3
 800250a:	f004 fad0 	bl	8006aae <USB_WritePMA>
 800250e:	e12e      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800253c:	429a      	cmp	r2, r3
 800253e:	d306      	bcc.n	800254e <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	e002      	b.n	8002554 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d12c      	bne.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f008 fe7d 	bl	800b262 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80fd 	bne.w	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	8013      	strh	r3, [r2, #0]
 80025b4:	e0db      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11f      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80025ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 80b1 	bne.w	800276e <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002612:	441a      	add	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800261e:	441a      	add	r2, r3
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6a1a      	ldr	r2, [r3, #32]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d309      	bcc.n	8002644 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6a1a      	ldr	r2, [r3, #32]
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	621a      	str	r2, [r3, #32]
 8002642:	e014      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800264c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800264e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002658:	e009      	b.n	800266e <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d155      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x492>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002690:	4413      	add	r3, r2
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00da      	lsls	r2, r3, #3
 800269a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269c:	4413      	add	r3, r2
 800269e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d112      	bne.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x43a>
 80026aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	e044      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	2b3e      	cmp	r3, #62	; 0x3e
 80026d4:	d811      	bhi.n	80026fa <HAL_PCD_EP_DB_Transmit+0x464>
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_PCD_EP_DB_Transmit+0x456>
 80026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e8:	3301      	adds	r3, #1
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	e02f      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x4c4>
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0x47a>
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270c:	3b01      	subs	r3, #1
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002712:	b29b      	uxth	r3, r3
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	b29b      	uxth	r3, r3
 8002718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800271c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002720:	b29a      	uxth	r2, r3
 8002722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e018      	b.n	800275a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d114      	bne.n	800275a <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	4413      	add	r3, r2
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00da      	lsls	r2, r3, #3
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	4413      	add	r3, r2
 800274c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002750:	633b      	str	r3, [r7, #48]	; 0x30
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	b29a      	uxth	r2, r3
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6959      	ldr	r1, [r3, #20]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	895a      	ldrh	r2, [r3, #10]
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	b29b      	uxth	r3, r3
 800276a:	f004 f9a0 	bl	8006aae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	823b      	strh	r3, [r7, #16]
 800278a:	8a3b      	ldrh	r3, [r7, #16]
 800278c:	f083 0310 	eor.w	r3, r3, #16
 8002790:	823b      	strh	r3, [r7, #16]
 8002792:	8a3b      	ldrh	r3, [r7, #16]
 8002794:	f083 0320 	eor.w	r3, r3, #32
 8002798:	823b      	strh	r3, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	441a      	add	r2, r3
 80027a8:	8a3b      	ldrh	r3, [r7, #16]
 80027aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3748      	adds	r7, #72	; 0x48
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	4613      	mov	r3, r2
 80027d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e009      	b.n	8002812 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027fe:	897a      	ldrh	r2, [r7, #10]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002812:	893b      	ldrh	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2200      	movs	r2, #0
 800281c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	b29a      	uxth	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	80da      	strh	r2, [r3, #6]
 8002826:	e00b      	b.n	8002840 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2201      	movs	r2, #1
 800282c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	b29a      	uxth	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002872:	b29b      	uxth	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002886:	b29b      	uxth	r3, r3
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000

080028c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40007000 	.word	0x40007000

080028e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ee:	d130      	bne.n	8002952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f0:	4b23      	ldr	r3, [pc, #140]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d038      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2232      	movs	r2, #50	; 0x32
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002924:	e002      	b.n	800292c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002938:	d102      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f2      	bne.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d110      	bne.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e00f      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295e:	d007      	beq.n	8002970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40007000 	.word	0x40007000
 8002984:	20000000 	.word	0x20000000
 8002988:	431bde83 	.word	0x431bde83

0800298c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299a:	6053      	str	r3, [r2, #4]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f000 bc11 	b.w	80031e2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c0:	4ba0      	ldr	r3, [pc, #640]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ca:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80e4 	beq.w	8002baa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4c>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	f040 808b 	bne.w	8002b06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 8087 	bne.w	8002b06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_OscConfig+0x64>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e3e8      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	4b8b      	ldr	r3, [pc, #556]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_RCC_OscConfig+0x7e>
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	e005      	b.n	8002a36 <HAL_RCC_OscConfig+0x8a>
 8002a2a:	4b86      	ldr	r3, [pc, #536]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d223      	bcs.n	8002a82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fdaa 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e3c9      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4e:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7c      	ldr	r2, [pc, #496]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4977      	ldr	r1, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6c:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4972      	ldr	r1, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e025      	b.n	8002ace <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a82:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6f      	ldr	r2, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	496a      	ldr	r1, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	4965      	ldr	r1, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd6a 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e389      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ace:	f000 fc6f 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a5a      	ldr	r2, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x29c>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aea:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_RCC_OscConfig+0x2a0>)
 8002aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aee:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_RCC_OscConfig+0x2a4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd ff3c 	bl	8000970 <HAL_InitTick>
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d052      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	e36d      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d032      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f8bd 	bl	8000c98 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b22:	f7fe f8b9 	bl	8000c98 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e356      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b40:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a3f      	ldr	r2, [pc, #252]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	493a      	ldr	r1, [pc, #232]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5e:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e01a      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f88a 	bl	8000c98 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b88:	f7fe f886 	bl	8000c98 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e323      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1dc>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d073      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x21c>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d10e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d063      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d15f      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e300      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0x288>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x270>
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0x288>
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f82c 	bl	8000c98 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	e010      	b.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	0800bb44 	.word	0x0800bb44
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe f820 	bl	8000c98 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e2bd      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	4baf      	ldr	r3, [pc, #700]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2a8>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe f810 	bl	8000c98 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe f80c 	bl	8000c98 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e2a9      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	4ba5      	ldr	r3, [pc, #660]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d0>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d060      	beq.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_OscConfig+0x310>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d116      	bne.n	8002cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	4b99      	ldr	r3, [pc, #612]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x328>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e286      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b93      	ldr	r3, [pc, #588]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4990      	ldr	r1, [pc, #576]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	e040      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d023      	beq.n	8002d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf2:	4b8c      	ldr	r3, [pc, #560]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a8b      	ldr	r2, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fd ffcb 	bl	8000c98 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fd ffc7 	bl	8000c98 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e264      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	497c      	ldr	r1, [pc, #496]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e018      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b7a      	ldr	r3, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a79      	ldr	r2, [pc, #484]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fd ffa7 	bl	8000c98 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fd ffa3 	bl	8000c98 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e240      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01c      	beq.n	8002dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d80:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	4a67      	ldr	r2, [pc, #412]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fd ff82 	bl	8000c98 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7fd ff7e 	bl	8000c98 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e21b      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002daa:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3ec>
 8002db8:	e01b      	b.n	8002df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dba:	4b5a      	ldr	r3, [pc, #360]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fd ff65 	bl	8000c98 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fd ff61 	bl	8000c98 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1fe      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de4:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ef      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a6 	beq.w	8002f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d118      	bne.n	8002e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e44:	f7fd ff28 	bl	8000c98 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fd ff24 	bl	8000c98 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1c1      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCC_OscConfig+0x57c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4d8>
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a2a      	ldr	r2, [pc, #168]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e82:	e024      	b.n	8002ece <HAL_RCC_OscConfig+0x522>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d110      	bne.n	8002eae <HAL_RCC_OscConfig+0x502>
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eac:	e00f      	b.n	8002ece <HAL_RCC_OscConfig+0x522>
 8002eae:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fedf 	bl	8000c98 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fd fedb 	bl	8000c98 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e176      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x578>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ed      	beq.n	8002ede <HAL_RCC_OscConfig+0x532>
 8002f02:	e01a      	b.n	8002f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fd fec8 	bl	8000c98 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0a:	e00f      	b.n	8002f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fd fec4 	bl	8000c98 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d906      	bls.n	8002f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e15f      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2c:	4baa      	ldr	r3, [pc, #680]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e8      	bne.n	8002f0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4ba5      	ldr	r3, [pc, #660]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4aa4      	ldr	r2, [pc, #656]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f60:	4b9d      	ldr	r3, [pc, #628]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f66:	4a9c      	ldr	r2, [pc, #624]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fd fe92 	bl	8000c98 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f78:	f7fd fe8e 	bl	8000c98 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e12b      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f8a:	4b93      	ldr	r3, [pc, #588]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x5cc>
 8002f98:	e01b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f9a:	4b8f      	ldr	r3, [pc, #572]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa0:	4a8d      	ldr	r2, [pc, #564]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fd fe75 	bl	8000c98 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb2:	f7fd fe71 	bl	8000c98 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10e      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc4:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ef      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8102 	beq.w	80031e0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f040 80c5 	bne.w	8003170 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d12c      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	3b01      	subs	r3, #1
 8003006:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d123      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d11b      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d113      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d109      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d067      	beq.n	8003124 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d062      	beq.n	8003120 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800305a:	4b5f      	ldr	r3, [pc, #380]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0bb      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5a      	ldr	r2, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003074:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003076:	f7fd fe0f 	bl	8000c98 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7fd fe0b 	bl	8000c98 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0a8      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309c:	4b4e      	ldr	r3, [pc, #312]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <HAL_RCC_OscConfig+0x830>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b6:	0212      	lsls	r2, r2, #8
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0552      	lsls	r2, r2, #21
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030ca:	0852      	lsrs	r2, r2, #1
 80030cc:	3a01      	subs	r2, #1
 80030ce:	0652      	lsls	r2, r2, #25
 80030d0:	4311      	orrs	r1, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d6:	06d2      	lsls	r2, r2, #27
 80030d8:	430a      	orrs	r2, r1
 80030da:	493f      	ldr	r1, [pc, #252]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030e0:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a39      	ldr	r2, [pc, #228]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f8:	f7fd fdce 	bl	8000c98 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fd fdca 	bl	8000c98 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e067      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311e:	e05f      	b.n	80031e0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e05e      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003148:	f7fd fda6 	bl	8000c98 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fd fda2 	bl	8000c98 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e03f      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x7a4>
 800316e:	e037      	b.n	80031e0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d02d      	beq.n	80031d2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 800317c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003180:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80031a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fd fd75 	bl	8000c98 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fd fd71 	bl	8000c98 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e00e      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <HAL_RCC_OscConfig+0x82c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x806>
 80031d0:	e006      	b.n	80031e0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e005      	b.n	80031e2 <HAL_RCC_OscConfig+0x836>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0c8      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b63      	ldr	r3, [pc, #396]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4961      	ldr	r1, [pc, #388]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b0      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d04c      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003244:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d121      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e09e      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d107      	bne.n	800326c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d115      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e092      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003274:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e086      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e07e      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003294:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 0203 	bic.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	493f      	ldr	r1, [pc, #252]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a6:	f7fd fcf7 	bl	8000c98 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ae:	f7fd fcf3 	bl	8000c98 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e066      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 020c 	and.w	r2, r3, #12
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d1eb      	bne.n	80032ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	492c      	ldr	r1, [pc, #176]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b29      	ldr	r3, [pc, #164]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d210      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4924      	ldr	r1, [pc, #144]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_RCC_ClockConfig+0x1b0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e036      	b.n	8003392 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4918      	ldr	r1, [pc, #96]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4910      	ldr	r1, [pc, #64]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003362:	f000 f825 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003366:	4601      	mov	r1, r0
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCC_ClockConfig+0x1b4>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	fa21 f303 	lsr.w	r3, r1, r3
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd faf2 	bl	8000970 <HAL_InitTick>
 800338c:	4603      	mov	r3, r0
 800338e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003390:	7afb      	ldrb	r3, [r7, #11]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	0800bb44 	.word	0x0800bb44
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000004 	.word	0x20000004

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c8:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x34>
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11e      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033f0:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e005      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10d      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d102      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e004      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d101      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003436:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d133      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800343e:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d002      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xa4>
 800344e:	2b03      	cmp	r3, #3
 8003450:	d003      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0xaa>
 8003452:	e005      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003456:	617b      	str	r3, [r7, #20]
      break;
 8003458:	e005      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800345a:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800345c:	617b      	str	r3, [r7, #20]
      break;
 800345e:	e002      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	617b      	str	r3, [r7, #20]
      break;
 8003464:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	3301      	adds	r3, #1
 8003472:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	fb02 f203 	mul.w	r2, r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	0e5b      	lsrs	r3, r3, #25
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034a6:	69bb      	ldr	r3, [r7, #24]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3724      	adds	r7, #36	; 0x24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40021000 	.word	0x40021000
 80034b8:	0800bb5c 	.word	0x0800bb5c
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200

080034c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000000 	.word	0x20000000

080034dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034e0:	f7ff fff0 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e4:	4601      	mov	r1, r0
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	0800bb54 	.word	0x0800bb54

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800350c:	f7ff ffda 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 8003510:	4601      	mov	r1, r0
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0adb      	lsrs	r3, r3, #11
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	0800bb54 	.word	0x0800bb54

08003534 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	220f      	movs	r2, #15
 8003542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_GetClockConfig+0x5c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	08db      	lsrs	r3, r3, #3
 800356e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <HAL_RCC_GetClockConfig+0x60>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0207 	and.w	r2, r3, #7
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	40022000 	.word	0x40022000

08003598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a4:	4b2a      	ldr	r3, [pc, #168]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035b0:	f7ff f988 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 80035b4:	6178      	str	r0, [r7, #20]
 80035b6:	e014      	b.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	; 0x58
 80035c4:	4b22      	ldr	r3, [pc, #136]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035d0:	f7ff f978 	bl	80028c4 <HAL_PWREx_GetVoltageRange>
 80035d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d10b      	bne.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d919      	bls.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2ba0      	cmp	r3, #160	; 0xa0
 80035f4:	d902      	bls.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f6:	2302      	movs	r3, #2
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e013      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035fc:	2301      	movs	r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e010      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d902      	bls.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003608:	2303      	movs	r3, #3
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	e00a      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d102      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003614:	2302      	movs	r3, #2
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e004      	b.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b70      	cmp	r3, #112	; 0x70
 800361e:	d101      	bne.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003620:	2301      	movs	r3, #1
 8003622:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 0207 	bic.w	r2, r3, #7
 800362c:	4909      	ldr	r1, [pc, #36]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	40022000 	.word	0x40022000

08003658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003660:	2300      	movs	r3, #0
 8003662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003664:	2300      	movs	r3, #0
 8003666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800367c:	d005      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800367e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003682:	d015      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003688:	e00f      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800368a:	4bac      	ldr	r3, [pc, #688]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4aab      	ldr	r2, [pc, #684]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f9dc 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	74fb      	strb	r3, [r7, #19]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80036b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b8:	4ba0      	ldr	r3, [pc, #640]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	499d      	ldr	r1, [pc, #628]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ce:	e001      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8099 	beq.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036e6:	4b95      	ldr	r3, [pc, #596]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b8f      	ldr	r3, [pc, #572]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a8e      	ldr	r2, [pc, #568]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
 8003708:	4b8c      	ldr	r3, [pc, #560]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b89      	ldr	r3, [pc, #548]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a88      	ldr	r2, [pc, #544]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003724:	f7fd fab8 	bl	8000c98 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800372a:	e009      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372c:	f7fd fab4 	bl	8000c98 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	74fb      	strb	r3, [r7, #19]
        break;
 800373e:	e005      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003740:	4b7f      	ldr	r3, [pc, #508]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d155      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003752:	4b7a      	ldr	r3, [pc, #488]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	429a      	cmp	r2, r3
 800376c:	d019      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	4b6c      	ldr	r3, [pc, #432]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800379a:	4a68      	ldr	r2, [pc, #416]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd fa74 	bl	8000c98 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b2:	e00b      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd fa70 	bl	8000c98 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d902      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	74fb      	strb	r3, [r7, #19]
            break;
 80037ca:	e006      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037cc:	4b5b      	ldr	r3, [pc, #364]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ec      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e0:	4b56      	ldr	r3, [pc, #344]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ee:	4953      	ldr	r1, [pc, #332]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
 80037fc:	e001      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003802:	7c7b      	ldrb	r3, [r7, #17]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	4a4b      	ldr	r2, [pc, #300]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003820:	4b46      	ldr	r3, [pc, #280]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4943      	ldr	r1, [pc, #268]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003842:	4b3e      	ldr	r3, [pc, #248]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f023 020c 	bic.w	r2, r3, #12
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	493a      	ldr	r1, [pc, #232]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003864:	4b35      	ldr	r3, [pc, #212]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	4932      	ldr	r1, [pc, #200]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003886:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003894:	4929      	ldr	r1, [pc, #164]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	4921      	ldr	r1, [pc, #132]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ca:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4918      	ldr	r1, [pc, #96]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4910      	ldr	r1, [pc, #64]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02c      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	4907      	ldr	r1, [pc, #28]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392c:	d10a      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392e:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a02      	ldr	r2, [pc, #8]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003938:	60d3      	str	r3, [r2, #12]
 800393a:	e015      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800394c:	d10c      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f881 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d028      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	492d      	ldr	r1, [pc, #180]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003992:	d106      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
 80039a0:	e011      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f852 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	4915      	ldr	r1, [pc, #84]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f82f 	bl	8003a5c <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6a:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a76:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0203 	and.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a8e:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d044      	beq.n	8003b2c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	e041      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d00c      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x6e>
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d013      	beq.n	8003adc <RCCEx_PLLSAI1_Config+0x80>
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d120      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ab8:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d11d      	bne.n	8003b00 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac8:	e01a      	b.n	8003b00 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aca:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e013      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003adc:	4b56      	ldr	r3, [pc, #344]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003af8:	e006      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      break;
 8003afe:	e004      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b00:	bf00      	nop
 8003b02:	e002      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003b08:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b10:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	430b      	orrs	r3, r1
 8003b26:	4944      	ldr	r1, [pc, #272]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d17c      	bne.n	8003c2c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a40      	ldr	r2, [pc, #256]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3e:	f7fd f8ab 	bl	8000c98 <HAL_GetTick>
 8003b42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b44:	e009      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b46:	f7fd f8a7 	bl	8000c98 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d902      	bls.n	8003b5a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	73fb      	strb	r3, [r7, #15]
        break;
 8003b58:	e005      	b.n	8003b66 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ef      	bne.n	8003b46 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d15f      	bne.n	8003c2c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d110      	bne.n	8003b94 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6892      	ldr	r2, [r2, #8]
 8003b82:	0211      	lsls	r1, r2, #8
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	06d2      	lsls	r2, r2, #27
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	492a      	ldr	r1, [pc, #168]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]
 8003b92:	e027      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d112      	bne.n	8003bc0 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ba2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6892      	ldr	r2, [r2, #8]
 8003baa:	0211      	lsls	r1, r2, #8
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6912      	ldr	r2, [r2, #16]
 8003bb0:	0852      	lsrs	r2, r2, #1
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	0552      	lsls	r2, r2, #21
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	491f      	ldr	r1, [pc, #124]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	610b      	str	r3, [r1, #16]
 8003bbe:	e011      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	0211      	lsls	r1, r2, #8
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6952      	ldr	r2, [r2, #20]
 8003bd6:	0852      	lsrs	r2, r2, #1
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	0652      	lsls	r2, r2, #25
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	4916      	ldr	r1, [pc, #88]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fd f852 	bl	8000c98 <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf8:	f7fd f84e 	bl	8000c98 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
          break;
 8003c0a:	e005      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ef      	beq.n	8003bf8 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	4904      	ldr	r1, [pc, #16]	; (8003c38 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e095      	b.n	8003d7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5e:	d009      	beq.n	8003c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
 8003c66:	e005      	b.n	8003c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc fdd8 	bl	8000844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb4:	d902      	bls.n	8003cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e002      	b.n	8003cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Init+0xa0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	f003 0204 	and.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e049      	b.n	8003e28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f841 	bl	8003e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 f9db 	bl	800417c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e03b      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_TIM_Base_Start_IT+0x4e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d004      	beq.n	8003e92 <HAL_TIM_Base_Start_IT+0x4e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d115      	bne.n	8003ebe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xa4>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d015      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eaa:	d011      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	e008      	b.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e000      	b.n	8003ed2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	00010007 	.word	0x00010007

08003eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d122      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d11b      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0202 	mvn.w	r2, #2
 8003f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f905 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8f7 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f908 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d122      	bne.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d11b      	bne.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0204 	mvn.w	r2, #4
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8db 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8cd 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8de 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d122      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0208 	mvn.w	r2, #8
 8003fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8b1 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8a3 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8b4 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0210 	mvn.w	r2, #16
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2208      	movs	r2, #8
 800401a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f887 	bl	800413e <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f879 	bl	800412a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f88a 	bl	8004152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10e      	bne.n	8004070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0201 	mvn.w	r2, #1
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fbac 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d10e      	bne.n	800409c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d107      	bne.n	800409c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8de 	bl	8004258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040aa:	d10e      	bne.n	80040ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b80      	cmp	r3, #128	; 0x80
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8d1 	bl	800426c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d10e      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d107      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f838 	bl	8004166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b20      	cmp	r3, #32
 8004102:	d10e      	bne.n	8004122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b20      	cmp	r3, #32
 8004110:	d107      	bne.n	8004122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0220 	mvn.w	r2, #32
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f891 	bl	8004244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_Base_SetConfig+0x20>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419a:	d108      	bne.n	80041ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a21      	ldr	r2, [pc, #132]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_Base_SetConfig+0x52>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0x52>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <TIM_Base_SetConfig+0xc0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0x52>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <TIM_Base_SetConfig+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <TIM_Base_SetConfig+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0xa0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <TIM_Base_SetConfig+0xc0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0xa0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <TIM_Base_SetConfig+0xc4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400

08004244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e040      	b.n	8004314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fb10 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	; 0x24
 80042ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f82c 	bl	800431c <UART_SetConfig>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e022      	b.n	8004314 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa30 	bl	800473c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fab7 	bl	8004880 <UART_CheckIdleState>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800431c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4313      	orrs	r3, r2
 8004340:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4bb0      	ldr	r3, [pc, #704]	; (800460c <UART_SetConfig+0x2f0>)
 800434a:	4013      	ands	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	430b      	orrs	r3, r1
 8004354:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4aa6      	ldr	r2, [pc, #664]	; (8004610 <UART_SetConfig+0x2f4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a9d      	ldr	r2, [pc, #628]	; (8004614 <UART_SetConfig+0x2f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d121      	bne.n	80043e8 <UART_SetConfig+0xcc>
 80043a4:	4b9c      	ldr	r3, [pc, #624]	; (8004618 <UART_SetConfig+0x2fc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d816      	bhi.n	80043e0 <UART_SetConfig+0xc4>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0x9c>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043d5 	.word	0x080043d5
 80043c0:	080043cf 	.word	0x080043cf
 80043c4:	080043db 	.word	0x080043db
 80043c8:	2301      	movs	r3, #1
 80043ca:	76fb      	strb	r3, [r7, #27]
 80043cc:	e072      	b.n	80044b4 <UART_SetConfig+0x198>
 80043ce:	2302      	movs	r3, #2
 80043d0:	76fb      	strb	r3, [r7, #27]
 80043d2:	e06f      	b.n	80044b4 <UART_SetConfig+0x198>
 80043d4:	2304      	movs	r3, #4
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	e06c      	b.n	80044b4 <UART_SetConfig+0x198>
 80043da:	2308      	movs	r3, #8
 80043dc:	76fb      	strb	r3, [r7, #27]
 80043de:	e069      	b.n	80044b4 <UART_SetConfig+0x198>
 80043e0:	2310      	movs	r3, #16
 80043e2:	76fb      	strb	r3, [r7, #27]
 80043e4:	bf00      	nop
 80043e6:	e065      	b.n	80044b4 <UART_SetConfig+0x198>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a8b      	ldr	r2, [pc, #556]	; (800461c <UART_SetConfig+0x300>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d134      	bne.n	800445c <UART_SetConfig+0x140>
 80043f2:	4b89      	ldr	r3, [pc, #548]	; (8004618 <UART_SetConfig+0x2fc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d829      	bhi.n	8004454 <UART_SetConfig+0x138>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0xec>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800443d 	.word	0x0800443d
 800440c:	08004455 	.word	0x08004455
 8004410:	08004455 	.word	0x08004455
 8004414:	08004455 	.word	0x08004455
 8004418:	08004449 	.word	0x08004449
 800441c:	08004455 	.word	0x08004455
 8004420:	08004455 	.word	0x08004455
 8004424:	08004455 	.word	0x08004455
 8004428:	08004443 	.word	0x08004443
 800442c:	08004455 	.word	0x08004455
 8004430:	08004455 	.word	0x08004455
 8004434:	08004455 	.word	0x08004455
 8004438:	0800444f 	.word	0x0800444f
 800443c:	2300      	movs	r3, #0
 800443e:	76fb      	strb	r3, [r7, #27]
 8004440:	e038      	b.n	80044b4 <UART_SetConfig+0x198>
 8004442:	2302      	movs	r3, #2
 8004444:	76fb      	strb	r3, [r7, #27]
 8004446:	e035      	b.n	80044b4 <UART_SetConfig+0x198>
 8004448:	2304      	movs	r3, #4
 800444a:	76fb      	strb	r3, [r7, #27]
 800444c:	e032      	b.n	80044b4 <UART_SetConfig+0x198>
 800444e:	2308      	movs	r3, #8
 8004450:	76fb      	strb	r3, [r7, #27]
 8004452:	e02f      	b.n	80044b4 <UART_SetConfig+0x198>
 8004454:	2310      	movs	r3, #16
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	bf00      	nop
 800445a:	e02b      	b.n	80044b4 <UART_SetConfig+0x198>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6b      	ldr	r2, [pc, #428]	; (8004610 <UART_SetConfig+0x2f4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d124      	bne.n	80044b0 <UART_SetConfig+0x194>
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <UART_SetConfig+0x2fc>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004474:	d012      	beq.n	800449c <UART_SetConfig+0x180>
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d802      	bhi.n	8004482 <UART_SetConfig+0x166>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <UART_SetConfig+0x174>
 8004480:	e012      	b.n	80044a8 <UART_SetConfig+0x18c>
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004486:	d006      	beq.n	8004496 <UART_SetConfig+0x17a>
 8004488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800448c:	d009      	beq.n	80044a2 <UART_SetConfig+0x186>
 800448e:	e00b      	b.n	80044a8 <UART_SetConfig+0x18c>
 8004490:	2300      	movs	r3, #0
 8004492:	76fb      	strb	r3, [r7, #27]
 8004494:	e00e      	b.n	80044b4 <UART_SetConfig+0x198>
 8004496:	2302      	movs	r3, #2
 8004498:	76fb      	strb	r3, [r7, #27]
 800449a:	e00b      	b.n	80044b4 <UART_SetConfig+0x198>
 800449c:	2304      	movs	r3, #4
 800449e:	76fb      	strb	r3, [r7, #27]
 80044a0:	e008      	b.n	80044b4 <UART_SetConfig+0x198>
 80044a2:	2308      	movs	r3, #8
 80044a4:	76fb      	strb	r3, [r7, #27]
 80044a6:	e005      	b.n	80044b4 <UART_SetConfig+0x198>
 80044a8:	2310      	movs	r3, #16
 80044aa:	76fb      	strb	r3, [r7, #27]
 80044ac:	bf00      	nop
 80044ae:	e001      	b.n	80044b4 <UART_SetConfig+0x198>
 80044b0:	2310      	movs	r3, #16
 80044b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a55      	ldr	r2, [pc, #340]	; (8004610 <UART_SetConfig+0x2f4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d174      	bne.n	80045a8 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044be:	7efb      	ldrb	r3, [r7, #27]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d824      	bhi.n	800450e <UART_SetConfig+0x1f2>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x1b0>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	080044ff 	.word	0x080044ff
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800450f 	.word	0x0800450f
 80044ec:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe fff4 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 80044f4:	6178      	str	r0, [r7, #20]
        break;
 80044f6:	e00f      	b.n	8004518 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b49      	ldr	r3, [pc, #292]	; (8004620 <UART_SetConfig+0x304>)
 80044fa:	617b      	str	r3, [r7, #20]
        break;
 80044fc:	e00c      	b.n	8004518 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fe ff57 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8004502:	6178      	str	r0, [r7, #20]
        break;
 8004504:	e008      	b.n	8004518 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	617b      	str	r3, [r7, #20]
        break;
 800450c:	e004      	b.n	8004518 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	76bb      	strb	r3, [r7, #26]
        break;
 8004516:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8100 	beq.w	8004720 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	429a      	cmp	r2, r3
 800452e:	d305      	bcc.n	800453c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	d902      	bls.n	8004542 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	76bb      	strb	r3, [r7, #26]
 8004540:	e0ee      	b.n	8004720 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4619      	mov	r1, r3
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	0214      	lsls	r4, r2, #8
 8004554:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004558:	020b      	lsls	r3, r1, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6852      	ldr	r2, [r2, #4]
 800455e:	0852      	lsrs	r2, r2, #1
 8004560:	4611      	mov	r1, r2
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	eb13 0b01 	adds.w	fp, r3, r1
 800456a:	eb44 0c02 	adc.w	ip, r4, r2
 800456e:	4658      	mov	r0, fp
 8004570:	4661      	mov	r1, ip
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	461a      	mov	r2, r3
 800457c:	4623      	mov	r3, r4
 800457e:	f7fb fe27 	bl	80001d0 <__aeabi_uldivmod>
 8004582:	4603      	mov	r3, r0
 8004584:	460c      	mov	r4, r1
 8004586:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458e:	d308      	bcc.n	80045a2 <UART_SetConfig+0x286>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d204      	bcs.n	80045a2 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e0be      	b.n	8004720 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	76bb      	strb	r3, [r7, #26]
 80045a6:	e0bb      	b.n	8004720 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	d169      	bne.n	8004686 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80045b2:	7efb      	ldrb	r3, [r7, #27]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d835      	bhi.n	8004624 <UART_SetConfig+0x308>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x2a4>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045f5 	.word	0x080045f5
 80045cc:	08004625 	.word	0x08004625
 80045d0:	080045fb 	.word	0x080045fb
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004625 	.word	0x08004625
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004603 	.word	0x08004603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7fe ff7a 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 80045e8:	6178      	str	r0, [r7, #20]
        break;
 80045ea:	e020      	b.n	800462e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7fe ff8c 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80045f0:	6178      	str	r0, [r7, #20]
        break;
 80045f2:	e01c      	b.n	800462e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <UART_SetConfig+0x304>)
 80045f6:	617b      	str	r3, [r7, #20]
        break;
 80045f8:	e019      	b.n	800462e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7fe fed9 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 80045fe:	6178      	str	r0, [r7, #20]
        break;
 8004600:	e015      	b.n	800462e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	617b      	str	r3, [r7, #20]
        break;
 8004608:	e011      	b.n	800462e <UART_SetConfig+0x312>
 800460a:	bf00      	nop
 800460c:	efff69f3 	.word	0xefff69f3
 8004610:	40008000 	.word	0x40008000
 8004614:	40013800 	.word	0x40013800
 8004618:	40021000 	.word	0x40021000
 800461c:	40004400 	.word	0x40004400
 8004620:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	76bb      	strb	r3, [r7, #26]
        break;
 800462c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d075      	beq.n	8004720 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005a      	lsls	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	441a      	add	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	b29b      	uxth	r3, r3
 800464a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0f      	cmp	r3, #15
 8004650:	d916      	bls.n	8004680 <UART_SetConfig+0x364>
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004658:	d212      	bcs.n	8004680 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f023 030f 	bic.w	r3, r3, #15
 8004662:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	b29b      	uxth	r3, r3
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	b29a      	uxth	r2, r3
 8004670:	89fb      	ldrh	r3, [r7, #14]
 8004672:	4313      	orrs	r3, r2
 8004674:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	89fa      	ldrh	r2, [r7, #14]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e04f      	b.n	8004720 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	76bb      	strb	r3, [r7, #26]
 8004684:	e04c      	b.n	8004720 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004686:	7efb      	ldrb	r3, [r7, #27]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d828      	bhi.n	80046de <UART_SetConfig+0x3c2>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x378>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046df 	.word	0x080046df
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046df 	.word	0x080046df
 80046b0:	080046df 	.word	0x080046df
 80046b4:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7fe ff10 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 80046bc:	6178      	str	r0, [r7, #20]
        break;
 80046be:	e013      	b.n	80046e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fe ff22 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80046c4:	6178      	str	r0, [r7, #20]
        break;
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <UART_SetConfig+0x41c>)
 80046ca:	617b      	str	r3, [r7, #20]
        break;
 80046cc:	e00c      	b.n	80046e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fe fe6f 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 80046d2:	6178      	str	r0, [r7, #20]
        break;
 80046d4:	e008      	b.n	80046e8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	617b      	str	r3, [r7, #20]
        break;
 80046dc:	e004      	b.n	80046e8 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	76bb      	strb	r3, [r7, #26]
        break;
 80046e6:	bf00      	nop
    }

    if (pclk != 0U)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	085a      	lsrs	r2, r3, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	d908      	bls.n	800471c <UART_SetConfig+0x400>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d204      	bcs.n	800471c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	e001      	b.n	8004720 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800472c:	7ebb      	ldrb	r3, [r7, #26]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004738:	00f42400 	.word	0x00f42400

0800473c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d10a      	bne.n	8004852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	605a      	str	r2, [r3, #4]
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800488e:	f7fc fa03 	bl	8000c98 <HAL_GetTick>
 8004892:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d10e      	bne.n	80048c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f82a 	bl	800490a <UART_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e020      	b.n	8004902 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d10e      	bne.n	80048ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f814 	bl	800490a <UART_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e00a      	b.n	8004902 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491a:	e05d      	b.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004922:	d059      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fc f9b8 	bl	8000c98 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <UART_WaitOnFlagUntilTimeout+0x30>
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11b      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004948:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e042      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02b      	beq.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498e:	d123      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004998:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e00f      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d092      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 0014 	add.w	r0, r7, #20
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	b004      	add	sp, #16
 8004a20:	4770      	bx	lr

08004a22 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a32:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004a5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	f107 0014 	add.w	r0, r7, #20
 8004aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	b004      	add	sp, #16
 8004ae0:	4770      	bx	lr
	...

08004ae4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b09b      	sub	sp, #108	; 0x6c
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d81f      	bhi.n	8004b56 <USB_ActivateEndpoint+0x72>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <USB_ActivateEndpoint+0x38>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b5f 	.word	0x08004b5f
 8004b28:	08004b3b 	.word	0x08004b3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b38:	e012      	b.n	8004b60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b46:	e00b      	b.n	8004b60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b54:	e004      	b.n	8004b60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b5c:	e000      	b.n	8004b60 <USB_ActivateEndpoint+0x7c>
      break;
 8004b5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	b21b      	sxth	r3, r3
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	b21a      	sxth	r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b21b      	sxth	r3, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	b21b      	sxth	r3, r3
 8004ba6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	7b1b      	ldrb	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 8149 	bne.w	8004e68 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8084 	beq.w	8004ce8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	00da      	lsls	r2, r3, #3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	88db      	ldrh	r3, [r3, #6]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	81fb      	strh	r3, [r7, #14]
 8004c22:	89fb      	ldrh	r3, [r7, #14]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <USB_ActivateEndpoint+0x180>
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	81bb      	strh	r3, [r7, #12]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	89bb      	ldrh	r3, [r7, #12]
 8004c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d020      	beq.n	8004cae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c82:	813b      	strh	r3, [r7, #8]
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	f083 0320 	eor.w	r3, r3, #32
 8004c8a:	813b      	strh	r3, [r7, #8]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	893b      	ldrh	r3, [r7, #8]
 8004c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	8013      	strh	r3, [r2, #0]
 8004cac:	e27f      	b.n	80051ae <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	897b      	ldrh	r3, [r7, #10]
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
 8004ce6:	e262      	b.n	80051ae <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	4413      	add	r3, r2
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	00da      	lsls	r2, r3, #3
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	4413      	add	r3, r2
 8004d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	88db      	ldrh	r3, [r3, #6]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	4413      	add	r3, r2
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	00da      	lsls	r2, r3, #3
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d112      	bne.n	8004d6e <USB_ActivateEndpoint+0x28a>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e02f      	b.n	8004dce <USB_ActivateEndpoint+0x2ea>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b3e      	cmp	r3, #62	; 0x3e
 8004d74:	d813      	bhi.n	8004d9e <USB_ActivateEndpoint+0x2ba>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <USB_ActivateEndpoint+0x2ac>
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	801a      	strh	r2, [r3, #0]
 8004d9c:	e017      	b.n	8004dce <USB_ActivateEndpoint+0x2ea>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	663b      	str	r3, [r7, #96]	; 0x60
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <USB_ActivateEndpoint+0x2d4>
 8004db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db4:	3b01      	subs	r3, #1
 8004db6:	663b      	str	r3, [r7, #96]	; 0x60
 8004db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	83fb      	strh	r3, [r7, #30]
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01b      	beq.n	8004e1e <USB_ActivateEndpoint+0x33a>
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	83bb      	strh	r3, [r7, #28]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	441a      	add	r2, r3
 8004e08:	8bbb      	ldrh	r3, [r7, #28]
 8004e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e34:	837b      	strh	r3, [r7, #26]
 8004e36:	8b7b      	ldrh	r3, [r7, #26]
 8004e38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e3c:	837b      	strh	r3, [r7, #26]
 8004e3e:	8b7b      	ldrh	r3, [r7, #26]
 8004e40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e44:	837b      	strh	r3, [r7, #26]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	8b7b      	ldrh	r3, [r7, #26]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
 8004e66:	e1a2      	b.n	80051ae <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb4:	4413      	add	r3, r2
 8004eb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	00da      	lsls	r2, r3, #3
 8004ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	891b      	ldrh	r3, [r3, #8]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	653b      	str	r3, [r7, #80]	; 0x50
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee8:	4413      	add	r3, r2
 8004eea:	653b      	str	r3, [r7, #80]	; 0x50
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	00da      	lsls	r2, r3, #3
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	895b      	ldrh	r3, [r3, #10]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8091 	bne.w	8005038 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01b      	beq.n	8004f66 <USB_ActivateEndpoint+0x482>
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <USB_ActivateEndpoint+0x4d2>
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fcc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fdc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005014:	867b      	strh	r3, [r7, #50]	; 0x32
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005032:	b29b      	uxth	r3, r3
 8005034:	8013      	strh	r3, [r2, #0]
 8005036:	e0ba      	b.n	80051ae <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005048:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800504c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01d      	beq.n	8005090 <USB_ActivateEndpoint+0x5ac>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800507c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01d      	beq.n	80050e8 <USB_ActivateEndpoint+0x604>
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d024      	beq.n	800513a <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800510a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800510e:	f083 0320 	eor.w	r3, r3, #32
 8005112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441a      	add	r2, r3
 8005120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]
 8005138:	e01d      	b.n	8005176 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005150:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	376c      	adds	r7, #108	; 0x6c
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop

080051c0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b08d      	sub	sp, #52	; 0x34
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	7b1b      	ldrb	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 808e 	bne.w	80052f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d044      	beq.n	8005266 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	81bb      	strh	r3, [r7, #12]
 80051ea:	89bb      	ldrh	r3, [r7, #12]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <USB_DeactivateEndpoint+0x6c>
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	817b      	strh	r3, [r7, #10]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005242:	813b      	strh	r3, [r7, #8]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	893b      	ldrh	r3, [r7, #8]
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
 8005264:	e192      	b.n	800558c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	827b      	strh	r3, [r7, #18]
 8005274:	8a7b      	ldrh	r3, [r7, #18]
 8005276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01b      	beq.n	80052b6 <USB_DeactivateEndpoint+0xf6>
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	823b      	strh	r3, [r7, #16]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	8a3b      	ldrh	r3, [r7, #16]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	81fb      	strh	r3, [r7, #14]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	441a      	add	r2, r3
 80052d8:	89fb      	ldrh	r3, [r7, #14]
 80052da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]
 80052ee:	e14d      	b.n	800558c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 80a5 	bne.w	8005444 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	843b      	strh	r3, [r7, #32]
 8005308:	8c3b      	ldrh	r3, [r7, #32]
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01b      	beq.n	800534a <USB_DeactivateEndpoint+0x18a>
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	83fb      	strh	r3, [r7, #30]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	441a      	add	r2, r3
 8005334:	8bfb      	ldrh	r3, [r7, #30]
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	83bb      	strh	r3, [r7, #28]
 8005358:	8bbb      	ldrh	r3, [r7, #28]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01b      	beq.n	800539a <USB_DeactivateEndpoint+0x1da>
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	837b      	strh	r3, [r7, #26]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8b7b      	ldrh	r3, [r7, #26]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	833b      	strh	r3, [r7, #24]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	8b3b      	ldrh	r3, [r7, #24]
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e8:	82fb      	strh	r3, [r7, #22]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	8afb      	ldrh	r3, [r7, #22]
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005420:	82bb      	strh	r3, [r7, #20]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	441a      	add	r2, r3
 800542c:	8abb      	ldrh	r3, [r7, #20]
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]
 8005442:	e0a3      	b.n	800558c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005452:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <USB_DeactivateEndpoint+0x2d4>
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800548c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <USB_DeactivateEndpoint+0x324>
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	441a      	add	r2, r3
 80054ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005532:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	847b      	strh	r3, [r7, #34]	; 0x22
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005588:	b29b      	uxth	r3, r3
 800558a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3734      	adds	r7, #52	; 0x34
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b0c4      	sub	sp, #272	; 0x110
 800559e:	af00      	add	r7, sp, #0
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	6018      	str	r0, [r3, #0]
 80055a4:	463b      	mov	r3, r7
 80055a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	f040 8566 	bne.w	8006080 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d905      	bls.n	80055d0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055c4:	463b      	mov	r3, r7
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055ce:	e004      	b.n	80055da <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	7b1b      	ldrb	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d12c      	bne.n	800563e <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6959      	ldr	r1, [r3, #20]
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	88da      	ldrh	r2, [r3, #6]
 80055f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	1d38      	adds	r0, r7, #4
 80055f8:	6800      	ldr	r0, [r0, #0]
 80055fa:	f001 fa58 	bl	8006aae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055fe:	1d3b      	adds	r3, r7, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	1d3b      	adds	r3, r7, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560c:	b29b      	uxth	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005630:	b29a      	uxth	r2, r3
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	f000 bcec 	b.w	8006016 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	78db      	ldrb	r3, [r3, #3]
 8005644:	2b02      	cmp	r3, #2
 8005646:	f040 8356 	bne.w	8005cf6 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800564a:	463b      	mov	r3, r7
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	463b      	mov	r3, r7
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	429a      	cmp	r2, r3
 8005658:	f240 82fa 	bls.w	8005c50 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	463b      	mov	r3, r7
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800567a:	1d3b      	adds	r3, r7, #4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 815e 	beq.w	8005994 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d164      	bne.n	80057b2 <USB_EPStartXfer+0x218>
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	4413      	add	r3, r2
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005700:	463b      	mov	r3, r7
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	00da      	lsls	r2, r3, #3
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	4413      	add	r3, r2
 800570c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
 8005712:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005716:	2b00      	cmp	r3, #0
 8005718:	d112      	bne.n	8005740 <USB_EPStartXfer+0x1a6>
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005724:	b29a      	uxth	r2, r3
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005738:	b29a      	uxth	r2, r3
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e054      	b.n	80057ea <USB_EPStartXfer+0x250>
 8005740:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005744:	2b3e      	cmp	r3, #62	; 0x3e
 8005746:	d817      	bhi.n	8005778 <USB_EPStartXfer+0x1de>
 8005748:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800574c:	085b      	lsrs	r3, r3, #1
 800574e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005752:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <USB_EPStartXfer+0x1ce>
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005762:	3301      	adds	r3, #1
 8005764:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576c:	b29b      	uxth	r3, r3
 800576e:	029b      	lsls	r3, r3, #10
 8005770:	b29a      	uxth	r2, r3
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	e038      	b.n	80057ea <USB_EPStartXfer+0x250>
 8005778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <USB_EPStartXfer+0x1fe>
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005792:	3b01      	subs	r3, #1
 8005794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	b29b      	uxth	r3, r3
 800579e:	029b      	lsls	r3, r3, #10
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e01b      	b.n	80057ea <USB_EPStartXfer+0x250>
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d116      	bne.n	80057ea <USB_EPStartXfer+0x250>
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	4413      	add	r3, r2
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	00da      	lsls	r2, r3, #3
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	4413      	add	r3, r2
 80057da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
 80057e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	895b      	ldrh	r3, [r3, #10]
 80057f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6959      	ldr	r1, [r3, #20]
 80057fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005804:	1d38      	adds	r0, r7, #4
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	f001 f951 	bl	8006aae <USB_WritePMA>
            ep->xfer_buff += len;
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005816:	441a      	add	r2, r3
 8005818:	463b      	mov	r3, r7
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a1a      	ldr	r2, [r3, #32]
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	429a      	cmp	r2, r3
 800582c:	d90e      	bls.n	800584c <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005838:	463b      	mov	r3, r7
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	621a      	str	r2, [r3, #32]
 800584a:	e008      	b.n	800585e <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800584c:	463b      	mov	r3, r7
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d164      	bne.n	8005932 <USB_EPStartXfer+0x398>
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	1d3b      	adds	r3, r7, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005876:	b29b      	uxth	r3, r3
 8005878:	461a      	mov	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	00da      	lsls	r2, r3, #3
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005896:	2b00      	cmp	r3, #0
 8005898:	d112      	bne.n	80058c0 <USB_EPStartXfer+0x326>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e057      	b.n	8005970 <USB_EPStartXfer+0x3d6>
 80058c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c4:	2b3e      	cmp	r3, #62	; 0x3e
 80058c6:	d817      	bhi.n	80058f8 <USB_EPStartXfer+0x35e>
 80058c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <USB_EPStartXfer+0x34e>
 80058de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058e2:	3301      	adds	r3, #1
 80058e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e03b      	b.n	8005970 <USB_EPStartXfer+0x3d6>
 80058f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005902:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <USB_EPStartXfer+0x37e>
 800590e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005912:	3b01      	subs	r3, #1
 8005914:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005918:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800591c:	b29b      	uxth	r3, r3
 800591e:	029b      	lsls	r3, r3, #10
 8005920:	b29b      	uxth	r3, r3
 8005922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592a:	b29a      	uxth	r2, r3
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	e01e      	b.n	8005970 <USB_EPStartXfer+0x3d6>
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d119      	bne.n	8005970 <USB_EPStartXfer+0x3d6>
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	1d3b      	adds	r3, r7, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	4413      	add	r3, r2
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	00da      	lsls	r2, r3, #3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	4413      	add	r3, r2
 8005960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800596a:	b29a      	uxth	r2, r3
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	891b      	ldrh	r3, [r3, #8]
 8005976:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6959      	ldr	r1, [r3, #20]
 8005980:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005984:	b29b      	uxth	r3, r3
 8005986:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800598a:	1d38      	adds	r0, r7, #4
 800598c:	6800      	ldr	r0, [r0, #0]
 800598e:	f001 f88e 	bl	8006aae <USB_WritePMA>
 8005992:	e340      	b.n	8006016 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d164      	bne.n	8005a68 <USB_EPStartXfer+0x4ce>
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	4413      	add	r3, r2
 80059b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	00da      	lsls	r2, r3, #3
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	4413      	add	r3, r2
 80059c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d112      	bne.n	80059f6 <USB_EPStartXfer+0x45c>
 80059d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e057      	b.n	8005aa6 <USB_EPStartXfer+0x50c>
 80059f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059fa:	2b3e      	cmp	r3, #62	; 0x3e
 80059fc:	d817      	bhi.n	8005a2e <USB_EPStartXfer+0x494>
 80059fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <USB_EPStartXfer+0x484>
 8005a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	e03b      	b.n	8005aa6 <USB_EPStartXfer+0x50c>
 8005a2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <USB_EPStartXfer+0x4b4>
 8005a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	e01e      	b.n	8005aa6 <USB_EPStartXfer+0x50c>
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d119      	bne.n	8005aa6 <USB_EPStartXfer+0x50c>
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	657b      	str	r3, [r7, #84]	; 0x54
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a86:	4413      	add	r3, r2
 8005a88:	657b      	str	r3, [r7, #84]	; 0x54
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	00da      	lsls	r2, r3, #3
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	4413      	add	r3, r2
 8005a96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	891b      	ldrh	r3, [r3, #8]
 8005aac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ac0:	1d38      	adds	r0, r7, #4
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	f000 fff3 	bl	8006aae <USB_WritePMA>
            ep->xfer_buff += len;
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ad2:	441a      	add	r2, r3
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d90e      	bls.n	8005b08 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	621a      	str	r2, [r3, #32]
 8005b06:	e008      	b.n	8005b1a <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005b12:	463b      	mov	r3, r7
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b20:	463b      	mov	r3, r7
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d164      	bne.n	8005bf4 <USB_EPStartXfer+0x65a>
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3e:	4413      	add	r3, r2
 8005b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	00da      	lsls	r2, r3, #3
 8005b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d112      	bne.n	8005b82 <USB_EPStartXfer+0x5e8>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	e054      	b.n	8005c2c <USB_EPStartXfer+0x692>
 8005b82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b86:	2b3e      	cmp	r3, #62	; 0x3e
 8005b88:	d817      	bhi.n	8005bba <USB_EPStartXfer+0x620>
 8005b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <USB_EPStartXfer+0x610>
 8005ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	e038      	b.n	8005c2c <USB_EPStartXfer+0x692>
 8005bba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d104      	bne.n	8005bda <USB_EPStartXfer+0x640>
 8005bd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e01b      	b.n	8005c2c <USB_EPStartXfer+0x692>
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d116      	bne.n	8005c2c <USB_EPStartXfer+0x692>
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0c:	4413      	add	r3, r2
 8005c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	00da      	lsls	r2, r3, #3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c20:	643b      	str	r3, [r7, #64]	; 0x40
 8005c22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	895b      	ldrh	r3, [r3, #10]
 8005c32:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6959      	ldr	r1, [r3, #20]
 8005c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c46:	1d38      	adds	r0, r7, #4
 8005c48:	6800      	ldr	r0, [r0, #0]
 8005c4a:	f000 ff30 	bl	8006aae <USB_WritePMA>
 8005c4e:	e1e2      	b.n	8006016 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	463b      	mov	r3, r7
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb2:	4413      	add	r3, r2
 8005cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	00da      	lsls	r2, r3, #3
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cc8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	891b      	ldrh	r3, [r3, #8]
 8005cd8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6959      	ldr	r1, [r3, #20]
 8005ce2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005cec:	1d38      	adds	r0, r7, #4
 8005cee:	6800      	ldr	r0, [r0, #0]
 8005cf0:	f000 fedd 	bl	8006aae <USB_WritePMA>
 8005cf4:	e18f      	b.n	8006016 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 808f 	beq.w	8005e30 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d164      	bne.n	8005dec <USB_EPStartXfer+0x852>
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	673b      	str	r3, [r7, #112]	; 0x70
 8005d28:	1d3b      	adds	r3, r7, #4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	461a      	mov	r2, r3
 8005d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d36:	4413      	add	r3, r2
 8005d38:	673b      	str	r3, [r7, #112]	; 0x70
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d44:	4413      	add	r3, r2
 8005d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d112      	bne.n	8005d7a <USB_EPStartXfer+0x7e0>
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	e054      	b.n	8005e24 <USB_EPStartXfer+0x88a>
 8005d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d80:	d817      	bhi.n	8005db2 <USB_EPStartXfer+0x818>
 8005d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <USB_EPStartXfer+0x808>
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e038      	b.n	8005e24 <USB_EPStartXfer+0x88a>
 8005db2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <USB_EPStartXfer+0x838>
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e01b      	b.n	8005e24 <USB_EPStartXfer+0x88a>
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d116      	bne.n	8005e24 <USB_EPStartXfer+0x88a>
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e04:	4413      	add	r3, r2
 8005e06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	00da      	lsls	r2, r3, #3
 8005e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e18:	677b      	str	r3, [r7, #116]	; 0x74
 8005e1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e24:	463b      	mov	r3, r7
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	895b      	ldrh	r3, [r3, #10]
 8005e2a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005e2e:	e097      	b.n	8005f60 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d168      	bne.n	8005f0c <USB_EPStartXfer+0x972>
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e52:	4413      	add	r3, r2
 8005e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d112      	bne.n	8005e9a <USB_EPStartXfer+0x900>
 8005e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	e05d      	b.n	8005f56 <USB_EPStartXfer+0x9bc>
 8005e9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea0:	d817      	bhi.n	8005ed2 <USB_EPStartXfer+0x938>
 8005ea2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <USB_EPStartXfer+0x928>
 8005eb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ec2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	029b      	lsls	r3, r3, #10
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e041      	b.n	8005f56 <USB_EPStartXfer+0x9bc>
 8005ed2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <USB_EPStartXfer+0x958>
 8005ee8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eec:	3b01      	subs	r3, #1
 8005eee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ef2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e024      	b.n	8005f56 <USB_EPStartXfer+0x9bc>
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d11f      	bne.n	8005f56 <USB_EPStartXfer+0x9bc>
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f2e:	4413      	add	r3, r2
 8005f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00da      	lsls	r2, r3, #3
 8005f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	891b      	ldrh	r3, [r3, #8]
 8005f5c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6959      	ldr	r1, [r3, #20]
 8005f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005f70:	1d38      	adds	r0, r7, #4
 8005f72:	6800      	ldr	r0, [r0, #0]
 8005f74:	f000 fd9b 	bl	8006aae <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d122      	bne.n	8005fc8 <USB_EPStartXfer+0xa2e>
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	463b      	mov	r3, r7
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]
 8005fc6:	e026      	b.n	8006016 <USB_EPStartXfer+0xa7c>
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d121      	bne.n	8006016 <USB_EPStartXfer+0xa7c>
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	b29b      	uxth	r3, r3
 8006014:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f107 020e 	add.w	r2, r7, #14
 800602c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	8013      	strh	r3, [r2, #0]
 8006036:	f107 030e 	add.w	r3, r7, #14
 800603a:	f107 020e 	add.w	r2, r7, #14
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	f082 0210 	eor.w	r2, r2, #16
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	f107 030e 	add.w	r3, r7, #14
 800604a:	f107 020e 	add.w	r2, r7, #14
 800604e:	8812      	ldrh	r2, [r2, #0]
 8006050:	f082 0220 	eor.w	r2, r2, #32
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	f107 030e 	add.w	r3, r7, #14
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
 800607e:	e3b5      	b.n	80067ec <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006080:	463b      	mov	r3, r7
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	7b1b      	ldrb	r3, [r3, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f040 8090 	bne.w	80061ac <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	463b      	mov	r3, r7
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	429a      	cmp	r2, r3
 800609a:	d90e      	bls.n	80060ba <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	619a      	str	r2, [r3, #24]
 80060b8:	e008      	b.n	80060cc <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2200      	movs	r2, #0
 80060ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060cc:	1d3b      	adds	r3, r7, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060e4:	4413      	add	r3, r2
 80060e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060ea:	463b      	mov	r3, r7
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	00da      	lsls	r2, r3, #3
 80060f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060f6:	4413      	add	r3, r2
 80060f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006104:	2b00      	cmp	r3, #0
 8006106:	d116      	bne.n	8006136 <USB_EPStartXfer+0xb9c>
 8006108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612c:	b29a      	uxth	r2, r3
 800612e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	e32c      	b.n	8006790 <USB_EPStartXfer+0x11f6>
 8006136:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800613a:	2b3e      	cmp	r3, #62	; 0x3e
 800613c:	d818      	bhi.n	8006170 <USB_EPStartXfer+0xbd6>
 800613e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006148:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <USB_EPStartXfer+0xbc4>
 8006154:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006158:	3301      	adds	r3, #1
 800615a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800615e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006162:	b29b      	uxth	r3, r3
 8006164:	029b      	lsls	r3, r3, #10
 8006166:	b29a      	uxth	r2, r3
 8006168:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800616c:	801a      	strh	r2, [r3, #0]
 800616e:	e30f      	b.n	8006790 <USB_EPStartXfer+0x11f6>
 8006170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800617a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <USB_EPStartXfer+0xbf6>
 8006186:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800618a:	3b01      	subs	r3, #1
 800618c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006190:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006194:	b29b      	uxth	r3, r3
 8006196:	029b      	lsls	r3, r3, #10
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	e2f1      	b.n	8006790 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80061ac:	463b      	mov	r3, r7
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	78db      	ldrb	r3, [r3, #3]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	f040 818f 	bne.w	80064d6 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061b8:	463b      	mov	r3, r7
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d175      	bne.n	80062ae <USB_EPStartXfer+0xd14>
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061da:	4413      	add	r3, r2
 80061dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	00da      	lsls	r2, r3, #3
 80061e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d116      	bne.n	800622e <USB_EPStartXfer+0xc94>
 8006200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	e065      	b.n	80062fa <USB_EPStartXfer+0xd60>
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b3e      	cmp	r3, #62	; 0x3e
 8006236:	d81a      	bhi.n	800626e <USB_EPStartXfer+0xcd4>
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <USB_EPStartXfer+0xcc2>
 8006252:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006256:	3301      	adds	r3, #1
 8006258:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800625c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006260:	b29b      	uxth	r3, r3
 8006262:	029b      	lsls	r3, r3, #10
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	e045      	b.n	80062fa <USB_EPStartXfer+0xd60>
 800626e:	463b      	mov	r3, r7
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <USB_EPStartXfer+0xcf8>
 8006288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800628c:	3b01      	subs	r3, #1
 800628e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006292:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006296:	b29b      	uxth	r3, r3
 8006298:	029b      	lsls	r3, r3, #10
 800629a:	b29b      	uxth	r3, r3
 800629c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e025      	b.n	80062fa <USB_EPStartXfer+0xd60>
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d120      	bne.n	80062fa <USB_EPStartXfer+0xd60>
 80062b8:	1d3b      	adds	r3, r7, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d0:	4413      	add	r3, r2
 80062d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	00da      	lsls	r2, r3, #3
 80062de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d175      	bne.n	80063f8 <USB_EPStartXfer+0xe5e>
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631c:	b29b      	uxth	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006324:	4413      	add	r3, r2
 8006326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	00da      	lsls	r2, r3, #3
 8006332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006336:	4413      	add	r3, r2
 8006338:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800633c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d116      	bne.n	8006378 <USB_EPStartXfer+0xdde>
 800634a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006356:	b29a      	uxth	r2, r3
 8006358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e061      	b.n	800643c <USB_EPStartXfer+0xea2>
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b3e      	cmp	r3, #62	; 0x3e
 8006380:	d81a      	bhi.n	80063b8 <USB_EPStartXfer+0xe1e>
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <USB_EPStartXfer+0xe0c>
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	3301      	adds	r3, #1
 80063a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	e041      	b.n	800643c <USB_EPStartXfer+0xea2>
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <USB_EPStartXfer+0xe42>
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d6:	3b01      	subs	r3, #1
 80063d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	e021      	b.n	800643c <USB_EPStartXfer+0xea2>
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d11c      	bne.n	800643c <USB_EPStartXfer+0xea2>
 8006402:	1d3b      	adds	r3, r7, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006412:	4413      	add	r3, r2
 8006414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006424:	4413      	add	r3, r2
 8006426:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800642a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800643a:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 81a4 	beq.w	8006790 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800645c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <USB_EPStartXfer+0xeda>
 8006468:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006474:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 8187 	bne.w	8006790 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006482:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 8180 	bne.w	8006790 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006490:	1d3b      	adds	r3, r7, #4
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	463b      	mov	r3, r7
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
 80064d4:	e15c      	b.n	8006790 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	78db      	ldrb	r3, [r3, #3]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	f040 8155 	bne.w	800678c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80064e2:	463b      	mov	r3, r7
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d90e      	bls.n	8006510 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	619a      	str	r2, [r3, #24]
 800650e:	e008      	b.n	8006522 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d16f      	bne.n	800660c <USB_EPStartXfer+0x1072>
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006534:	1d3b      	adds	r3, r7, #4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006544:	4413      	add	r3, r2
 8006546:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800654a:	463b      	mov	r3, r7
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	00da      	lsls	r2, r3, #3
 8006552:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006556:	4413      	add	r3, r2
 8006558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800655c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006560:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006564:	2b00      	cmp	r3, #0
 8006566:	d116      	bne.n	8006596 <USB_EPStartXfer+0xffc>
 8006568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006574:	b29a      	uxth	r2, r3
 8006576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e05f      	b.n	8006656 <USB_EPStartXfer+0x10bc>
 8006596:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800659a:	2b3e      	cmp	r3, #62	; 0x3e
 800659c:	d818      	bhi.n	80065d0 <USB_EPStartXfer+0x1036>
 800659e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <USB_EPStartXfer+0x1024>
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	3301      	adds	r3, #1
 80065ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e042      	b.n	8006656 <USB_EPStartXfer+0x10bc>
 80065d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <USB_EPStartXfer+0x1056>
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e024      	b.n	8006656 <USB_EPStartXfer+0x10bc>
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d11f      	bne.n	8006656 <USB_EPStartXfer+0x10bc>
 8006616:	1d3b      	adds	r3, r7, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800662e:	4413      	add	r3, r2
 8006630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006634:	463b      	mov	r3, r7
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	00da      	lsls	r2, r3, #3
 800663c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006640:	4413      	add	r3, r2
 8006642:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800664a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800664e:	b29a      	uxth	r2, r3
 8006650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800665e:	463b      	mov	r3, r7
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d16f      	bne.n	8006748 <USB_EPStartXfer+0x11ae>
 8006668:	1d3b      	adds	r3, r7, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006678:	b29b      	uxth	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006680:	4413      	add	r3, r2
 8006682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	00da      	lsls	r2, r3, #3
 800668e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006692:	4413      	add	r3, r2
 8006694:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800669c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d116      	bne.n	80066d2 <USB_EPStartXfer+0x1138>
 80066a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e05e      	b.n	8006790 <USB_EPStartXfer+0x11f6>
 80066d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d6:	2b3e      	cmp	r3, #62	; 0x3e
 80066d8:	d818      	bhi.n	800670c <USB_EPStartXfer+0x1172>
 80066da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <USB_EPStartXfer+0x1160>
 80066f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fe:	b29b      	uxth	r3, r3
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	b29a      	uxth	r2, r3
 8006704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e041      	b.n	8006790 <USB_EPStartXfer+0x11f6>
 800670c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <USB_EPStartXfer+0x1192>
 8006722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006726:	3b01      	subs	r3, #1
 8006728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800672c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006730:	b29b      	uxth	r3, r3
 8006732:	029b      	lsls	r3, r3, #10
 8006734:	b29b      	uxth	r3, r3
 8006736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e023      	b.n	8006790 <USB_EPStartXfer+0x11f6>
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d11e      	bne.n	8006790 <USB_EPStartXfer+0x11f6>
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006762:	4413      	add	r3, r2
 8006764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006768:	463b      	mov	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	00da      	lsls	r2, r3, #3
 8006770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006774:	4413      	add	r3, r2
 8006776:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800677a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800677e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e001      	b.n	8006790 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e02e      	b.n	80067ee <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006790:	1d3b      	adds	r3, r7, #4
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	463b      	mov	r3, r7
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006820:	81bb      	strh	r3, [r7, #12]
 8006822:	89bb      	ldrh	r3, [r7, #12]
 8006824:	f083 0310 	eor.w	r3, r3, #16
 8006828:	81bb      	strh	r3, [r7, #12]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006846:	b29b      	uxth	r3, r3
 8006848:	8013      	strh	r3, [r2, #0]
 800684a:	e01f      	b.n	800688c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	81fb      	strh	r3, [r7, #14]
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800686a:	81fb      	strh	r3, [r7, #14]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	89fb      	ldrh	r3, [r7, #14]
 8006878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006888:	b29b      	uxth	r3, r3
 800688a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	7b1b      	ldrb	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 809d 	bne.w	80069e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d04c      	beq.n	8006950 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	823b      	strh	r3, [r7, #16]
 80068c4:	8a3b      	ldrh	r3, [r7, #16]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <USB_EPClearStall+0x6c>
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	81fb      	strh	r3, [r7, #14]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	78db      	ldrb	r3, [r3, #3]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d06c      	beq.n	80069e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006924:	81bb      	strh	r3, [r7, #12]
 8006926:	89bb      	ldrh	r3, [r7, #12]
 8006928:	f083 0320 	eor.w	r3, r3, #32
 800692c:	81bb      	strh	r3, [r7, #12]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	89bb      	ldrh	r3, [r7, #12]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	e04b      	b.n	80069e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	82fb      	strh	r3, [r7, #22]
 800695e:	8afb      	ldrh	r3, [r7, #22]
 8006960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01b      	beq.n	80069a0 <USB_EPClearStall+0x106>
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	82bb      	strh	r3, [r7, #20]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	441a      	add	r2, r3
 800698a:	8abb      	ldrh	r3, [r7, #20]
 800698c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699c:	b29b      	uxth	r3, r3
 800699e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b6:	827b      	strh	r3, [r7, #18]
 80069b8:	8a7b      	ldrh	r3, [r7, #18]
 80069ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069be:	827b      	strh	r3, [r7, #18]
 80069c0:	8a7b      	ldrh	r3, [r7, #18]
 80069c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069c6:	827b      	strh	r3, [r7, #18]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	441a      	add	r2, r3
 80069d2:	8a7b      	ldrh	r3, [r7, #18]
 80069d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2280      	movs	r2, #128	; 0x80
 8006a0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a88:	68fb      	ldr	r3, [r7, #12]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b08d      	sub	sp, #52	; 0x34
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	461a      	mov	r2, r3
 8006abc:	460b      	mov	r3, r1
 8006abe:	80fb      	strh	r3, [r7, #6]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ac4:	88bb      	ldrh	r3, [r7, #4]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae4:	e01b      	b.n	8006b1e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	3301      	adds	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	3302      	adds	r3, #2
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	3301      	adds	r3, #1
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e0      	bne.n	8006ae6 <USB_WritePMA+0x38>
  }
}
 8006b24:	bf00      	nop
 8006b26:	3734      	adds	r7, #52	; 0x34
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b08b      	sub	sp, #44	; 0x2c
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	460b      	mov	r3, r1
 8006b40:	80fb      	strh	r3, [r7, #6]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b46:	88bb      	ldrh	r3, [r7, #4]
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b60:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
 8006b66:	e018      	b.n	8006b9a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	3302      	adds	r3, #2
 8006b74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3301      	adds	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	3b01      	subs	r3, #1
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e3      	bne.n	8006b68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ba0:	88bb      	ldrh	r3, [r7, #4]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	701a      	strb	r2, [r3, #0]
  }
}
 8006bbc:	bf00      	nop
 8006bbe:	372c      	adds	r7, #44	; 0x2c
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bd8:	f004 fe82 	bl	800b8e0 <malloc>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e066      	b.n	8006cc0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7c1b      	ldrb	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d119      	bne.n	8006c36 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c06:	2202      	movs	r2, #2
 8006c08:	2181      	movs	r1, #129	; 0x81
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f004 fc3a 	bl	800b484 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f004 fc30 	bl	800b484 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c34:	e016      	b.n	8006c64 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	2202      	movs	r2, #2
 8006c3a:	2181      	movs	r1, #129	; 0x81
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f004 fc21 	bl	800b484 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f004 fc18 	bl	800b484 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2210      	movs	r2, #16
 8006c60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c64:	2308      	movs	r3, #8
 8006c66:	2203      	movs	r2, #3
 8006c68:	2182      	movs	r1, #130	; 0x82
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f004 fc0a 	bl	800b484 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	7c1b      	ldrb	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f004 fd68 	bl	800b77c <USBD_LL_PrepareReceive>
 8006cac:	e007      	b.n	8006cbe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f004 fd5f 	bl	800b77c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cd4:	2181      	movs	r1, #129	; 0x81
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f004 fc12 	bl	800b500 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f004 fc0b 	bl	800b500 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cf2:	2182      	movs	r1, #130	; 0x82
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f004 fc03 	bl	800b500 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d24:	4618      	mov	r0, r3
 8006d26:	f004 fde3 	bl	800b8f0 <free>
    pdev->pClassData = NULL;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d03a      	beq.n	8006ddc <USBD_CDC_Setup+0xa0>
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	f040 8097 	bne.w	8006e9a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d029      	beq.n	8006dc8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	da11      	bge.n	8006da2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006d8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	88d2      	ldrh	r2, [r2, #6]
 8006d90:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d92:	6939      	ldr	r1, [r7, #16]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	88db      	ldrh	r3, [r3, #6]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fa5d 	bl	800825a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006da0:	e082      	b.n	8006ea8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	785a      	ldrb	r2, [r3, #1]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	88db      	ldrh	r3, [r3, #6]
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006db8:	6939      	ldr	r1, [r7, #16]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	88db      	ldrh	r3, [r3, #6]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fa76 	bl	80082b2 <USBD_CtlPrepareRx>
      break;
 8006dc6:	e06f      	b.n	8006ea8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	7850      	ldrb	r0, [r2, #1]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	4798      	blx	r3
      break;
 8006dda:	e065      	b.n	8006ea8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b0b      	cmp	r3, #11
 8006de2:	d84f      	bhi.n	8006e84 <USBD_CDC_Setup+0x148>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <USBD_CDC_Setup+0xb0>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e1d 	.word	0x08006e1d
 8006df0:	08006e93 	.word	0x08006e93
 8006df4:	08006e85 	.word	0x08006e85
 8006df8:	08006e85 	.word	0x08006e85
 8006dfc:	08006e85 	.word	0x08006e85
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006e85 	.word	0x08006e85
 8006e08:	08006e85 	.word	0x08006e85
 8006e0c:	08006e85 	.word	0x08006e85
 8006e10:	08006e85 	.word	0x08006e85
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e6d 	.word	0x08006e6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d107      	bne.n	8006e36 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fa13 	bl	800825a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e34:	e030      	b.n	8006e98 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f99d 	bl	8008178 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	75fb      	strb	r3, [r7, #23]
          break;
 8006e42:	e029      	b.n	8006e98 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d107      	bne.n	8006e5e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e4e:	f107 030f 	add.w	r3, r7, #15
 8006e52:	2201      	movs	r2, #1
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f9ff 	bl	800825a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e5c:	e01c      	b.n	8006e98 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f989 	bl	8008178 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e66:	2303      	movs	r3, #3
 8006e68:	75fb      	strb	r3, [r7, #23]
          break;
 8006e6a:	e015      	b.n	8006e98 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d00f      	beq.n	8006e96 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 f97d 	bl	8008178 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e82:	e008      	b.n	8006e96 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f976 	bl	8008178 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e90:	e002      	b.n	8006e98 <USBD_CDC_Setup+0x15c>
          break;
 8006e92:	bf00      	nop
 8006e94:	e008      	b.n	8006ea8 <USBD_CDC_Setup+0x16c>
          break;
 8006e96:	bf00      	nop
      }
      break;
 8006e98:	e006      	b.n	8006ea8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f96b 	bl	8008178 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea6:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop

08006eb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e04f      	b.n	8006f76 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006edc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3318      	adds	r3, #24
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d029      	beq.n	8006f48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	3318      	adds	r3, #24
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	78f9      	ldrb	r1, [r7, #3]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	4403      	add	r3, r0
 8006f14:	3338      	adds	r3, #56	; 0x38
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f1c:	fb03 f301 	mul.w	r3, r3, r1
 8006f20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d110      	bne.n	8006f48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3318      	adds	r3, #24
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f3a:	78f9      	ldrb	r1, [r7, #3]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f004 fbe3 	bl	800b70c <USBD_LL_Transmit>
 8006f46:	e015      	b.n	8006f74 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e015      	b.n	8006fcc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f004 fc21 	bl	800b7ec <USBD_LL_GetRxDataSize>
 8006faa:	4602      	mov	r2, r0
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d015      	beq.n	800701a <USBD_CDC_EP0_RxReady+0x46>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ff4:	2bff      	cmp	r3, #255	; 0xff
 8006ff6:	d010      	beq.n	800701a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007006:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800700e:	b292      	uxth	r2, r2
 8007010:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2243      	movs	r2, #67	; 0x43
 8007030:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	20000094 	.word	0x20000094

08007044 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2243      	movs	r2, #67	; 0x43
 8007050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007052:	4b03      	ldr	r3, [pc, #12]	; (8007060 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000050 	.word	0x20000050

08007064 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2243      	movs	r2, #67	; 0x43
 8007070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007072:	4b03      	ldr	r3, [pc, #12]	; (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	200000d8 	.word	0x200000d8

08007084 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	220a      	movs	r2, #10
 8007090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	2000000c 	.word	0x2000000c

080070a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e004      	b.n	80070c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007110:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007136:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	e016      	b.n	8007174 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7c1b      	ldrb	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007158:	2101      	movs	r1, #1
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f004 fb0e 	bl	800b77c <USBD_LL_PrepareReceive>
 8007160:	e007      	b.n	8007172 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	2101      	movs	r1, #1
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f004 fb05 	bl	800b77c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	e01f      	b.n	80071d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	79fa      	ldrb	r2, [r7, #7]
 80071c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f004 f8c7 	bl	800b35c <USBD_LL_Init>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e016      	b.n	8007222 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	f107 020e 	add.w	r2, r7, #14
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	4602      	mov	r2, r0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f004 f8f4 	bl	800b420 <USBD_LL_Start>
 8007238:	4603      	mov	r3, r0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007264:	2303      	movs	r3, #3
 8007266:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	4611      	mov	r1, r2
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	4611      	mov	r1, r2
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
  }

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 ff16 	bl	8008104 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d00e      	beq.n	800731a <USBD_LL_SetupStage+0x5a>
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d302      	bcc.n	8007306 <USBD_LL_SetupStage+0x46>
 8007300:	2b02      	cmp	r3, #2
 8007302:	d014      	beq.n	800732e <USBD_LL_SetupStage+0x6e>
 8007304:	e01d      	b.n	8007342 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9d6 	bl	80076c0 <USBD_StdDevReq>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]
      break;
 8007318:	e020      	b.n	800735c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa3a 	bl	800779c <USBD_StdItfReq>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]
      break;
 800732c:	e016      	b.n	800735c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa76 	bl	8007828 <USBD_StdEPReq>
 800733c:	4603      	mov	r3, r0
 800733e:	73fb      	strb	r3, [r7, #15]
      break;
 8007340:	e00c      	b.n	800735c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007348:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800734c:	b2db      	uxtb	r3, r3
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f004 f90b 	bl	800b56c <USBD_LL_StallEP>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
      break;
 800735a:	bf00      	nop
  }

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	460b      	mov	r3, r1
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d137      	bne.n	80073ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007380:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007388:	2b03      	cmp	r3, #3
 800738a:	d14a      	bne.n	8007422 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	429a      	cmp	r2, r3
 8007396:	d913      	bls.n	80073c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	1ad2      	subs	r2, r2, r3
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	4293      	cmp	r3, r2
 80073b0:	bf28      	it	cs
 80073b2:	4613      	movcs	r3, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 ff97 	bl	80082ec <USBD_CtlContinueRx>
 80073be:	e030      	b.n	8007422 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d105      	bne.n	80073e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 ff93 	bl	800830e <USBD_CtlSendStatus>
 80073e8:	e01b      	b.n	8007422 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d013      	beq.n	800741e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d10e      	bne.n	800741e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	7afa      	ldrb	r2, [r7, #11]
 800740a:	4611      	mov	r1, r2
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	4798      	blx	r3
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	e002      	b.n	8007424 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800741e:	2303      	movs	r3, #3
 8007420:	e000      	b.n	8007424 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	460b      	mov	r3, r1
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800743a:	7afb      	ldrb	r3, [r7, #11]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d16a      	bne.n	8007516 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3314      	adds	r3, #20
 8007444:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800744c:	2b02      	cmp	r3, #2
 800744e:	d155      	bne.n	80074fc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	429a      	cmp	r2, r3
 800745a:	d914      	bls.n	8007486 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	1ad2      	subs	r2, r2, r3
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	461a      	mov	r2, r3
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 ff0c 	bl	8008290 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007478:	2300      	movs	r3, #0
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f004 f97c 	bl	800b77c <USBD_LL_PrepareReceive>
 8007484:	e03a      	b.n	80074fc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	429a      	cmp	r2, r3
 8007490:	d11c      	bne.n	80074cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800749a:	429a      	cmp	r2, r3
 800749c:	d316      	bcc.n	80074cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d20f      	bcs.n	80074cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074ac:	2200      	movs	r2, #0
 80074ae:	2100      	movs	r1, #0
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 feed 	bl	8008290 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074be:	2300      	movs	r3, #0
 80074c0:	2200      	movs	r2, #0
 80074c2:	2100      	movs	r1, #0
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f004 f959 	bl	800b77c <USBD_LL_PrepareReceive>
 80074ca:	e017      	b.n	80074fc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d105      	bne.n	80074ee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f004 f83b 	bl	800b56c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 ff1c 	bl	8008334 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d123      	bne.n	800754e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fe9b 	bl	8007242 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007514:	e01b      	b.n	800754e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d013      	beq.n	800754a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007528:	2b03      	cmp	r3, #3
 800752a:	d10e      	bne.n	800754a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	7afa      	ldrb	r2, [r7, #11]
 8007536:	4611      	mov	r1, r2
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	4798      	blx	r3
 800753c:	4603      	mov	r3, r0
 800753e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
 8007548:	e002      	b.n	8007550 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	e000      	b.n	8007550 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6852      	ldr	r2, [r2, #4]
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	4611      	mov	r1, r2
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f003 ff6e 	bl	800b484 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	2200      	movs	r2, #0
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f003 ff60 	bl	800b484 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2240      	movs	r2, #64	; 0x40
 80075ce:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2204      	movs	r2, #4
 8007612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007632:	2b04      	cmp	r3, #4
 8007634:	d105      	bne.n	8007642 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	2b03      	cmp	r3, #3
 8007660:	d10b      	bne.n	800767a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3301      	adds	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a2:	8a3b      	ldrh	r3, [r7, #16]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b2:	89fb      	ldrh	r3, [r7, #14]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d004      	beq.n	80076e4 <USBD_StdDevReq+0x24>
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d002      	beq.n	80076e4 <USBD_StdDevReq+0x24>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <USBD_StdDevReq+0x38>
 80076e2:	e050      	b.n	8007786 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]
    break;
 80076f6:	e04b      	b.n	8007790 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b09      	cmp	r3, #9
 80076fe:	d83c      	bhi.n	800777a <USBD_StdDevReq+0xba>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_StdDevReq+0x48>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800775d 	.word	0x0800775d
 800770c:	08007771 	.word	0x08007771
 8007710:	0800777b 	.word	0x0800777b
 8007714:	08007767 	.word	0x08007767
 8007718:	0800777b 	.word	0x0800777b
 800771c:	0800773b 	.word	0x0800773b
 8007720:	08007731 	.word	0x08007731
 8007724:	0800777b 	.word	0x0800777b
 8007728:	08007753 	.word	0x08007753
 800772c:	08007745 	.word	0x08007745
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9d0 	bl	8007ad8 <USBD_GetDescriptor>
      break;
 8007738:	e024      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb5f 	bl	8007e00 <USBD_SetAddress>
      break;
 8007742:	e01f      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb9c 	bl	8007e84 <USBD_SetConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e018      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fc39 	bl	8007fcc <USBD_GetConfig>
      break;
 800775a:	e013      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc68 	bl	8008034 <USBD_GetStatus>
      break;
 8007764:	e00e      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc96 	bl	800809a <USBD_SetFeature>
      break;
 800776e:	e009      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fca5 	bl	80080c2 <USBD_ClrFeature>
      break;
 8007778:	e004      	b.n	8007784 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fcfb 	bl	8008178 <USBD_CtlError>
      break;
 8007782:	bf00      	nop
    }
    break;
 8007784:	e004      	b.n	8007790 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fcf5 	bl	8008178 <USBD_CtlError>
    break;
 800778e:	bf00      	nop
  }

  return ret;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop

0800779c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d003      	beq.n	80077be <USBD_StdItfReq+0x22>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d001      	beq.n	80077be <USBD_StdItfReq+0x22>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d12a      	bne.n	8007814 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	3b01      	subs	r3, #1
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d81d      	bhi.n	8007806 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	889b      	ldrh	r3, [r3, #4]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d813      	bhi.n	80077fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	88db      	ldrh	r3, [r3, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d110      	bne.n	8007810 <USBD_StdItfReq+0x74>
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10d      	bne.n	8007810 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fd8a 	bl	800830e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077fa:	e009      	b.n	8007810 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fcba 	bl	8008178 <USBD_CtlError>
      break;
 8007804:	e004      	b.n	8007810 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fcb5 	bl	8008178 <USBD_CtlError>
      break;
 800780e:	e000      	b.n	8007812 <USBD_StdItfReq+0x76>
      break;
 8007810:	bf00      	nop
    }
    break;
 8007812:	e004      	b.n	800781e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fcae 	bl	8008178 <USBD_CtlError>
    break;
 800781c:	bf00      	nop
  }

  return ret;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	889b      	ldrh	r3, [r3, #4]
 800783a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007844:	2b20      	cmp	r3, #32
 8007846:	d004      	beq.n	8007852 <USBD_StdEPReq+0x2a>
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d002      	beq.n	8007852 <USBD_StdEPReq+0x2a>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <USBD_StdEPReq+0x3e>
 8007850:	e137      	b.n	8007ac2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
    break;
 8007864:	e132      	b.n	8007acc <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d03e      	beq.n	80078ec <USBD_StdEPReq+0xc4>
 800786e:	2b03      	cmp	r3, #3
 8007870:	d002      	beq.n	8007878 <USBD_StdEPReq+0x50>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d079      	beq.n	800796a <USBD_StdEPReq+0x142>
 8007876:	e11e      	b.n	8007ab6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787e:	2b02      	cmp	r3, #2
 8007880:	d002      	beq.n	8007888 <USBD_StdEPReq+0x60>
 8007882:	2b03      	cmp	r3, #3
 8007884:	d015      	beq.n	80078b2 <USBD_StdEPReq+0x8a>
 8007886:	e02b      	b.n	80078e0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <USBD_StdEPReq+0x80>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	d009      	beq.n	80078a8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f003 fe67 	bl	800b56c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800789e:	2180      	movs	r1, #128	; 0x80
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f003 fe63 	bl	800b56c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078a6:	e020      	b.n	80078ea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc64 	bl	8008178 <USBD_CtlError>
        break;
 80078b0:	e01b      	b.n	80078ea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10e      	bne.n	80078d8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <USBD_StdEPReq+0xb0>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d008      	beq.n	80078d8 <USBD_StdEPReq+0xb0>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	88db      	ldrh	r3, [r3, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f003 fe4a 	bl	800b56c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fd18 	bl	800830e <USBD_CtlSendStatus>

        break;
 80078de:	e004      	b.n	80078ea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fc48 	bl	8008178 <USBD_CtlError>
        break;
 80078e8:	bf00      	nop
      }
      break;
 80078ea:	e0e9      	b.n	8007ac0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d002      	beq.n	80078fc <USBD_StdEPReq+0xd4>
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d015      	beq.n	8007926 <USBD_StdEPReq+0xfe>
 80078fa:	e02f      	b.n	800795c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <USBD_StdEPReq+0xf4>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d009      	beq.n	800791c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f003 fe2d 	bl	800b56c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f003 fe29 	bl	800b56c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800791a:	e025      	b.n	8007968 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc2a 	bl	8008178 <USBD_CtlError>
        break;
 8007924:	e020      	b.n	8007968 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	885b      	ldrh	r3, [r3, #2]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d11b      	bne.n	8007966 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f003 fe4b 	bl	800b5d8 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fce3 	bl	800830e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800795a:	e004      	b.n	8007966 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc0a 	bl	8008178 <USBD_CtlError>
        break;
 8007964:	e000      	b.n	8007968 <USBD_StdEPReq+0x140>
        break;
 8007966:	bf00      	nop
      }
      break;
 8007968:	e0aa      	b.n	8007ac0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	2b02      	cmp	r3, #2
 8007972:	d002      	beq.n	800797a <USBD_StdEPReq+0x152>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d032      	beq.n	80079de <USBD_StdEPReq+0x1b6>
 8007978:	e097      	b.n	8007aaa <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <USBD_StdEPReq+0x168>
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fbf5 	bl	8008178 <USBD_CtlError>
          break;
 800798e:	e091      	b.n	8007ab4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007994:	2b00      	cmp	r3, #0
 8007996:	da0b      	bge.n	80079b0 <USBD_StdEPReq+0x188>
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	3310      	adds	r3, #16
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	4413      	add	r3, r2
 80079ac:	3304      	adds	r3, #4
 80079ae:	e00b      	b.n	80079c8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	3304      	adds	r3, #4
 80079c8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2202      	movs	r2, #2
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fc3f 	bl	800825a <USBD_CtlSendData>
        break;
 80079dc:	e06a      	b.n	8007ab4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da11      	bge.n	8007a0a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3324      	adds	r3, #36	; 0x24
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d117      	bne.n	8007a30 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fbb8 	bl	8008178 <USBD_CtlError>
            break;
 8007a08:	e054      	b.n	8007ab4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d104      	bne.n	8007a30 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fba5 	bl	8008178 <USBD_CtlError>
            break;
 8007a2e:	e041      	b.n	8007ab4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da0b      	bge.n	8007a50 <USBD_StdEPReq+0x228>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3310      	adds	r3, #16
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	e00b      	b.n	8007a68 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <USBD_StdEPReq+0x24e>
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d103      	bne.n	8007a7e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e00e      	b.n	8007a9c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f003 fdde 	bl	800b644 <USBD_LL_IsStallEP>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e002      	b.n	8007a9c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbd9 	bl	800825a <USBD_CtlSendData>
          break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb63 	bl	8008178 <USBD_CtlError>
        break;
 8007ab2:	bf00      	nop
      }
      break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb5d 	bl	8008178 <USBD_CtlError>
      break;
 8007abe:	bf00      	nop
    }
    break;
 8007ac0:	e004      	b.n	8007acc <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb57 	bl	8008178 <USBD_CtlError>
    break;
 8007aca:	bf00      	nop
  }

  return ret;
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	885b      	ldrh	r3, [r3, #2]
 8007af2:	0a1b      	lsrs	r3, r3, #8
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	2b0e      	cmp	r3, #14
 8007afa:	f200 8152 	bhi.w	8007da2 <USBD_GetDescriptor+0x2ca>
 8007afe:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <USBD_GetDescriptor+0x2c>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b75 	.word	0x08007b75
 8007b08:	08007b8d 	.word	0x08007b8d
 8007b0c:	08007bcd 	.word	0x08007bcd
 8007b10:	08007da3 	.word	0x08007da3
 8007b14:	08007da3 	.word	0x08007da3
 8007b18:	08007d43 	.word	0x08007d43
 8007b1c:	08007d6f 	.word	0x08007d6f
 8007b20:	08007da3 	.word	0x08007da3
 8007b24:	08007da3 	.word	0x08007da3
 8007b28:	08007da3 	.word	0x08007da3
 8007b2c:	08007da3 	.word	0x08007da3
 8007b30:	08007da3 	.word	0x08007da3
 8007b34:	08007da3 	.word	0x08007da3
 8007b38:	08007da3 	.word	0x08007da3
 8007b3c:	08007b41 	.word	0x08007b41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b62:	e126      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fb06 	bl	8008178 <USBD_CtlError>
      err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
    break;
 8007b72:	e11e      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
    break;
 8007b8a:	e112      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7c1b      	ldrb	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10d      	bne.n	8007bb0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	f107 0208 	add.w	r2, r7, #8
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	2202      	movs	r2, #2
 8007bac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bae:	e100      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f107 0208 	add.w	r2, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
    break;
 8007bca:	e0f2      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	885b      	ldrh	r3, [r3, #2]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	f200 80ac 	bhi.w	8007d30 <USBD_GetDescriptor+0x258>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <USBD_GetDescriptor+0x108>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf9 	.word	0x08007bf9
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c61 	.word	0x08007c61
 8007bec:	08007c95 	.word	0x08007c95
 8007bf0:	08007cc9 	.word	0x08007cc9
 8007bf4:	08007cfd 	.word	0x08007cfd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c1a:	e091      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 faaa 	bl	8008178 <USBD_CtlError>
        err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
      break;
 8007c2a:	e089      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c4e:	e077      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa90 	bl	8008178 <USBD_CtlError>
        err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c5e:	e06f      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c82:	e05d      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa76 	bl	8008178 <USBD_CtlError>
        err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
      break;
 8007c92:	e055      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00b      	beq.n	8007cb8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7c12      	ldrb	r2, [r2, #16]
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4798      	blx	r3
 8007cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb6:	e043      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa5c 	bl	8008178 <USBD_CtlError>
        err++;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc6:	e03b      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cea:	e029      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa42 	bl	8008178 <USBD_CtlError>
        err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cfa:	e021      	b.n	8007d40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	f107 0108 	add.w	r1, r7, #8
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1e:	e00f      	b.n	8007d40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa28 	bl	8008178 <USBD_CtlError>
        err++;
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2e:	e007      	b.n	8007d40 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa20 	bl	8008178 <USBD_CtlError>
      err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d3e:	bf00      	nop
    }
    break;
 8007d40:	e037      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	7c1b      	ldrb	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	f107 0208 	add.w	r2, r7, #8
 8007d56:	4610      	mov	r0, r2
 8007d58:	4798      	blx	r3
 8007d5a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d5c:	e029      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fa09 	bl	8008178 <USBD_CtlError>
      err++;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d6c:	e021      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	7c1b      	ldrb	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	f107 0208 	add.w	r2, r7, #8
 8007d82:	4610      	mov	r0, r2
 8007d84:	4798      	blx	r3
 8007d86:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	2207      	movs	r2, #7
 8007d8e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d90:	e00f      	b.n	8007db2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f9ef 	bl	8008178 <USBD_CtlError>
      err++;
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	72fb      	strb	r3, [r7, #11]
    break;
 8007da0:	e007      	b.n	8007db2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9e7 	bl	8008178 <USBD_CtlError>
    err++;
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	3301      	adds	r3, #1
 8007dae:	72fb      	strb	r3, [r7, #11]
    break;
 8007db0:	bf00      	nop
  }

  if (err != 0U)
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11e      	bne.n	8007df6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	88db      	ldrh	r3, [r3, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d016      	beq.n	8007dee <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007dc0:	893b      	ldrh	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88da      	ldrh	r2, [r3, #6]
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bf28      	it	cs
 8007dd0:	4613      	movcs	r3, r2
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa3c 	bl	800825a <USBD_CtlSendData>
 8007de2:	e009      	b.n	8007df8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9c6 	bl	8008178 <USBD_CtlError>
 8007dec:	e004      	b.n	8007df8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa8d 	bl	800830e <USBD_CtlSendStatus>
 8007df4:	e000      	b.n	8007df8 <USBD_GetDescriptor+0x320>
    return;
 8007df6:	bf00      	nop
    }
  }
}
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop

08007e00 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d130      	bne.n	8007e74 <USBD_SetAddress+0x74>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d12c      	bne.n	8007e74 <USBD_SetAddress+0x74>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	885b      	ldrh	r3, [r3, #2]
 8007e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e20:	d828      	bhi.n	8007e74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d104      	bne.n	8007e42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f99c 	bl	8008178 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e40:	e01c      	b.n	8007e7c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f003 fc26 	bl	800b6a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fa5a 	bl	800830e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d004      	beq.n	8007e6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	e008      	b.n	8007e7c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e72:	e003      	b.n	8007e7c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f97e 	bl	8008178 <USBD_CtlError>
  }
}
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	4b4b      	ldr	r3, [pc, #300]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007e9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e9c:	4b4a      	ldr	r3, [pc, #296]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d905      	bls.n	8007eb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f966 	bl	8008178 <USBD_CtlError>
    return USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e087      	b.n	8007fc0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d002      	beq.n	8007ec0 <USBD_SetConfig+0x3c>
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d025      	beq.n	8007f0a <USBD_SetConfig+0x86>
 8007ebe:	e071      	b.n	8007fa4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ec0:	4b41      	ldr	r3, [pc, #260]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01c      	beq.n	8007f02 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007ec8:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ed2:	4b3d      	ldr	r3, [pc, #244]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff f9bd 	bl	8007258 <USBD_SetClassConfig>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f944 	bl	8008178 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ef0:	e065      	b.n	8007fbe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa0b 	bl	800830e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2203      	movs	r2, #3
 8007efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f00:	e05d      	b.n	8007fbe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa03 	bl	800830e <USBD_CtlSendStatus>
    break;
 8007f08:	e059      	b.n	8007fbe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f0a:	4b2f      	ldr	r3, [pc, #188]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d112      	bne.n	8007f38 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f1a:	4b2b      	ldr	r3, [pc, #172]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f24:	4b28      	ldr	r3, [pc, #160]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff f9b0 	bl	8007290 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f9ec 	bl	800830e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f36:	e042      	b.n	8007fbe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f38:	4b23      	ldr	r3, [pc, #140]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d02a      	beq.n	8007f9c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f99e 	bl	8007290 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f54:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f5e:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff f977 	bl	8007258 <USBD_SetClassConfig>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00f      	beq.n	8007f94 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f8fe 	bl	8008178 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff f983 	bl	8007290 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f92:	e014      	b.n	8007fbe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f9ba 	bl	800830e <USBD_CtlSendStatus>
    break;
 8007f9a:	e010      	b.n	8007fbe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9b6 	bl	800830e <USBD_CtlSendStatus>
    break;
 8007fa2:	e00c      	b.n	8007fbe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f8e6 	bl	8008178 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fac:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <USBD_SetConfig+0x144>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff f96c 	bl	8007290 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbc:	bf00      	nop
  }

  return ret;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20000218 	.word	0x20000218

08007fcc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d004      	beq.n	8007fe8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8c9 	bl	8008178 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007fe6:	e021      	b.n	800802c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	db17      	blt.n	8008022 <USBD_GetConfig+0x56>
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	dd02      	ble.n	8007ffc <USBD_GetConfig+0x30>
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d00b      	beq.n	8008012 <USBD_GetConfig+0x46>
 8007ffa:	e012      	b.n	8008022 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3308      	adds	r3, #8
 8008006:	2201      	movs	r2, #1
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f925 	bl	800825a <USBD_CtlSendData>
      break;
 8008010:	e00c      	b.n	800802c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	2201      	movs	r2, #1
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f91d 	bl	800825a <USBD_CtlSendData>
      break;
 8008020:	e004      	b.n	800802c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8a7 	bl	8008178 <USBD_CtlError>
      break;
 800802a:	bf00      	nop
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	3b01      	subs	r3, #1
 8008046:	2b02      	cmp	r3, #2
 8008048:	d81e      	bhi.n	8008088 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	88db      	ldrh	r3, [r3, #6]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d004      	beq.n	800805c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f88f 	bl	8008178 <USBD_CtlError>
      break;
 800805a:	e01a      	b.n	8008092 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f043 0202 	orr.w	r2, r3, #2
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	330c      	adds	r3, #12
 800807c:	2202      	movs	r2, #2
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8ea 	bl	800825a <USBD_CtlSendData>
    break;
 8008086:	e004      	b.n	8008092 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f874 	bl	8008178 <USBD_CtlError>
    break;
 8008090:	bf00      	nop
  }
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	885b      	ldrh	r3, [r3, #2]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d106      	bne.n	80080ba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f92a 	bl	800830e <USBD_CtlSendStatus>
  }
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	3b01      	subs	r3, #1
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d80b      	bhi.n	80080f0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d10c      	bne.n	80080fa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f910 	bl	800830e <USBD_CtlSendStatus>
      }
      break;
 80080ee:	e004      	b.n	80080fa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f840 	bl	8008178 <USBD_CtlError>
      break;
 80080f8:	e000      	b.n	80080fc <USBD_ClrFeature+0x3a>
      break;
 80080fa:	bf00      	nop
  }
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff faa8 	bl	8007684 <SWAPBYTE>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff fa9b 	bl	8007684 <SWAPBYTE>
 800814e:	4603      	mov	r3, r0
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3301      	adds	r3, #1
 800815a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fa8e 	bl	8007684 <SWAPBYTE>
 8008168:	4603      	mov	r3, r0
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	80da      	strh	r2, [r3, #6]
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f003 f9f1 	bl	800b56c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800818a:	2100      	movs	r1, #0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f003 f9ed 	bl	800b56c <USBD_LL_StallEP>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b086      	sub	sp, #24
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d036      	beq.n	800821e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081b4:	6938      	ldr	r0, [r7, #16]
 80081b6:	f000 f836 	bl	8008226 <USBD_GetLen>
 80081ba:	4603      	mov	r3, r0
 80081bc:	3301      	adds	r3, #1
 80081be:	b29b      	uxth	r3, r3
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
 80081d6:	3301      	adds	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	2203      	movs	r2, #3
 80081e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	3301      	adds	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081ea:	e013      	b.n	8008214 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	7812      	ldrb	r2, [r2, #0]
 80081f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	3301      	adds	r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
    idx++;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	3301      	adds	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
    idx++;
 800820e:	7dfb      	ldrb	r3, [r7, #23]
 8008210:	3301      	adds	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e7      	bne.n	80081ec <USBD_GetString+0x52>
 800821c:	e000      	b.n	8008220 <USBD_GetString+0x86>
    return;
 800821e:	bf00      	nop
  }
}
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008236:	e005      	b.n	8008244 <USBD_GetLen+0x1e>
  {
    len++;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	3301      	adds	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3301      	adds	r3, #1
 8008242:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f5      	bne.n	8008238 <USBD_GetLen+0x12>
  }

  return len;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2202      	movs	r2, #2
 800826a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f003 fa43 	bl	800b70c <USBD_LL_Transmit>

  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	2100      	movs	r1, #0
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f003 fa32 	bl	800b70c <USBD_LL_Transmit>

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2203      	movs	r2, #3
 80082c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	2100      	movs	r1, #0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f003 fa4d 	bl	800b77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	2100      	movs	r1, #0
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f003 fa3c 	bl	800b77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800831e:	2300      	movs	r3, #0
 8008320:	2200      	movs	r2, #0
 8008322:	2100      	movs	r1, #0
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f003 f9f1 	bl	800b70c <USBD_LL_Transmit>

  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2205      	movs	r2, #5
 8008340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f003 fa16 	bl	800b77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800835e:	bf00      	nop
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800836e:	f3ef 8305 	mrs	r3, IPSR
 8008372:	60bb      	str	r3, [r7, #8]
  return(result);
 8008374:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10f      	bne.n	800839a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837a:	f3ef 8310 	mrs	r3, PRIMASK
 800837e:	607b      	str	r3, [r7, #4]
  return(result);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008386:	f3ef 8311 	mrs	r3, BASEPRI
 800838a:	603b      	str	r3, [r7, #0]
  return(result);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <osKernelInitialize+0x3a>
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <osKernelInitialize+0x64>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d103      	bne.n	80083a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800839a:	f06f 0305 	mvn.w	r3, #5
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e00c      	b.n	80083bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083a2:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <osKernelInitialize+0x64>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083aa:	4b08      	ldr	r3, [pc, #32]	; (80083cc <osKernelInitialize+0x64>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e002      	b.n	80083bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	2000021c 	.word	0x2000021c

080083d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083d6:	f3ef 8305 	mrs	r3, IPSR
 80083da:	60bb      	str	r3, [r7, #8]
  return(result);
 80083dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10f      	bne.n	8008402 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e2:	f3ef 8310 	mrs	r3, PRIMASK
 80083e6:	607b      	str	r3, [r7, #4]
  return(result);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d105      	bne.n	80083fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083ee:	f3ef 8311 	mrs	r3, BASEPRI
 80083f2:	603b      	str	r3, [r7, #0]
  return(result);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <osKernelStart+0x3a>
 80083fa:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <osKernelStart+0x68>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d103      	bne.n	800840a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008402:	f06f 0305 	mvn.w	r3, #5
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e010      	b.n	800842c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800840a:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <osKernelStart+0x68>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d109      	bne.n	8008426 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008412:	f7ff ffa2 	bl	800835a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008416:	4b08      	ldr	r3, [pc, #32]	; (8008438 <osKernelStart+0x68>)
 8008418:	2202      	movs	r2, #2
 800841a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800841c:	f001 f870 	bl	8009500 <vTaskStartScheduler>
      stat = osOK;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	e002      	b.n	800842c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800842a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800842c:	68fb      	ldr	r3, [r7, #12]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	2000021c 	.word	0x2000021c

0800843c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b090      	sub	sp, #64	; 0x40
 8008440:	af04      	add	r7, sp, #16
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800844c:	f3ef 8305 	mrs	r3, IPSR
 8008450:	61fb      	str	r3, [r7, #28]
  return(result);
 8008452:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 808f 	bne.w	8008578 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800845a:	f3ef 8310 	mrs	r3, PRIMASK
 800845e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d105      	bne.n	8008472 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008466:	f3ef 8311 	mrs	r3, BASEPRI
 800846a:	617b      	str	r3, [r7, #20]
  return(result);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <osThreadNew+0x3e>
 8008472:	4b44      	ldr	r3, [pc, #272]	; (8008584 <osThreadNew+0x148>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b02      	cmp	r3, #2
 8008478:	d07e      	beq.n	8008578 <osThreadNew+0x13c>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d07b      	beq.n	8008578 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008480:	2380      	movs	r3, #128	; 0x80
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008484:	2318      	movs	r3, #24
 8008486:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008488:	2300      	movs	r3, #0
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800848c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008490:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d045      	beq.n	8008524 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <osThreadNew+0x6a>
        name = attr->name;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <osThreadNew+0x90>
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	2b38      	cmp	r3, #56	; 0x38
 80084be:	d805      	bhi.n	80084cc <osThreadNew+0x90>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <osThreadNew+0x94>
        return (NULL);
 80084cc:	2300      	movs	r3, #0
 80084ce:	e054      	b.n	800857a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	089b      	lsrs	r3, r3, #2
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <osThreadNew+0xca>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b5b      	cmp	r3, #91	; 0x5b
 80084ee:	d90a      	bls.n	8008506 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d006      	beq.n	8008506 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <osThreadNew+0xca>
        mem = 1;
 8008500:	2301      	movs	r3, #1
 8008502:	623b      	str	r3, [r7, #32]
 8008504:	e010      	b.n	8008528 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10c      	bne.n	8008528 <osThreadNew+0xec>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d108      	bne.n	8008528 <osThreadNew+0xec>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <osThreadNew+0xec>
          mem = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	623b      	str	r3, [r7, #32]
 8008522:	e001      	b.n	8008528 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d110      	bne.n	8008550 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008536:	9202      	str	r2, [sp, #8]
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fe09 	bl	800915c <xTaskCreateStatic>
 800854a:	4603      	mov	r3, r0
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	e013      	b.n	8008578 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d110      	bne.n	8008578 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	b29a      	uxth	r2, r3
 800855a:	f107 0310 	add.w	r3, r7, #16
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fe51 	bl	8009210 <xTaskCreate>
 800856e:	4603      	mov	r3, r0
 8008570:	2b01      	cmp	r3, #1
 8008572:	d001      	beq.n	8008578 <osThreadNew+0x13c>
          hTask = NULL;
 8008574:	2300      	movs	r3, #0
 8008576:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008578:	693b      	ldr	r3, [r7, #16]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3730      	adds	r7, #48	; 0x30
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	2000021c 	.word	0x2000021c

08008588 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008590:	f3ef 8305 	mrs	r3, IPSR
 8008594:	613b      	str	r3, [r7, #16]
  return(result);
 8008596:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10f      	bne.n	80085bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859c:	f3ef 8310 	mrs	r3, PRIMASK
 80085a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085a8:	f3ef 8311 	mrs	r3, BASEPRI
 80085ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d007      	beq.n	80085c4 <osDelay+0x3c>
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <osDelay+0x58>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d103      	bne.n	80085c4 <osDelay+0x3c>
    stat = osErrorISR;
 80085bc:	f06f 0305 	mvn.w	r3, #5
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e007      	b.n	80085d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 ff62 	bl	8009498 <vTaskDelay>
    }
  }

  return (stat);
 80085d4:	697b      	ldr	r3, [r7, #20]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	2000021c 	.word	0x2000021c

080085e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a07      	ldr	r2, [pc, #28]	; (8008610 <vApplicationGetIdleTaskMemory+0x2c>)
 80085f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <vApplicationGetIdleTaskMemory+0x30>)
 80085fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2280      	movs	r2, #128	; 0x80
 8008600:	601a      	str	r2, [r3, #0]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000220 	.word	0x20000220
 8008614:	2000027c 	.word	0x2000027c

08008618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4a07      	ldr	r2, [pc, #28]	; (8008644 <vApplicationGetTimerTaskMemory+0x2c>)
 8008628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4a06      	ldr	r2, [pc, #24]	; (8008648 <vApplicationGetTimerTaskMemory+0x30>)
 800862e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	2000047c 	.word	0x2000047c
 8008648:	200004d8 	.word	0x200004d8

0800864c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f103 0208 	add.w	r2, r3, #8
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f103 0208 	add.w	r2, r3, #8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f103 0208 	add.w	r2, r3, #8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008704:	d103      	bne.n	800870e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e00c      	b.n	8008728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3308      	adds	r3, #8
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e002      	b.n	800871c <vListInsert+0x2e>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	429a      	cmp	r2, r3
 8008726:	d2f6      	bcs.n	8008716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
}
 8008754:	bf00      	nop
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6892      	ldr	r2, [r2, #8]
 8008776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6852      	ldr	r2, [r2, #4]
 8008780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d103      	bne.n	8008794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	1e5a      	subs	r2, r3, #1
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d109      	bne.n	80087dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	60bb      	str	r3, [r7, #8]
 80087da:	e7fe      	b.n	80087da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80087dc:	f002 f80e 	bl	800a7fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880c:	3b01      	subs	r3, #1
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	22ff      	movs	r2, #255	; 0xff
 8008820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	22ff      	movs	r2, #255	; 0xff
 8008828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d114      	bne.n	800885c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d01a      	beq.n	8008870 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3310      	adds	r3, #16
 800883e:	4618      	mov	r0, r3
 8008840:	f001 f8de 	bl	8009a00 <xTaskRemoveFromEventList>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d012      	beq.n	8008870 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800884a:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <xQueueGenericReset+0xcc>)
 800884c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	e009      	b.n	8008870 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3310      	adds	r3, #16
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fef3 	bl	800864c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3324      	adds	r3, #36	; 0x24
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff feee 	bl	800864c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008870:	f001 fff2 	bl	800a858 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008874:	2301      	movs	r3, #1
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08e      	sub	sp, #56	; 0x38
 8008888:	af02      	add	r7, sp, #8
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <xQueueGenericCreateStatic+0x28>
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088aa:	e7fe      	b.n	80088aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <xQueueGenericCreateStatic+0x42>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
 80088c4:	e7fe      	b.n	80088c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <xQueueGenericCreateStatic+0x4e>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <xQueueGenericCreateStatic+0x52>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <xQueueGenericCreateStatic+0x54>
 80088d6:	2300      	movs	r3, #0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <xQueueGenericCreateStatic+0x6c>
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	623b      	str	r3, [r7, #32]
 80088ee:	e7fe      	b.n	80088ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <xQueueGenericCreateStatic+0x78>
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <xQueueGenericCreateStatic+0x7c>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <xQueueGenericCreateStatic+0x7e>
 8008900:	2300      	movs	r3, #0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d109      	bne.n	800891a <xQueueGenericCreateStatic+0x96>
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	61fb      	str	r3, [r7, #28]
 8008918:	e7fe      	b.n	8008918 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800891a:	2350      	movs	r3, #80	; 0x50
 800891c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b50      	cmp	r3, #80	; 0x50
 8008922:	d009      	beq.n	8008938 <xQueueGenericCreateStatic+0xb4>
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	61bb      	str	r3, [r7, #24]
 8008936:	e7fe      	b.n	8008936 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008938:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00d      	beq.n	8008960 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800894c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f805 	bl	800896a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3730      	adds	r7, #48	; 0x30
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
 8008976:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e002      	b.n	800898c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008998:	2101      	movs	r1, #1
 800899a:	69b8      	ldr	r0, [r7, #24]
 800899c:	f7ff ff0a 	bl	80087b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	78fa      	ldrb	r2, [r7, #3]
 80089a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089a8:	bf00      	nop
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08e      	sub	sp, #56	; 0x38
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089be:	2300      	movs	r3, #0
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <xQueueGenericSend+0x30>
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80089de:	e7fe      	b.n	80089de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <xQueueGenericSend+0x3e>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <xQueueGenericSend+0x42>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <xQueueGenericSend+0x44>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <xQueueGenericSend+0x5c>
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0a:	e7fe      	b.n	8008a0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <xQueueGenericSend+0x6a>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <xQueueGenericSend+0x6e>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <xQueueGenericSend+0x70>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d109      	bne.n	8008a38 <xQueueGenericSend+0x88>
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	623b      	str	r3, [r7, #32]
 8008a36:	e7fe      	b.n	8008a36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a38:	f001 f998 	bl	8009d6c <xTaskGetSchedulerState>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <xQueueGenericSend+0x98>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <xQueueGenericSend+0x9c>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <xQueueGenericSend+0x9e>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <xQueueGenericSend+0xb6>
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e7fe      	b.n	8008a64 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a66:	f001 fec9 	bl	800a7fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d302      	bcc.n	8008a7c <xQueueGenericSend+0xcc>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d129      	bne.n	8008ad0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a82:	f000 f9ff 	bl	8008e84 <prvCopyDataToQueue>
 8008a86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	3324      	adds	r3, #36	; 0x24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 ffb3 	bl	8009a00 <xTaskRemoveFromEventList>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d013      	beq.n	8008ac8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008aa0:	4b3f      	ldr	r3, [pc, #252]	; (8008ba0 <xQueueGenericSend+0x1f0>)
 8008aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	e00a      	b.n	8008ac8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ab8:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <xQueueGenericSend+0x1f0>)
 8008aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ac8:	f001 fec6 	bl	800a858 <vPortExitCritical>
				return pdPASS;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e063      	b.n	8008b98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ad6:	f001 febf 	bl	800a858 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e05c      	b.n	8008b98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ae4:	f107 0314 	add.w	r3, r7, #20
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 ffeb 	bl	8009ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008af2:	f001 feb1 	bl	800a858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008af6:	f000 fd67 	bl	80095c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008afa:	f001 fe7f 	bl	800a7fc <vPortEnterCritical>
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b04:	b25b      	sxtb	r3, r3
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b0a:	d103      	bne.n	8008b14 <xQueueGenericSend+0x164>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b1a:	b25b      	sxtb	r3, r3
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b20:	d103      	bne.n	8008b2a <xQueueGenericSend+0x17a>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b2a:	f001 fe95 	bl	800a858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b2e:	1d3a      	adds	r2, r7, #4
 8008b30:	f107 0314 	add.w	r3, r7, #20
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ffda 	bl	8009af0 <xTaskCheckForTimeOut>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d124      	bne.n	8008b8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b44:	f000 fa96 	bl	8009074 <prvIsQueueFull>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d018      	beq.n	8008b80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	3310      	adds	r3, #16
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff04 	bl	8009964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b5e:	f000 fa21 	bl	8008fa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b62:	f000 fd3f 	bl	80095e4 <xTaskResumeAll>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f47f af7c 	bne.w	8008a66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <xQueueGenericSend+0x1f0>)
 8008b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	e772      	b.n	8008a66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b82:	f000 fa0f 	bl	8008fa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b86:	f000 fd2d 	bl	80095e4 <xTaskResumeAll>
 8008b8a:	e76c      	b.n	8008a66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b8e:	f000 fa09 	bl	8008fa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b92:	f000 fd27 	bl	80095e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3738      	adds	r7, #56	; 0x38
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	e000ed04 	.word	0xe000ed04

08008ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08e      	sub	sp, #56	; 0x38
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <xQueueGenericSendFromISR+0x2c>
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bce:	e7fe      	b.n	8008bce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d103      	bne.n	8008bde <xQueueGenericSendFromISR+0x3a>
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <xQueueGenericSendFromISR+0x3e>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <xQueueGenericSendFromISR+0x40>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <xQueueGenericSendFromISR+0x58>
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	623b      	str	r3, [r7, #32]
 8008bfa:	e7fe      	b.n	8008bfa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d103      	bne.n	8008c0a <xQueueGenericSendFromISR+0x66>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d101      	bne.n	8008c0e <xQueueGenericSendFromISR+0x6a>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <xQueueGenericSendFromISR+0x6c>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <xQueueGenericSendFromISR+0x84>
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	e7fe      	b.n	8008c26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c28:	f001 fec4 	bl	800a9b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c2c:	f3ef 8211 	mrs	r2, BASEPRI
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	61ba      	str	r2, [r7, #24]
 8008c42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d302      	bcc.n	8008c5a <xQueueGenericSendFromISR+0xb6>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d12c      	bne.n	8008cb4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c6a:	f000 f90b 	bl	8008e84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c76:	d112      	bne.n	8008c9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d016      	beq.n	8008cae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	3324      	adds	r3, #36	; 0x24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 febb 	bl	8009a00 <xTaskRemoveFromEventList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00e      	beq.n	8008cae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	e007      	b.n	8008cae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	b25a      	sxtb	r2, r3
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008cb2:	e001      	b.n	8008cb8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3738      	adds	r7, #56	; 0x38
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	; 0x30
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <xQueueReceive+0x2e>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	623b      	str	r3, [r7, #32]
 8008cf8:	e7fe      	b.n	8008cf8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d103      	bne.n	8008d08 <xQueueReceive+0x3c>
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <xQueueReceive+0x40>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <xQueueReceive+0x42>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d109      	bne.n	8008d26 <xQueueReceive+0x5a>
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	e7fe      	b.n	8008d24 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d26:	f001 f821 	bl	8009d6c <xTaskGetSchedulerState>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <xQueueReceive+0x6a>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <xQueueReceive+0x6e>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <xQueueReceive+0x70>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <xQueueReceive+0x88>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	e7fe      	b.n	8008d52 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d54:	f001 fd52 	bl	800a7fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01f      	beq.n	8008da4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d68:	f000 f8f6 	bl	8008f58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	1e5a      	subs	r2, r3, #1
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00f      	beq.n	8008d9c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	3310      	adds	r3, #16
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fe3d 	bl	8009a00 <xTaskRemoveFromEventList>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d007      	beq.n	8008d9c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d8c:	4b3c      	ldr	r3, [pc, #240]	; (8008e80 <xQueueReceive+0x1b4>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d9c:	f001 fd5c 	bl	800a858 <vPortExitCritical>
				return pdPASS;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e069      	b.n	8008e78 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008daa:	f001 fd55 	bl	800a858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e062      	b.n	8008e78 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 fe81 	bl	8009ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dc6:	f001 fd47 	bl	800a858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dca:	f000 fbfd 	bl	80095c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dce:	f001 fd15 	bl	800a7fc <vPortEnterCritical>
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dde:	d103      	bne.n	8008de8 <xQueueReceive+0x11c>
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dee:	b25b      	sxtb	r3, r3
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df4:	d103      	bne.n	8008dfe <xQueueReceive+0x132>
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dfe:	f001 fd2b 	bl	800a858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e02:	1d3a      	adds	r2, r7, #4
 8008e04:	f107 0310 	add.w	r3, r7, #16
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fe70 	bl	8009af0 <xTaskCheckForTimeOut>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d123      	bne.n	8008e5e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e18:	f000 f916 	bl	8009048 <prvIsQueueEmpty>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d017      	beq.n	8008e52 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	3324      	adds	r3, #36	; 0x24
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fd9a 	bl	8009964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e32:	f000 f8b7 	bl	8008fa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e36:	f000 fbd5 	bl	80095e4 <xTaskResumeAll>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d189      	bne.n	8008d54 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <xQueueReceive+0x1b4>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	e780      	b.n	8008d54 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e54:	f000 f8a6 	bl	8008fa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e58:	f000 fbc4 	bl	80095e4 <xTaskResumeAll>
 8008e5c:	e77a      	b.n	8008d54 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e60:	f000 f8a0 	bl	8008fa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e64:	f000 fbbe 	bl	80095e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e6a:	f000 f8ed 	bl	8009048 <prvIsQueueEmpty>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f43f af6f 	beq.w	8008d54 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3730      	adds	r7, #48	; 0x30
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d14d      	bne.n	8008f46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 ff7a 	bl	8009da8 <xTaskPriorityDisinherit>
 8008eb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	e043      	b.n	8008f46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d119      	bne.n	8008ef8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6858      	ldr	r0, [r3, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ecc:	461a      	mov	r2, r3
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	f002 fd16 	bl	800b900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008edc:	441a      	add	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d32b      	bcc.n	8008f46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	e026      	b.n	8008f46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68d8      	ldr	r0, [r3, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	461a      	mov	r2, r3
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	f002 fcfc 	bl	800b900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f10:	425b      	negs	r3, r3
 8008f12:	441a      	add	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d207      	bcs.n	8008f34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	425b      	negs	r3, r3
 8008f2e:	441a      	add	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d105      	bne.n	8008f46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f4e:	697b      	ldr	r3, [r7, #20]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d018      	beq.n	8008f9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	441a      	add	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d303      	bcc.n	8008f8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68d9      	ldr	r1, [r3, #12]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	461a      	mov	r2, r3
 8008f96:	6838      	ldr	r0, [r7, #0]
 8008f98:	f002 fcb2 	bl	800b900 <memcpy>
	}
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fac:	f001 fc26 	bl	800a7fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fb8:	e011      	b.n	8008fde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d012      	beq.n	8008fe8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3324      	adds	r3, #36	; 0x24
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fd1a 	bl	8009a00 <xTaskRemoveFromEventList>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fd2:	f000 fded 	bl	8009bb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	dce9      	bgt.n	8008fba <prvUnlockQueue+0x16>
 8008fe6:	e000      	b.n	8008fea <prvUnlockQueue+0x46>
					break;
 8008fe8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	22ff      	movs	r2, #255	; 0xff
 8008fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ff2:	f001 fc31 	bl	800a858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ff6:	f001 fc01 	bl	800a7fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009000:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009002:	e011      	b.n	8009028 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d012      	beq.n	8009032 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3310      	adds	r3, #16
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fcf5 	bl	8009a00 <xTaskRemoveFromEventList>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800901c:	f000 fdc8 	bl	8009bb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	3b01      	subs	r3, #1
 8009024:	b2db      	uxtb	r3, r3
 8009026:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800902c:	2b00      	cmp	r3, #0
 800902e:	dce9      	bgt.n	8009004 <prvUnlockQueue+0x60>
 8009030:	e000      	b.n	8009034 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009032:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	22ff      	movs	r2, #255	; 0xff
 8009038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800903c:	f001 fc0c 	bl	800a858 <vPortExitCritical>
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009050:	f001 fbd4 	bl	800a7fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800905c:	2301      	movs	r3, #1
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	e001      	b.n	8009066 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009066:	f001 fbf7 	bl	800a858 <vPortExitCritical>

	return xReturn;
 800906a:	68fb      	ldr	r3, [r7, #12]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800907c:	f001 fbbe 	bl	800a7fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	429a      	cmp	r2, r3
 800908a:	d102      	bne.n	8009092 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e001      	b.n	8009096 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009096:	f001 fbdf 	bl	800a858 <vPortExitCritical>

	return xReturn;
 800909a:	68fb      	ldr	r3, [r7, #12]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e014      	b.n	80090de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090b4:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <vQueueAddToRegistry+0x4c>)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090c0:	490b      	ldr	r1, [pc, #44]	; (80090f0 <vQueueAddToRegistry+0x4c>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090ca:	4a09      	ldr	r2, [pc, #36]	; (80090f0 <vQueueAddToRegistry+0x4c>)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090d6:	e005      	b.n	80090e4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b07      	cmp	r3, #7
 80090e2:	d9e7      	bls.n	80090b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090e4:	bf00      	nop
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	20001c1c 	.word	0x20001c1c

080090f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009104:	f001 fb7a 	bl	800a7fc <vPortEnterCritical>
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800910e:	b25b      	sxtb	r3, r3
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009114:	d103      	bne.n	800911e <vQueueWaitForMessageRestricted+0x2a>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009124:	b25b      	sxtb	r3, r3
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800912a:	d103      	bne.n	8009134 <vQueueWaitForMessageRestricted+0x40>
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009134:	f001 fb90 	bl	800a858 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913c:	2b00      	cmp	r3, #0
 800913e:	d106      	bne.n	800914e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	3324      	adds	r3, #36	; 0x24
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fc2f 	bl	80099ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	f7ff ff28 	bl	8008fa4 <prvUnlockQueue>
	}
 8009154:	bf00      	nop
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08e      	sub	sp, #56	; 0x38
 8009160:	af04      	add	r7, sp, #16
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	2b00      	cmp	r3, #0
 800916e:	d109      	bne.n	8009184 <xTaskCreateStatic+0x28>
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	623b      	str	r3, [r7, #32]
 8009182:	e7fe      	b.n	8009182 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <xTaskCreateStatic+0x42>
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	e7fe      	b.n	800919c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800919e:	235c      	movs	r3, #92	; 0x5c
 80091a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b5c      	cmp	r3, #92	; 0x5c
 80091a6:	d009      	beq.n	80091bc <xTaskCreateStatic+0x60>
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	e7fe      	b.n	80091ba <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01e      	beq.n	8009202 <xTaskCreateStatic+0xa6>
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01b      	beq.n	8009202 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091dc:	2300      	movs	r3, #0
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f850 	bl	800929a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091fc:	f000 f8dc 	bl	80093b8 <prvAddNewTaskToReadyList>
 8009200:	e001      	b.n	8009206 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009206:	697b      	ldr	r3, [r7, #20]
	}
 8009208:	4618      	mov	r0, r3
 800920a:	3728      	adds	r7, #40	; 0x28
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08c      	sub	sp, #48	; 0x30
 8009214:	af04      	add	r7, sp, #16
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	4613      	mov	r3, r2
 800921e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fc03 	bl	800aa30 <pvPortMalloc>
 800922a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009232:	205c      	movs	r0, #92	; 0x5c
 8009234:	f001 fbfc 	bl	800aa30 <pvPortMalloc>
 8009238:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
 8009246:	e005      	b.n	8009254 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009248:	6978      	ldr	r0, [r7, #20]
 800924a:	f001 fcb3 	bl	800abb4 <vPortFree>
 800924e:	e001      	b.n	8009254 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d017      	beq.n	800928a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009262:	88fa      	ldrh	r2, [r7, #6]
 8009264:	2300      	movs	r3, #0
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f80e 	bl	800929a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800927e:	69f8      	ldr	r0, [r7, #28]
 8009280:	f000 f89a 	bl	80093b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009284:	2301      	movs	r3, #1
 8009286:	61bb      	str	r3, [r7, #24]
 8009288:	e002      	b.n	8009290 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800928e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009290:	69bb      	ldr	r3, [r7, #24]
	}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b088      	sub	sp, #32
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	461a      	mov	r2, r3
 80092b2:	21a5      	movs	r1, #165	; 0xa5
 80092b4:	f002 fb2f 	bl	800b916 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092c2:	3b01      	subs	r3, #1
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <prvInitialiseNewTask+0x56>
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	e7fe      	b.n	80092ee <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01f      	beq.n	8009336 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	e012      	b.n	8009322 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	4413      	add	r3, r2
 8009302:	7819      	ldrb	r1, [r3, #0]
 8009304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4413      	add	r3, r2
 800930a:	3334      	adds	r3, #52	; 0x34
 800930c:	460a      	mov	r2, r1
 800930e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d006      	beq.n	800932a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	3301      	adds	r3, #1
 8009320:	61fb      	str	r3, [r7, #28]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	2b0f      	cmp	r3, #15
 8009326:	d9e9      	bls.n	80092fc <prvInitialiseNewTask+0x62>
 8009328:	e000      	b.n	800932c <prvInitialiseNewTask+0x92>
			{
				break;
 800932a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009334:	e003      	b.n	800933e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	2200      	movs	r2, #0
 800933a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	2b37      	cmp	r3, #55	; 0x37
 8009342:	d901      	bls.n	8009348 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009344:	2337      	movs	r3, #55	; 0x37
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800934c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009352:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	2200      	movs	r2, #0
 8009358:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	3304      	adds	r3, #4
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff f994 	bl	800868c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	3318      	adds	r3, #24
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff f98f 	bl	800868c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	2200      	movs	r2, #0
 8009388:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	68f9      	ldr	r1, [r7, #12]
 8009396:	69b8      	ldr	r0, [r7, #24]
 8009398:	f001 f90c 	bl	800a5b4 <pxPortInitialiseStack>
 800939c:	4602      	mov	r2, r0
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ae:	bf00      	nop
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093c0:	f001 fa1c 	bl	800a7fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093c4:	4b2d      	ldr	r3, [pc, #180]	; (800947c <prvAddNewTaskToReadyList+0xc4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	4a2c      	ldr	r2, [pc, #176]	; (800947c <prvAddNewTaskToReadyList+0xc4>)
 80093cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093ce:	4b2c      	ldr	r3, [pc, #176]	; (8009480 <prvAddNewTaskToReadyList+0xc8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d109      	bne.n	80093ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093d6:	4a2a      	ldr	r2, [pc, #168]	; (8009480 <prvAddNewTaskToReadyList+0xc8>)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093dc:	4b27      	ldr	r3, [pc, #156]	; (800947c <prvAddNewTaskToReadyList+0xc4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d110      	bne.n	8009406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093e4:	f000 fc08 	bl	8009bf8 <prvInitialiseTaskLists>
 80093e8:	e00d      	b.n	8009406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ea:	4b26      	ldr	r3, [pc, #152]	; (8009484 <prvAddNewTaskToReadyList+0xcc>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093f2:	4b23      	ldr	r3, [pc, #140]	; (8009480 <prvAddNewTaskToReadyList+0xc8>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d802      	bhi.n	8009406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009400:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <prvAddNewTaskToReadyList+0xc8>)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009406:	4b20      	ldr	r3, [pc, #128]	; (8009488 <prvAddNewTaskToReadyList+0xd0>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3301      	adds	r3, #1
 800940c:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <prvAddNewTaskToReadyList+0xd0>)
 800940e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009410:	4b1d      	ldr	r3, [pc, #116]	; (8009488 <prvAddNewTaskToReadyList+0xd0>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941c:	4b1b      	ldr	r3, [pc, #108]	; (800948c <prvAddNewTaskToReadyList+0xd4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <prvAddNewTaskToReadyList+0x74>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	4a18      	ldr	r2, [pc, #96]	; (800948c <prvAddNewTaskToReadyList+0xd4>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4a15      	ldr	r2, [pc, #84]	; (8009490 <prvAddNewTaskToReadyList+0xd8>)
 800943a:	441a      	add	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7ff f92f 	bl	80086a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009448:	f001 fa06 	bl	800a858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <prvAddNewTaskToReadyList+0xcc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00e      	beq.n	8009472 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <prvAddNewTaskToReadyList+0xc8>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945e:	429a      	cmp	r2, r3
 8009460:	d207      	bcs.n	8009472 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <prvAddNewTaskToReadyList+0xdc>)
 8009464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000dac 	.word	0x20000dac
 8009480:	200008d8 	.word	0x200008d8
 8009484:	20000db8 	.word	0x20000db8
 8009488:	20000dc8 	.word	0x20000dc8
 800948c:	20000db4 	.word	0x20000db4
 8009490:	200008dc 	.word	0x200008dc
 8009494:	e000ed04 	.word	0xe000ed04

08009498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d016      	beq.n	80094d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094aa:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <vTaskDelay+0x60>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <vTaskDelay+0x2e>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60bb      	str	r3, [r7, #8]
 80094c4:	e7fe      	b.n	80094c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80094c6:	f000 f87f 	bl	80095c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094ca:	2100      	movs	r1, #0
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fcd7 	bl	8009e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094d2:	f000 f887 	bl	80095e4 <xTaskResumeAll>
 80094d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d107      	bne.n	80094ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80094de:	4b07      	ldr	r3, [pc, #28]	; (80094fc <vTaskDelay+0x64>)
 80094e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000dd4 	.word	0x20000dd4
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08a      	sub	sp, #40	; 0x28
 8009504:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800950e:	463a      	mov	r2, r7
 8009510:	1d39      	adds	r1, r7, #4
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff f864 	bl	80085e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	9202      	str	r2, [sp, #8]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	2300      	movs	r3, #0
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	2300      	movs	r3, #0
 800952c:	460a      	mov	r2, r1
 800952e:	4920      	ldr	r1, [pc, #128]	; (80095b0 <vTaskStartScheduler+0xb0>)
 8009530:	4820      	ldr	r0, [pc, #128]	; (80095b4 <vTaskStartScheduler+0xb4>)
 8009532:	f7ff fe13 	bl	800915c <xTaskCreateStatic>
 8009536:	4602      	mov	r2, r0
 8009538:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <vTaskStartScheduler+0xb8>)
 800953a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800953c:	4b1e      	ldr	r3, [pc, #120]	; (80095b8 <vTaskStartScheduler+0xb8>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e001      	b.n	800954e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d102      	bne.n	800955a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009554:	f000 fce8 	bl	8009f28 <xTimerCreateTimerTask>
 8009558:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d115      	bne.n	800958c <vTaskStartScheduler+0x8c>
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009572:	4b12      	ldr	r3, [pc, #72]	; (80095bc <vTaskStartScheduler+0xbc>)
 8009574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009578:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800957a:	4b11      	ldr	r3, [pc, #68]	; (80095c0 <vTaskStartScheduler+0xc0>)
 800957c:	2201      	movs	r2, #1
 800957e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009580:	4b10      	ldr	r3, [pc, #64]	; (80095c4 <vTaskStartScheduler+0xc4>)
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009586:	f001 f89b 	bl	800a6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800958a:	e00d      	b.n	80095a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009592:	d109      	bne.n	80095a8 <vTaskStartScheduler+0xa8>
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e7fe      	b.n	80095a6 <vTaskStartScheduler+0xa6>
}
 80095a8:	bf00      	nop
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	0800bac0 	.word	0x0800bac0
 80095b4:	08009bc9 	.word	0x08009bc9
 80095b8:	20000dd0 	.word	0x20000dd0
 80095bc:	20000dcc 	.word	0x20000dcc
 80095c0:	20000db8 	.word	0x20000db8
 80095c4:	20000db0 	.word	0x20000db0

080095c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <vTaskSuspendAll+0x18>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3301      	adds	r3, #1
 80095d2:	4a03      	ldr	r2, [pc, #12]	; (80095e0 <vTaskSuspendAll+0x18>)
 80095d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80095d6:	bf00      	nop
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20000dd4 	.word	0x20000dd4

080095e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095f2:	4b41      	ldr	r3, [pc, #260]	; (80096f8 <xTaskResumeAll+0x114>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <xTaskResumeAll+0x2a>
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	e7fe      	b.n	800960c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800960e:	f001 f8f5 	bl	800a7fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009612:	4b39      	ldr	r3, [pc, #228]	; (80096f8 <xTaskResumeAll+0x114>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	3b01      	subs	r3, #1
 8009618:	4a37      	ldr	r2, [pc, #220]	; (80096f8 <xTaskResumeAll+0x114>)
 800961a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800961c:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <xTaskResumeAll+0x114>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d162      	bne.n	80096ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009624:	4b35      	ldr	r3, [pc, #212]	; (80096fc <xTaskResumeAll+0x118>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d05e      	beq.n	80096ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800962c:	e02f      	b.n	800968e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800962e:	4b34      	ldr	r3, [pc, #208]	; (8009700 <xTaskResumeAll+0x11c>)
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3318      	adds	r3, #24
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff f890 	bl	8008760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3304      	adds	r3, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff f88b 	bl	8008760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <xTaskResumeAll+0x120>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	429a      	cmp	r2, r3
 8009654:	d903      	bls.n	800965e <xTaskResumeAll+0x7a>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	4a2a      	ldr	r2, [pc, #168]	; (8009704 <xTaskResumeAll+0x120>)
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4a27      	ldr	r2, [pc, #156]	; (8009708 <xTaskResumeAll+0x124>)
 800966c:	441a      	add	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f7ff f816 	bl	80086a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967e:	4b23      	ldr	r3, [pc, #140]	; (800970c <xTaskResumeAll+0x128>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	429a      	cmp	r2, r3
 8009686:	d302      	bcc.n	800968e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009688:	4b21      	ldr	r3, [pc, #132]	; (8009710 <xTaskResumeAll+0x12c>)
 800968a:	2201      	movs	r2, #1
 800968c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800968e:	4b1c      	ldr	r3, [pc, #112]	; (8009700 <xTaskResumeAll+0x11c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1cb      	bne.n	800962e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800969c:	f000 fb46 	bl	8009d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80096a0:	4b1c      	ldr	r3, [pc, #112]	; (8009714 <xTaskResumeAll+0x130>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d010      	beq.n	80096ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096ac:	f000 f846 	bl	800973c <xTaskIncrementTick>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80096b6:	4b16      	ldr	r3, [pc, #88]	; (8009710 <xTaskResumeAll+0x12c>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3b01      	subs	r3, #1
 80096c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1f1      	bne.n	80096ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80096c8:	4b12      	ldr	r3, [pc, #72]	; (8009714 <xTaskResumeAll+0x130>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096ce:	4b10      	ldr	r3, [pc, #64]	; (8009710 <xTaskResumeAll+0x12c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096d6:	2301      	movs	r3, #1
 80096d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096da:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <xTaskResumeAll+0x134>)
 80096dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ea:	f001 f8b5 	bl	800a858 <vPortExitCritical>

	return xAlreadyYielded;
 80096ee:	68bb      	ldr	r3, [r7, #8]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000dd4 	.word	0x20000dd4
 80096fc:	20000dac 	.word	0x20000dac
 8009700:	20000d6c 	.word	0x20000d6c
 8009704:	20000db4 	.word	0x20000db4
 8009708:	200008dc 	.word	0x200008dc
 800970c:	200008d8 	.word	0x200008d8
 8009710:	20000dc0 	.word	0x20000dc0
 8009714:	20000dbc 	.word	0x20000dbc
 8009718:	e000ed04 	.word	0xe000ed04

0800971c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <xTaskGetTickCount+0x1c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009728:	687b      	ldr	r3, [r7, #4]
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000db0 	.word	0x20000db0

0800973c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009742:	2300      	movs	r3, #0
 8009744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009746:	4b4e      	ldr	r3, [pc, #312]	; (8009880 <xTaskIncrementTick+0x144>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 8088 	bne.w	8009860 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009750:	4b4c      	ldr	r3, [pc, #304]	; (8009884 <xTaskIncrementTick+0x148>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009758:	4a4a      	ldr	r2, [pc, #296]	; (8009884 <xTaskIncrementTick+0x148>)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d11f      	bne.n	80097a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009764:	4b48      	ldr	r3, [pc, #288]	; (8009888 <xTaskIncrementTick+0x14c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <xTaskIncrementTick+0x46>
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	e7fe      	b.n	8009780 <xTaskIncrementTick+0x44>
 8009782:	4b41      	ldr	r3, [pc, #260]	; (8009888 <xTaskIncrementTick+0x14c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	4b40      	ldr	r3, [pc, #256]	; (800988c <xTaskIncrementTick+0x150>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a3e      	ldr	r2, [pc, #248]	; (8009888 <xTaskIncrementTick+0x14c>)
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	4a3e      	ldr	r2, [pc, #248]	; (800988c <xTaskIncrementTick+0x150>)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	4b3e      	ldr	r3, [pc, #248]	; (8009890 <xTaskIncrementTick+0x154>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	4a3c      	ldr	r2, [pc, #240]	; (8009890 <xTaskIncrementTick+0x154>)
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	f000 fac4 	bl	8009d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097a4:	4b3b      	ldr	r3, [pc, #236]	; (8009894 <xTaskIncrementTick+0x158>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d349      	bcc.n	8009842 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ae:	4b36      	ldr	r3, [pc, #216]	; (8009888 <xTaskIncrementTick+0x14c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d104      	bne.n	80097c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b8:	4b36      	ldr	r3, [pc, #216]	; (8009894 <xTaskIncrementTick+0x158>)
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097be:	601a      	str	r2, [r3, #0]
					break;
 80097c0:	e03f      	b.n	8009842 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c2:	4b31      	ldr	r3, [pc, #196]	; (8009888 <xTaskIncrementTick+0x14c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d203      	bcs.n	80097e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097da:	4a2e      	ldr	r2, [pc, #184]	; (8009894 <xTaskIncrementTick+0x158>)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097e0:	e02f      	b.n	8009842 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe ffba 	bl	8008760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d004      	beq.n	80097fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	3318      	adds	r3, #24
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe ffb1 	bl	8008760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009802:	4b25      	ldr	r3, [pc, #148]	; (8009898 <xTaskIncrementTick+0x15c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d903      	bls.n	8009812 <xTaskIncrementTick+0xd6>
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	4a22      	ldr	r2, [pc, #136]	; (8009898 <xTaskIncrementTick+0x15c>)
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4a1f      	ldr	r2, [pc, #124]	; (800989c <xTaskIncrementTick+0x160>)
 8009820:	441a      	add	r2, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3304      	adds	r3, #4
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f7fe ff3c 	bl	80086a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009832:	4b1b      	ldr	r3, [pc, #108]	; (80098a0 <xTaskIncrementTick+0x164>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	429a      	cmp	r2, r3
 800983a:	d3b8      	bcc.n	80097ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800983c:	2301      	movs	r3, #1
 800983e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009840:	e7b5      	b.n	80097ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <xTaskIncrementTick+0x164>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4914      	ldr	r1, [pc, #80]	; (800989c <xTaskIncrementTick+0x160>)
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d907      	bls.n	800986a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800985a:	2301      	movs	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e004      	b.n	800986a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009860:	4b10      	ldr	r3, [pc, #64]	; (80098a4 <xTaskIncrementTick+0x168>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a0f      	ldr	r2, [pc, #60]	; (80098a4 <xTaskIncrementTick+0x168>)
 8009868:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800986a:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <xTaskIncrementTick+0x16c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009872:	2301      	movs	r3, #1
 8009874:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009876:	697b      	ldr	r3, [r7, #20]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000dd4 	.word	0x20000dd4
 8009884:	20000db0 	.word	0x20000db0
 8009888:	20000d64 	.word	0x20000d64
 800988c:	20000d68 	.word	0x20000d68
 8009890:	20000dc4 	.word	0x20000dc4
 8009894:	20000dcc 	.word	0x20000dcc
 8009898:	20000db4 	.word	0x20000db4
 800989c:	200008dc 	.word	0x200008dc
 80098a0:	200008d8 	.word	0x200008d8
 80098a4:	20000dbc 	.word	0x20000dbc
 80098a8:	20000dc0 	.word	0x20000dc0

080098ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098b2:	4b27      	ldr	r3, [pc, #156]	; (8009950 <vTaskSwitchContext+0xa4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098ba:	4b26      	ldr	r3, [pc, #152]	; (8009954 <vTaskSwitchContext+0xa8>)
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098c0:	e040      	b.n	8009944 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80098c2:	4b24      	ldr	r3, [pc, #144]	; (8009954 <vTaskSwitchContext+0xa8>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c8:	4b23      	ldr	r3, [pc, #140]	; (8009958 <vTaskSwitchContext+0xac>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	e00f      	b.n	80098f0 <vTaskSwitchContext+0x44>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <vTaskSwitchContext+0x3e>
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	607b      	str	r3, [r7, #4]
 80098e8:	e7fe      	b.n	80098e8 <vTaskSwitchContext+0x3c>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	491a      	ldr	r1, [pc, #104]	; (800995c <vTaskSwitchContext+0xb0>)
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0e5      	beq.n	80098d0 <vTaskSwitchContext+0x24>
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4a13      	ldr	r2, [pc, #76]	; (800995c <vTaskSwitchContext+0xb0>)
 8009910:	4413      	add	r3, r2
 8009912:	60bb      	str	r3, [r7, #8]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	605a      	str	r2, [r3, #4]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	3308      	adds	r3, #8
 8009926:	429a      	cmp	r2, r3
 8009928:	d104      	bne.n	8009934 <vTaskSwitchContext+0x88>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	605a      	str	r2, [r3, #4]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	4a09      	ldr	r2, [pc, #36]	; (8009960 <vTaskSwitchContext+0xb4>)
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	4a06      	ldr	r2, [pc, #24]	; (8009958 <vTaskSwitchContext+0xac>)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6013      	str	r3, [r2, #0]
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	20000dd4 	.word	0x20000dd4
 8009954:	20000dc0 	.word	0x20000dc0
 8009958:	20000db4 	.word	0x20000db4
 800995c:	200008dc 	.word	0x200008dc
 8009960:	200008d8 	.word	0x200008d8

08009964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d109      	bne.n	8009988 <vTaskPlaceOnEventList+0x24>
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e7fe      	b.n	8009986 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009988:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <vTaskPlaceOnEventList+0x44>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3318      	adds	r3, #24
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7fe feac 	bl	80086ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009996:	2101      	movs	r1, #1
 8009998:	6838      	ldr	r0, [r7, #0]
 800999a:	f000 fa71 	bl	8009e80 <prvAddCurrentTaskToDelayedList>
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200008d8 	.word	0x200008d8

080099ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <vTaskPlaceOnEventListRestricted+0x26>
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e7fe      	b.n	80099d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099d2:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <vTaskPlaceOnEventListRestricted+0x50>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3318      	adds	r3, #24
 80099d8:	4619      	mov	r1, r3
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7fe fe63 	bl	80086a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80099e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	68b8      	ldr	r0, [r7, #8]
 80099f0:	f000 fa46 	bl	8009e80 <prvAddCurrentTaskToDelayedList>
	}
 80099f4:	bf00      	nop
 80099f6:	3718      	adds	r7, #24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	200008d8 	.word	0x200008d8

08009a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d109      	bne.n	8009a2a <xTaskRemoveFromEventList+0x2a>
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	e7fe      	b.n	8009a28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3318      	adds	r3, #24
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fe96 	bl	8008760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a34:	4b1d      	ldr	r3, [pc, #116]	; (8009aac <xTaskRemoveFromEventList+0xac>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11d      	bne.n	8009a78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe fe8d 	bl	8008760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4a:	4b19      	ldr	r3, [pc, #100]	; (8009ab0 <xTaskRemoveFromEventList+0xb0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d903      	bls.n	8009a5a <xTaskRemoveFromEventList+0x5a>
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a16      	ldr	r2, [pc, #88]	; (8009ab0 <xTaskRemoveFromEventList+0xb0>)
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <xTaskRemoveFromEventList+0xb4>)
 8009a68:	441a      	add	r2, r3
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fe fe18 	bl	80086a6 <vListInsertEnd>
 8009a76:	e005      	b.n	8009a84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	3318      	adds	r3, #24
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	480e      	ldr	r0, [pc, #56]	; (8009ab8 <xTaskRemoveFromEventList+0xb8>)
 8009a80:	f7fe fe11 	bl	80086a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <xTaskRemoveFromEventList+0xbc>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d905      	bls.n	8009a9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a92:	2301      	movs	r3, #1
 8009a94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a96:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <xTaskRemoveFromEventList+0xc0>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	e001      	b.n	8009aa2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009aa2:	697b      	ldr	r3, [r7, #20]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20000dd4 	.word	0x20000dd4
 8009ab0:	20000db4 	.word	0x20000db4
 8009ab4:	200008dc 	.word	0x200008dc
 8009ab8:	20000d6c 	.word	0x20000d6c
 8009abc:	200008d8 	.word	0x200008d8
 8009ac0:	20000dc0 	.word	0x20000dc0

08009ac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009acc:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <vTaskInternalSetTimeOutState+0x24>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ad4:	4b05      	ldr	r3, [pc, #20]	; (8009aec <vTaskInternalSetTimeOutState+0x28>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	605a      	str	r2, [r3, #4]
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20000dc4 	.word	0x20000dc4
 8009aec:	20000db0 	.word	0x20000db0

08009af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d109      	bne.n	8009b14 <xTaskCheckForTimeOut+0x24>
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	e7fe      	b.n	8009b12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d109      	bne.n	8009b2e <xTaskCheckForTimeOut+0x3e>
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	e7fe      	b.n	8009b2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009b2e:	f000 fe65 	bl	800a7fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b32:	4b1d      	ldr	r3, [pc, #116]	; (8009ba8 <xTaskCheckForTimeOut+0xb8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b4a:	d102      	bne.n	8009b52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	e023      	b.n	8009b9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	4b15      	ldr	r3, [pc, #84]	; (8009bac <xTaskCheckForTimeOut+0xbc>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d007      	beq.n	8009b6e <xTaskCheckForTimeOut+0x7e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d302      	bcc.n	8009b6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	e015      	b.n	8009b9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d20b      	bcs.n	8009b90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff ff9d 	bl	8009ac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61fb      	str	r3, [r7, #28]
 8009b8e:	e004      	b.n	8009b9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b96:	2301      	movs	r3, #1
 8009b98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b9a:	f000 fe5d 	bl	800a858 <vPortExitCritical>

	return xReturn;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000db0 	.word	0x20000db0
 8009bac:	20000dc4 	.word	0x20000dc4

08009bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <vTaskMissedYield+0x14>)
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	601a      	str	r2, [r3, #0]
}
 8009bba:	bf00      	nop
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	20000dc0 	.word	0x20000dc0

08009bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bd0:	f000 f852 	bl	8009c78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <prvIdleTask+0x28>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d9f9      	bls.n	8009bd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bdc:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <prvIdleTask+0x2c>)
 8009bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bec:	e7f0      	b.n	8009bd0 <prvIdleTask+0x8>
 8009bee:	bf00      	nop
 8009bf0:	200008dc 	.word	0x200008dc
 8009bf4:	e000ed04 	.word	0xe000ed04

08009bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bfe:	2300      	movs	r3, #0
 8009c00:	607b      	str	r3, [r7, #4]
 8009c02:	e00c      	b.n	8009c1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a12      	ldr	r2, [pc, #72]	; (8009c58 <prvInitialiseTaskLists+0x60>)
 8009c10:	4413      	add	r3, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fd1a 	bl	800864c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	607b      	str	r3, [r7, #4]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b37      	cmp	r3, #55	; 0x37
 8009c22:	d9ef      	bls.n	8009c04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c24:	480d      	ldr	r0, [pc, #52]	; (8009c5c <prvInitialiseTaskLists+0x64>)
 8009c26:	f7fe fd11 	bl	800864c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c2a:	480d      	ldr	r0, [pc, #52]	; (8009c60 <prvInitialiseTaskLists+0x68>)
 8009c2c:	f7fe fd0e 	bl	800864c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c30:	480c      	ldr	r0, [pc, #48]	; (8009c64 <prvInitialiseTaskLists+0x6c>)
 8009c32:	f7fe fd0b 	bl	800864c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c36:	480c      	ldr	r0, [pc, #48]	; (8009c68 <prvInitialiseTaskLists+0x70>)
 8009c38:	f7fe fd08 	bl	800864c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c3c:	480b      	ldr	r0, [pc, #44]	; (8009c6c <prvInitialiseTaskLists+0x74>)
 8009c3e:	f7fe fd05 	bl	800864c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <prvInitialiseTaskLists+0x78>)
 8009c44:	4a05      	ldr	r2, [pc, #20]	; (8009c5c <prvInitialiseTaskLists+0x64>)
 8009c46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c48:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <prvInitialiseTaskLists+0x7c>)
 8009c4a:	4a05      	ldr	r2, [pc, #20]	; (8009c60 <prvInitialiseTaskLists+0x68>)
 8009c4c:	601a      	str	r2, [r3, #0]
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	200008dc 	.word	0x200008dc
 8009c5c:	20000d3c 	.word	0x20000d3c
 8009c60:	20000d50 	.word	0x20000d50
 8009c64:	20000d6c 	.word	0x20000d6c
 8009c68:	20000d80 	.word	0x20000d80
 8009c6c:	20000d98 	.word	0x20000d98
 8009c70:	20000d64 	.word	0x20000d64
 8009c74:	20000d68 	.word	0x20000d68

08009c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c7e:	e019      	b.n	8009cb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c80:	f000 fdbc 	bl	800a7fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c84:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <prvCheckTasksWaitingTermination+0x4c>)
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe fd65 	bl	8008760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <prvCheckTasksWaitingTermination+0x50>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4a0a      	ldr	r2, [pc, #40]	; (8009cc8 <prvCheckTasksWaitingTermination+0x50>)
 8009c9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <prvCheckTasksWaitingTermination+0x54>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	4a09      	ldr	r2, [pc, #36]	; (8009ccc <prvCheckTasksWaitingTermination+0x54>)
 8009ca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009caa:	f000 fdd5 	bl	800a858 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f80e 	bl	8009cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb4:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <prvCheckTasksWaitingTermination+0x54>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e1      	bne.n	8009c80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cbc:	bf00      	nop
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20000d80 	.word	0x20000d80
 8009cc8:	20000dac 	.word	0x20000dac
 8009ccc:	20000d94 	.word	0x20000d94

08009cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d108      	bne.n	8009cf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ff64 	bl	800abb4 <vPortFree>
				vPortFree( pxTCB );
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 ff61 	bl	800abb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cf2:	e017      	b.n	8009d24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d103      	bne.n	8009d06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 ff58 	bl	800abb4 <vPortFree>
	}
 8009d04:	e00e      	b.n	8009d24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d009      	beq.n	8009d24 <prvDeleteTCB+0x54>
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	e7fe      	b.n	8009d22 <prvDeleteTCB+0x52>
	}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d32:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <prvResetNextTaskUnblockTime+0x38>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d104      	bne.n	8009d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <prvResetNextTaskUnblockTime+0x3c>)
 8009d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d44:	e008      	b.n	8009d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <prvResetNextTaskUnblockTime+0x38>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4a04      	ldr	r2, [pc, #16]	; (8009d68 <prvResetNextTaskUnblockTime+0x3c>)
 8009d56:	6013      	str	r3, [r2, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	20000d64 	.word	0x20000d64
 8009d68:	20000dcc 	.word	0x20000dcc

08009d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <xTaskGetSchedulerState+0x34>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	e008      	b.n	8009d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <xTaskGetSchedulerState+0x38>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	e001      	b.n	8009d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d92:	687b      	ldr	r3, [r7, #4]
	}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000db8 	.word	0x20000db8
 8009da4:	20000dd4 	.word	0x20000dd4

08009da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d054      	beq.n	8009e68 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dbe:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <xTaskPriorityDisinherit+0xcc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d009      	beq.n	8009ddc <xTaskPriorityDisinherit+0x34>
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	e7fe      	b.n	8009dda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <xTaskPriorityDisinherit+0x50>
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60bb      	str	r3, [r7, #8]
 8009df6:	e7fe      	b.n	8009df6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfc:	1e5a      	subs	r2, r3, #1
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d02c      	beq.n	8009e68 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d128      	bne.n	8009e68 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fca0 	bl	8008760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e38:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <xTaskPriorityDisinherit+0xd0>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d903      	bls.n	8009e48 <xTaskPriorityDisinherit+0xa0>
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	4a0c      	ldr	r2, [pc, #48]	; (8009e78 <xTaskPriorityDisinherit+0xd0>)
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <xTaskPriorityDisinherit+0xd4>)
 8009e56:	441a      	add	r2, r3
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7fe fc21 	bl	80086a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e64:	2301      	movs	r3, #1
 8009e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e68:	697b      	ldr	r3, [r7, #20]
	}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200008d8 	.word	0x200008d8
 8009e78:	20000db4 	.word	0x20000db4
 8009e7c:	200008dc 	.word	0x200008dc

08009e80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e8a:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e90:	4b20      	ldr	r3, [pc, #128]	; (8009f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fc62 	bl	8008760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ea2:	d10a      	bne.n	8009eba <prvAddCurrentTaskToDelayedList+0x3a>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eaa:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4819      	ldr	r0, [pc, #100]	; (8009f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8009eb4:	f7fe fbf7 	bl	80086a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009eb8:	e026      	b.n	8009f08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ec2:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d209      	bcs.n	8009ee6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ed2:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4b0f      	ldr	r3, [pc, #60]	; (8009f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f7fe fc05 	bl	80086ee <vListInsert>
}
 8009ee4:	e010      	b.n	8009f08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fe fbfb 	bl	80086ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d202      	bcs.n	8009f08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f02:	4a08      	ldr	r2, [pc, #32]	; (8009f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	6013      	str	r3, [r2, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20000db0 	.word	0x20000db0
 8009f14:	200008d8 	.word	0x200008d8
 8009f18:	20000d98 	.word	0x20000d98
 8009f1c:	20000d68 	.word	0x20000d68
 8009f20:	20000d64 	.word	0x20000d64
 8009f24:	20000dcc 	.word	0x20000dcc

08009f28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08a      	sub	sp, #40	; 0x28
 8009f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f32:	f000 faff 	bl	800a534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f36:	4b1c      	ldr	r3, [pc, #112]	; (8009fa8 <xTimerCreateTimerTask+0x80>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d021      	beq.n	8009f82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f46:	1d3a      	adds	r2, r7, #4
 8009f48:	f107 0108 	add.w	r1, r7, #8
 8009f4c:	f107 030c 	add.w	r3, r7, #12
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe fb61 	bl	8008618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	9202      	str	r2, [sp, #8]
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	2302      	movs	r3, #2
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	2300      	movs	r3, #0
 8009f66:	460a      	mov	r2, r1
 8009f68:	4910      	ldr	r1, [pc, #64]	; (8009fac <xTimerCreateTimerTask+0x84>)
 8009f6a:	4811      	ldr	r0, [pc, #68]	; (8009fb0 <xTimerCreateTimerTask+0x88>)
 8009f6c:	f7ff f8f6 	bl	800915c <xTaskCreateStatic>
 8009f70:	4602      	mov	r2, r0
 8009f72:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <xTimerCreateTimerTask+0x8c>)
 8009f74:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f76:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <xTimerCreateTimerTask+0x8c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d109      	bne.n	8009f9c <xTimerCreateTimerTask+0x74>
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	e7fe      	b.n	8009f9a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009f9c:	697b      	ldr	r3, [r7, #20]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000e08 	.word	0x20000e08
 8009fac:	0800bac8 	.word	0x0800bac8
 8009fb0:	0800a0e9 	.word	0x0800a0e9
 8009fb4:	20000e0c 	.word	0x20000e0c

08009fb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <xTimerGenericCommand+0x2c>
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	623b      	str	r3, [r7, #32]
 8009fe2:	e7fe      	b.n	8009fe2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fe4:	4b19      	ldr	r3, [pc, #100]	; (800a04c <xTimerGenericCommand+0x94>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02a      	beq.n	800a042 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	dc18      	bgt.n	800a030 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ffe:	f7ff feb5 	bl	8009d6c <xTaskGetSchedulerState>
 800a002:	4603      	mov	r3, r0
 800a004:	2b02      	cmp	r3, #2
 800a006:	d109      	bne.n	800a01c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a008:	4b10      	ldr	r3, [pc, #64]	; (800a04c <xTimerGenericCommand+0x94>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	f107 0110 	add.w	r1, r7, #16
 800a010:	2300      	movs	r3, #0
 800a012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a014:	f7fe fccc 	bl	80089b0 <xQueueGenericSend>
 800a018:	6278      	str	r0, [r7, #36]	; 0x24
 800a01a:	e012      	b.n	800a042 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a01c:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <xTimerGenericCommand+0x94>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	f107 0110 	add.w	r1, r7, #16
 800a024:	2300      	movs	r3, #0
 800a026:	2200      	movs	r2, #0
 800a028:	f7fe fcc2 	bl	80089b0 <xQueueGenericSend>
 800a02c:	6278      	str	r0, [r7, #36]	; 0x24
 800a02e:	e008      	b.n	800a042 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <xTimerGenericCommand+0x94>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	f107 0110 	add.w	r1, r7, #16
 800a038:	2300      	movs	r3, #0
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	f7fe fdb2 	bl	8008ba4 <xQueueGenericSendFromISR>
 800a040:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a044:	4618      	mov	r0, r3
 800a046:	3728      	adds	r7, #40	; 0x28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000e08 	.word	0x20000e08

0800a050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af02      	add	r7, sp, #8
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05a:	4b22      	ldr	r3, [pc, #136]	; (800a0e4 <prvProcessExpiredTimer+0x94>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3304      	adds	r3, #4
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fb79 	bl	8008760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d021      	beq.n	800a0c0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	699a      	ldr	r2, [r3, #24]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	18d1      	adds	r1, r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	6978      	ldr	r0, [r7, #20]
 800a08a:	f000 f8d1 	bl	800a230 <prvInsertTimerInActiveList>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01e      	beq.n	800a0d2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a094:	2300      	movs	r3, #0
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	2300      	movs	r3, #0
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	2100      	movs	r1, #0
 800a09e:	6978      	ldr	r0, [r7, #20]
 800a0a0:	f7ff ff8a 	bl	8009fb8 <xTimerGenericCommand>
 800a0a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d112      	bne.n	800a0d2 <prvProcessExpiredTimer+0x82>
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	e7fe      	b.n	800a0be <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	6978      	ldr	r0, [r7, #20]
 800a0d8:	4798      	blx	r3
}
 800a0da:	bf00      	nop
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000e00 	.word	0x20000e00

0800a0e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0f0:	f107 0308 	add.w	r3, r7, #8
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f857 	bl	800a1a8 <prvGetNextExpireTime>
 800a0fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f803 	bl	800a10c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a106:	f000 f8d5 	bl	800a2b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a10a:	e7f1      	b.n	800a0f0 <prvTimerTask+0x8>

0800a10c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a116:	f7ff fa57 	bl	80095c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f866 	bl	800a1f0 <prvSampleTimeNow>
 800a124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d130      	bne.n	800a18e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <prvProcessTimerOrBlockTask+0x3c>
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	429a      	cmp	r2, r3
 800a138:	d806      	bhi.n	800a148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a13a:	f7ff fa53 	bl	80095e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a13e:	68f9      	ldr	r1, [r7, #12]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff ff85 	bl	800a050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a146:	e024      	b.n	800a192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a14e:	4b13      	ldr	r3, [pc, #76]	; (800a19c <prvProcessTimerOrBlockTask+0x90>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <prvProcessTimerOrBlockTask+0x50>
 800a158:	2301      	movs	r3, #1
 800a15a:	e000      	b.n	800a15e <prvProcessTimerOrBlockTask+0x52>
 800a15c:	2300      	movs	r3, #0
 800a15e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a160:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <prvProcessTimerOrBlockTask+0x94>)
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4619      	mov	r1, r3
 800a16e:	f7fe ffc1 	bl	80090f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a172:	f7ff fa37 	bl	80095e4 <xTaskResumeAll>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <prvProcessTimerOrBlockTask+0x98>)
 800a17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	f3bf 8f6f 	isb	sy
}
 800a18c:	e001      	b.n	800a192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a18e:	f7ff fa29 	bl	80095e4 <xTaskResumeAll>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000e04 	.word	0x20000e04
 800a1a0:	20000e08 	.word	0x20000e08
 800a1a4:	e000ed04 	.word	0xe000ed04

0800a1a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1b0:	4b0e      	ldr	r3, [pc, #56]	; (800a1ec <prvGetNextExpireTime+0x44>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <prvGetNextExpireTime+0x16>
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	e000      	b.n	800a1c0 <prvGetNextExpireTime+0x18>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d105      	bne.n	800a1d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <prvGetNextExpireTime+0x44>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60fb      	str	r3, [r7, #12]
 800a1d6:	e001      	b.n	800a1dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000e00 	.word	0x20000e00

0800a1f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1f8:	f7ff fa90 	bl	800971c <xTaskGetTickCount>
 800a1fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1fe:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <prvSampleTimeNow+0x3c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	429a      	cmp	r2, r3
 800a206:	d205      	bcs.n	800a214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a208:	f000 f930 	bl	800a46c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	e002      	b.n	800a21a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a21a:	4a04      	ldr	r2, [pc, #16]	; (800a22c <prvSampleTimeNow+0x3c>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a220:	68fb      	ldr	r3, [r7, #12]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000e10 	.word	0x20000e10

0800a230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d812      	bhi.n	800a27c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	429a      	cmp	r2, r3
 800a262:	d302      	bcc.n	800a26a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e01b      	b.n	800a2a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a26a:	4b10      	ldr	r3, [pc, #64]	; (800a2ac <prvInsertTimerInActiveList+0x7c>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3304      	adds	r3, #4
 800a272:	4619      	mov	r1, r3
 800a274:	4610      	mov	r0, r2
 800a276:	f7fe fa3a 	bl	80086ee <vListInsert>
 800a27a:	e012      	b.n	800a2a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d206      	bcs.n	800a292 <prvInsertTimerInActiveList+0x62>
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d302      	bcc.n	800a292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a28c:	2301      	movs	r3, #1
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	e007      	b.n	800a2a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a292:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <prvInsertTimerInActiveList+0x80>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fe fa26 	bl	80086ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2a2:	697b      	ldr	r3, [r7, #20]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000e04 	.word	0x20000e04
 800a2b0:	20000e00 	.word	0x20000e00

0800a2b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	; 0x38
 800a2b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2ba:	e0c6      	b.n	800a44a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	da17      	bge.n	800a2f2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2c2:	1d3b      	adds	r3, r7, #4
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d109      	bne.n	800a2e2 <prvProcessReceivedCommands+0x2e>
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	e7fe      	b.n	800a2e0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2e8:	6850      	ldr	r0, [r2, #4]
 800a2ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ec:	6892      	ldr	r2, [r2, #8]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f2c0 80a7 	blt.w	800a448 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	3304      	adds	r3, #4
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fa28 	bl	8008760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a310:	463b      	mov	r3, r7
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff ff6c 	bl	800a1f0 <prvSampleTimeNow>
 800a318:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	f200 8094 	bhi.w	800a44a <prvProcessReceivedCommands+0x196>
 800a322:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <prvProcessReceivedCommands+0x74>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a351 	.word	0x0800a351
 800a32c:	0800a351 	.word	0x0800a351
 800a330:	0800a351 	.word	0x0800a351
 800a334:	0800a3c3 	.word	0x0800a3c3
 800a338:	0800a3d7 	.word	0x0800a3d7
 800a33c:	0800a41f 	.word	0x0800a41f
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a351 	.word	0x0800a351
 800a348:	0800a3c3 	.word	0x0800a3c3
 800a34c:	0800a3d7 	.word	0x0800a3d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	18d1      	adds	r1, r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a36e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a370:	f7ff ff5e 	bl	800a230 <prvInsertTimerInActiveList>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d067      	beq.n	800a44a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a380:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a388:	f003 0304 	and.w	r3, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d05c      	beq.n	800a44a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	441a      	add	r2, r3
 800a398:	2300      	movs	r3, #0
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	2300      	movs	r3, #0
 800a39e:	2100      	movs	r1, #0
 800a3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3a2:	f7ff fe09 	bl	8009fb8 <xTimerGenericCommand>
 800a3a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d14d      	bne.n	800a44a <prvProcessReceivedCommands+0x196>
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	61bb      	str	r3, [r7, #24]
 800a3c0:	e7fe      	b.n	800a3c0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a3d4:	e039      	b.n	800a44a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3dc:	f043 0301 	orr.w	r3, r3, #1
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <prvProcessReceivedCommands+0x156>
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e7fe      	b.n	800a408 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	18d1      	adds	r1, r2, r3
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a418:	f7ff ff0a 	bl	800a230 <prvInsertTimerInActiveList>
					break;
 800a41c:	e015      	b.n	800a44a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d103      	bne.n	800a434 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42e:	f000 fbc1 	bl	800abb4 <vPortFree>
 800a432:	e00a      	b.n	800a44a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a43a:	f023 0301 	bic.w	r3, r3, #1
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a446:	e000      	b.n	800a44a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a44a:	4b07      	ldr	r3, [pc, #28]	; (800a468 <prvProcessReceivedCommands+0x1b4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	1d39      	adds	r1, r7, #4
 800a450:	2200      	movs	r2, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fc3a 	bl	8008ccc <xQueueReceive>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f47f af2e 	bne.w	800a2bc <prvProcessReceivedCommands+0x8>
	}
}
 800a460:	bf00      	nop
 800a462:	3730      	adds	r7, #48	; 0x30
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20000e08 	.word	0x20000e08

0800a46c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a472:	e047      	b.n	800a504 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a474:	4b2d      	ldr	r3, [pc, #180]	; (800a52c <prvSwitchTimerLists+0xc0>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47e:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <prvSwitchTimerLists+0xc0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe f967 	bl	8008760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d02d      	beq.n	800a504 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d90e      	bls.n	800a4d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4c6:	4b19      	ldr	r3, [pc, #100]	; (800a52c <prvSwitchTimerLists+0xc0>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	f7fe f90c 	bl	80086ee <vListInsert>
 800a4d6:	e015      	b.n	800a504 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	2300      	movs	r3, #0
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff fd68 	bl	8009fb8 <xTimerGenericCommand>
 800a4e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d109      	bne.n	800a504 <prvSwitchTimerLists+0x98>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	e7fe      	b.n	800a502 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a504:	4b09      	ldr	r3, [pc, #36]	; (800a52c <prvSwitchTimerLists+0xc0>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1b2      	bne.n	800a474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <prvSwitchTimerLists+0xc0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <prvSwitchTimerLists+0xc4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a04      	ldr	r2, [pc, #16]	; (800a52c <prvSwitchTimerLists+0xc0>)
 800a51a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a51c:	4a04      	ldr	r2, [pc, #16]	; (800a530 <prvSwitchTimerLists+0xc4>)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	6013      	str	r3, [r2, #0]
}
 800a522:	bf00      	nop
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000e00 	.word	0x20000e00
 800a530:	20000e04 	.word	0x20000e04

0800a534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a53a:	f000 f95f 	bl	800a7fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a53e:	4b15      	ldr	r3, [pc, #84]	; (800a594 <prvCheckForValidListAndQueue+0x60>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d120      	bne.n	800a588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a546:	4814      	ldr	r0, [pc, #80]	; (800a598 <prvCheckForValidListAndQueue+0x64>)
 800a548:	f7fe f880 	bl	800864c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a54c:	4813      	ldr	r0, [pc, #76]	; (800a59c <prvCheckForValidListAndQueue+0x68>)
 800a54e:	f7fe f87d 	bl	800864c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a552:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <prvCheckForValidListAndQueue+0x6c>)
 800a554:	4a10      	ldr	r2, [pc, #64]	; (800a598 <prvCheckForValidListAndQueue+0x64>)
 800a556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a558:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <prvCheckForValidListAndQueue+0x70>)
 800a55a:	4a10      	ldr	r2, [pc, #64]	; (800a59c <prvCheckForValidListAndQueue+0x68>)
 800a55c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a55e:	2300      	movs	r3, #0
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <prvCheckForValidListAndQueue+0x74>)
 800a564:	4a11      	ldr	r2, [pc, #68]	; (800a5ac <prvCheckForValidListAndQueue+0x78>)
 800a566:	2110      	movs	r1, #16
 800a568:	200a      	movs	r0, #10
 800a56a:	f7fe f98b 	bl	8008884 <xQueueGenericCreateStatic>
 800a56e:	4602      	mov	r2, r0
 800a570:	4b08      	ldr	r3, [pc, #32]	; (800a594 <prvCheckForValidListAndQueue+0x60>)
 800a572:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a574:	4b07      	ldr	r3, [pc, #28]	; (800a594 <prvCheckForValidListAndQueue+0x60>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d005      	beq.n	800a588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <prvCheckForValidListAndQueue+0x60>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	490b      	ldr	r1, [pc, #44]	; (800a5b0 <prvCheckForValidListAndQueue+0x7c>)
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fd8e 	bl	80090a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a588:	f000 f966 	bl	800a858 <vPortExitCritical>
}
 800a58c:	bf00      	nop
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000e08 	.word	0x20000e08
 800a598:	20000dd8 	.word	0x20000dd8
 800a59c:	20000dec 	.word	0x20000dec
 800a5a0:	20000e00 	.word	0x20000e00
 800a5a4:	20000e04 	.word	0x20000e04
 800a5a8:	20000eb4 	.word	0x20000eb4
 800a5ac:	20000e14 	.word	0x20000e14
 800a5b0:	0800bad0 	.word	0x0800bad0

0800a5b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3b04      	subs	r3, #4
 800a5c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f023 0201 	bic.w	r2, r3, #1
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3b04      	subs	r3, #4
 800a5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5e4:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <pxPortInitialiseStack+0x64>)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3b14      	subs	r3, #20
 800a5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3b04      	subs	r3, #4
 800a5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f06f 0202 	mvn.w	r2, #2
 800a602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3b20      	subs	r3, #32
 800a608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a60a:	68fb      	ldr	r3, [r7, #12]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr
 800a618:	0800a61d 	.word	0x0800a61d

0800a61c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a626:	4b11      	ldr	r3, [pc, #68]	; (800a66c <prvTaskExitError+0x50>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a62e:	d009      	beq.n	800a644 <prvTaskExitError+0x28>
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	e7fe      	b.n	800a642 <prvTaskExitError+0x26>
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a656:	bf00      	nop
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0fc      	beq.n	800a658 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a65e:	bf00      	nop
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	2000011c 	.word	0x2000011c

0800a670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a670:	4b07      	ldr	r3, [pc, #28]	; (800a690 <pxCurrentTCBConst2>)
 800a672:	6819      	ldr	r1, [r3, #0]
 800a674:	6808      	ldr	r0, [r1, #0]
 800a676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67a:	f380 8809 	msr	PSP, r0
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8811 	msr	BASEPRI, r0
 800a68a:	4770      	bx	lr
 800a68c:	f3af 8000 	nop.w

0800a690 <pxCurrentTCBConst2>:
 800a690:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop

0800a698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a698:	4808      	ldr	r0, [pc, #32]	; (800a6bc <prvPortStartFirstTask+0x24>)
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	6800      	ldr	r0, [r0, #0]
 800a69e:	f380 8808 	msr	MSP, r0
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8814 	msr	CONTROL, r0
 800a6aa:	b662      	cpsie	i
 800a6ac:	b661      	cpsie	f
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	df00      	svc	0
 800a6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ba:	bf00      	nop
 800a6bc:	e000ed08 	.word	0xe000ed08

0800a6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6c6:	4b44      	ldr	r3, [pc, #272]	; (800a7d8 <xPortStartScheduler+0x118>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a44      	ldr	r2, [pc, #272]	; (800a7dc <xPortStartScheduler+0x11c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d109      	bne.n	800a6e4 <xPortStartScheduler+0x24>
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	e7fe      	b.n	800a6e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6e4:	4b3c      	ldr	r3, [pc, #240]	; (800a7d8 <xPortStartScheduler+0x118>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a3d      	ldr	r2, [pc, #244]	; (800a7e0 <xPortStartScheduler+0x120>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d109      	bne.n	800a702 <xPortStartScheduler+0x42>
 800a6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	e7fe      	b.n	800a700 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a702:	4b38      	ldr	r3, [pc, #224]	; (800a7e4 <xPortStartScheduler+0x124>)
 800a704:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	22ff      	movs	r2, #255	; 0xff
 800a712:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a724:	b2da      	uxtb	r2, r3
 800a726:	4b30      	ldr	r3, [pc, #192]	; (800a7e8 <xPortStartScheduler+0x128>)
 800a728:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a72a:	4b30      	ldr	r3, [pc, #192]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a72c:	2207      	movs	r2, #7
 800a72e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a730:	e009      	b.n	800a746 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a732:	4b2e      	ldr	r3, [pc, #184]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3b01      	subs	r3, #1
 800a738:	4a2c      	ldr	r2, [pc, #176]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a73a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	b2db      	uxtb	r3, r3
 800a744:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a746:	78fb      	ldrb	r3, [r7, #3]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74e:	2b80      	cmp	r3, #128	; 0x80
 800a750:	d0ef      	beq.n	800a732 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a752:	4b26      	ldr	r3, [pc, #152]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f1c3 0307 	rsb	r3, r3, #7
 800a75a:	2b04      	cmp	r3, #4
 800a75c:	d009      	beq.n	800a772 <xPortStartScheduler+0xb2>
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	e7fe      	b.n	800a770 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a772:	4b1e      	ldr	r3, [pc, #120]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	021b      	lsls	r3, r3, #8
 800a778:	4a1c      	ldr	r2, [pc, #112]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a77a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a77c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a784:	4a19      	ldr	r2, [pc, #100]	; (800a7ec <xPortStartScheduler+0x12c>)
 800a786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a790:	4b17      	ldr	r3, [pc, #92]	; (800a7f0 <xPortStartScheduler+0x130>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a16      	ldr	r2, [pc, #88]	; (800a7f0 <xPortStartScheduler+0x130>)
 800a796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a79a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a79c:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <xPortStartScheduler+0x130>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a13      	ldr	r2, [pc, #76]	; (800a7f0 <xPortStartScheduler+0x130>)
 800a7a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7a8:	f000 f8d6 	bl	800a958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7ac:	4b11      	ldr	r3, [pc, #68]	; (800a7f4 <xPortStartScheduler+0x134>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7b2:	f000 f8f5 	bl	800a9a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7b6:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <xPortStartScheduler+0x138>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a0f      	ldr	r2, [pc, #60]	; (800a7f8 <xPortStartScheduler+0x138>)
 800a7bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7c2:	f7ff ff69 	bl	800a698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7c6:	f7ff f871 	bl	80098ac <vTaskSwitchContext>
	prvTaskExitError();
 800a7ca:	f7ff ff27 	bl	800a61c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed00 	.word	0xe000ed00
 800a7dc:	410fc271 	.word	0x410fc271
 800a7e0:	410fc270 	.word	0x410fc270
 800a7e4:	e000e400 	.word	0xe000e400
 800a7e8:	20000f04 	.word	0x20000f04
 800a7ec:	20000f08 	.word	0x20000f08
 800a7f0:	e000ed20 	.word	0xe000ed20
 800a7f4:	2000011c 	.word	0x2000011c
 800a7f8:	e000ef34 	.word	0xe000ef34

0800a7fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a814:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <vPortEnterCritical+0x54>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	4a0d      	ldr	r2, [pc, #52]	; (800a850 <vPortEnterCritical+0x54>)
 800a81c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <vPortEnterCritical+0x54>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d10e      	bne.n	800a844 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a826:	4b0b      	ldr	r3, [pc, #44]	; (800a854 <vPortEnterCritical+0x58>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <vPortEnterCritical+0x48>
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	603b      	str	r3, [r7, #0]
 800a842:	e7fe      	b.n	800a842 <vPortEnterCritical+0x46>
	}
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	2000011c 	.word	0x2000011c
 800a854:	e000ed04 	.word	0xe000ed04

0800a858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a85e:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <vPortExitCritical+0x4c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <vPortExitCritical+0x22>
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	e7fe      	b.n	800a878 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a87a:	4b0a      	ldr	r3, [pc, #40]	; (800a8a4 <vPortExitCritical+0x4c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3b01      	subs	r3, #1
 800a880:	4a08      	ldr	r2, [pc, #32]	; (800a8a4 <vPortExitCritical+0x4c>)
 800a882:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <vPortExitCritical+0x4c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d104      	bne.n	800a896 <vPortExitCritical+0x3e>
 800a88c:	2300      	movs	r3, #0
 800a88e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	2000011c 	.word	0x2000011c
	...

0800a8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8b0:	f3ef 8009 	mrs	r0, PSP
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	4b15      	ldr	r3, [pc, #84]	; (800a910 <pxCurrentTCBConst>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	f01e 0f10 	tst.w	lr, #16
 800a8c0:	bf08      	it	eq
 800a8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8d4:	f380 8811 	msr	BASEPRI, r0
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f7fe ffe4 	bl	80098ac <vTaskSwitchContext>
 800a8e4:	f04f 0000 	mov.w	r0, #0
 800a8e8:	f380 8811 	msr	BASEPRI, r0
 800a8ec:	bc09      	pop	{r0, r3}
 800a8ee:	6819      	ldr	r1, [r3, #0]
 800a8f0:	6808      	ldr	r0, [r1, #0]
 800a8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f6:	f01e 0f10 	tst.w	lr, #16
 800a8fa:	bf08      	it	eq
 800a8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a900:	f380 8809 	msr	PSP, r0
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w

0800a910 <pxCurrentTCBConst>:
 800a910:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop

0800a918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a930:	f7fe ff04 	bl	800973c <xTaskIncrementTick>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a93a:	4b06      	ldr	r3, [pc, #24]	; (800a954 <SysTick_Handler+0x3c>)
 800a93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	2300      	movs	r3, #0
 800a944:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a94c:	bf00      	nop
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	e000ed04 	.word	0xe000ed04

0800a958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a95c:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <vPortSetupTimerInterrupt+0x34>)
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a962:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <vPortSetupTimerInterrupt+0x38>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a968:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <vPortSetupTimerInterrupt+0x3c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a0a      	ldr	r2, [pc, #40]	; (800a998 <vPortSetupTimerInterrupt+0x40>)
 800a96e:	fba2 2303 	umull	r2, r3, r2, r3
 800a972:	099b      	lsrs	r3, r3, #6
 800a974:	4a09      	ldr	r2, [pc, #36]	; (800a99c <vPortSetupTimerInterrupt+0x44>)
 800a976:	3b01      	subs	r3, #1
 800a978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a97a:	4b04      	ldr	r3, [pc, #16]	; (800a98c <vPortSetupTimerInterrupt+0x34>)
 800a97c:	2207      	movs	r2, #7
 800a97e:	601a      	str	r2, [r3, #0]
}
 800a980:	bf00      	nop
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	e000e010 	.word	0xe000e010
 800a990:	e000e018 	.word	0xe000e018
 800a994:	20000000 	.word	0x20000000
 800a998:	10624dd3 	.word	0x10624dd3
 800a99c:	e000e014 	.word	0xe000e014

0800a9a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9b0 <vPortEnableVFP+0x10>
 800a9a4:	6801      	ldr	r1, [r0, #0]
 800a9a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a9aa:	6001      	str	r1, [r0, #0]
 800a9ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9ae:	bf00      	nop
 800a9b0:	e000ed88 	.word	0xe000ed88

0800a9b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ba:	f3ef 8305 	mrs	r3, IPSR
 800a9be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2b0f      	cmp	r3, #15
 800a9c4:	d913      	bls.n	800a9ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9c6:	4a16      	ldr	r2, [pc, #88]	; (800aa20 <vPortValidateInterruptPriority+0x6c>)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9d0:	4b14      	ldr	r3, [pc, #80]	; (800aa24 <vPortValidateInterruptPriority+0x70>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	7afa      	ldrb	r2, [r7, #11]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d209      	bcs.n	800a9ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	607b      	str	r3, [r7, #4]
 800a9ec:	e7fe      	b.n	800a9ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9ee:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <vPortValidateInterruptPriority+0x74>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	; (800aa2c <vPortValidateInterruptPriority+0x78>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d909      	bls.n	800aa12 <vPortValidateInterruptPriority+0x5e>
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	e7fe      	b.n	800aa10 <vPortValidateInterruptPriority+0x5c>
	}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	e000e3f0 	.word	0xe000e3f0
 800aa24:	20000f04 	.word	0x20000f04
 800aa28:	e000ed0c 	.word	0xe000ed0c
 800aa2c:	20000f08 	.word	0x20000f08

0800aa30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	; 0x28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa3c:	f7fe fdc4 	bl	80095c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa40:	4b57      	ldr	r3, [pc, #348]	; (800aba0 <pvPortMalloc+0x170>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d101      	bne.n	800aa4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa48:	f000 f90c 	bl	800ac64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa4c:	4b55      	ldr	r3, [pc, #340]	; (800aba4 <pvPortMalloc+0x174>)
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4013      	ands	r3, r2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f040 808c 	bne.w	800ab72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01c      	beq.n	800aa9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aa60:	2208      	movs	r2, #8
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4413      	add	r3, r2
 800aa66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d013      	beq.n	800aa9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f023 0307 	bic.w	r3, r3, #7
 800aa78:	3308      	adds	r3, #8
 800aa7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <pvPortMalloc+0x6a>
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	e7fe      	b.n	800aa98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d068      	beq.n	800ab72 <pvPortMalloc+0x142>
 800aaa0:	4b41      	ldr	r3, [pc, #260]	; (800aba8 <pvPortMalloc+0x178>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d863      	bhi.n	800ab72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaaa:	4b40      	ldr	r3, [pc, #256]	; (800abac <pvPortMalloc+0x17c>)
 800aaac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aaae:	4b3f      	ldr	r3, [pc, #252]	; (800abac <pvPortMalloc+0x17c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aab4:	e004      	b.n	800aac0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d903      	bls.n	800aad2 <pvPortMalloc+0xa2>
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1f1      	bne.n	800aab6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aad2:	4b33      	ldr	r3, [pc, #204]	; (800aba0 <pvPortMalloc+0x170>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad8:	429a      	cmp	r2, r3
 800aada:	d04a      	beq.n	800ab72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2208      	movs	r2, #8
 800aae2:	4413      	add	r3, r2
 800aae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	1ad2      	subs	r2, r2, r3
 800aaf6:	2308      	movs	r3, #8
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d91e      	bls.n	800ab3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4413      	add	r3, r2
 800ab04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d009      	beq.n	800ab24 <pvPortMalloc+0xf4>
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	e7fe      	b.n	800ab22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	1ad2      	subs	r2, r2, r3
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab36:	69b8      	ldr	r0, [r7, #24]
 800ab38:	f000 f8f6 	bl	800ad28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab3c:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <pvPortMalloc+0x178>)
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	4a18      	ldr	r2, [pc, #96]	; (800aba8 <pvPortMalloc+0x178>)
 800ab48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab4a:	4b17      	ldr	r3, [pc, #92]	; (800aba8 <pvPortMalloc+0x178>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	4b18      	ldr	r3, [pc, #96]	; (800abb0 <pvPortMalloc+0x180>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d203      	bcs.n	800ab5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <pvPortMalloc+0x178>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a15      	ldr	r2, [pc, #84]	; (800abb0 <pvPortMalloc+0x180>)
 800ab5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <pvPortMalloc+0x174>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	431a      	orrs	r2, r3
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab72:	f7fe fd37 	bl	80095e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <pvPortMalloc+0x164>
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e7fe      	b.n	800ab92 <pvPortMalloc+0x162>
	return pvReturn;
 800ab94:	69fb      	ldr	r3, [r7, #28]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3728      	adds	r7, #40	; 0x28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20001acc 	.word	0x20001acc
 800aba4:	20001ad8 	.word	0x20001ad8
 800aba8:	20001ad0 	.word	0x20001ad0
 800abac:	20001ac4 	.word	0x20001ac4
 800abb0:	20001ad4 	.word	0x20001ad4

0800abb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d046      	beq.n	800ac54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abc6:	2308      	movs	r3, #8
 800abc8:	425b      	negs	r3, r3
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	4413      	add	r3, r2
 800abce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	4b20      	ldr	r3, [pc, #128]	; (800ac5c <vPortFree+0xa8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4013      	ands	r3, r2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d109      	bne.n	800abf6 <vPortFree+0x42>
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	e7fe      	b.n	800abf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d009      	beq.n	800ac12 <vPortFree+0x5e>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	60bb      	str	r3, [r7, #8]
 800ac10:	e7fe      	b.n	800ac10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <vPortFree+0xa8>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d019      	beq.n	800ac54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d115      	bne.n	800ac54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <vPortFree+0xa8>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	43db      	mvns	r3, r3
 800ac32:	401a      	ands	r2, r3
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac38:	f7fe fcc6 	bl	80095c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <vPortFree+0xac>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4413      	add	r3, r2
 800ac46:	4a06      	ldr	r2, [pc, #24]	; (800ac60 <vPortFree+0xac>)
 800ac48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac4a:	6938      	ldr	r0, [r7, #16]
 800ac4c:	f000 f86c 	bl	800ad28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac50:	f7fe fcc8 	bl	80095e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac54:	bf00      	nop
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20001ad8 	.word	0x20001ad8
 800ac60:	20001ad0 	.word	0x20001ad0

0800ac64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ac6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac70:	4b27      	ldr	r3, [pc, #156]	; (800ad10 <prvHeapInit+0xac>)
 800ac72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00c      	beq.n	800ac98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3307      	adds	r3, #7
 800ac82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0307 	bic.w	r3, r3, #7
 800ac8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	4a1f      	ldr	r2, [pc, #124]	; (800ad10 <prvHeapInit+0xac>)
 800ac94:	4413      	add	r3, r2
 800ac96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac9c:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <prvHeapInit+0xb0>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <prvHeapInit+0xb0>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acb0:	2208      	movs	r2, #8
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1a9b      	subs	r3, r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4a15      	ldr	r2, [pc, #84]	; (800ad18 <prvHeapInit+0xb4>)
 800acc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acc6:	4b14      	ldr	r3, [pc, #80]	; (800ad18 <prvHeapInit+0xb4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2200      	movs	r2, #0
 800accc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acce:	4b12      	ldr	r3, [pc, #72]	; (800ad18 <prvHeapInit+0xb4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	1ad2      	subs	r2, r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <prvHeapInit+0xb4>)
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4a0a      	ldr	r2, [pc, #40]	; (800ad1c <prvHeapInit+0xb8>)
 800acf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <prvHeapInit+0xbc>)
 800acfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acfc:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <prvHeapInit+0xc0>)
 800acfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20000f0c 	.word	0x20000f0c
 800ad14:	20001ac4 	.word	0x20001ac4
 800ad18:	20001acc 	.word	0x20001acc
 800ad1c:	20001ad4 	.word	0x20001ad4
 800ad20:	20001ad0 	.word	0x20001ad0
 800ad24:	20001ad8 	.word	0x20001ad8

0800ad28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad30:	4b28      	ldr	r3, [pc, #160]	; (800add4 <prvInsertBlockIntoFreeList+0xac>)
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	e002      	b.n	800ad3c <prvInsertBlockIntoFreeList+0x14>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d8f7      	bhi.n	800ad36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d108      	bne.n	800ad6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	441a      	add	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d118      	bne.n	800adb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d00d      	beq.n	800ada6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	441a      	add	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e008      	b.n	800adb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <prvInsertBlockIntoFreeList+0xb0>)
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	e003      	b.n	800adb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d002      	beq.n	800adc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adc6:	bf00      	nop
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20001ac4 	.word	0x20001ac4
 800add8:	20001acc 	.word	0x20001acc

0800addc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ade0:	2200      	movs	r2, #0
 800ade2:	4912      	ldr	r1, [pc, #72]	; (800ae2c <MX_USB_DEVICE_Init+0x50>)
 800ade4:	4812      	ldr	r0, [pc, #72]	; (800ae30 <MX_USB_DEVICE_Init+0x54>)
 800ade6:	f7fc f9c9 	bl	800717c <USBD_Init>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800adf0:	f7f5 fcfc 	bl	80007ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800adf4:	490f      	ldr	r1, [pc, #60]	; (800ae34 <MX_USB_DEVICE_Init+0x58>)
 800adf6:	480e      	ldr	r0, [pc, #56]	; (800ae30 <MX_USB_DEVICE_Init+0x54>)
 800adf8:	f7fc f9f0 	bl	80071dc <USBD_RegisterClass>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d001      	beq.n	800ae06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae02:	f7f5 fcf3 	bl	80007ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae06:	490c      	ldr	r1, [pc, #48]	; (800ae38 <MX_USB_DEVICE_Init+0x5c>)
 800ae08:	4809      	ldr	r0, [pc, #36]	; (800ae30 <MX_USB_DEVICE_Init+0x54>)
 800ae0a:	f7fc f94b 	bl	80070a4 <USBD_CDC_RegisterInterface>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ae14:	f7f5 fcea 	bl	80007ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ae18:	4805      	ldr	r0, [pc, #20]	; (800ae30 <MX_USB_DEVICE_Init+0x54>)
 800ae1a:	f7fc fa06 	bl	800722a <USBD_Start>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ae24:	f7f5 fce2 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ae28:	bf00      	nop
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20000134 	.word	0x20000134
 800ae30:	20001c5c 	.word	0x20001c5c
 800ae34:	20000018 	.word	0x20000018
 800ae38:	20000120 	.word	0x20000120

0800ae3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae40:	2200      	movs	r2, #0
 800ae42:	4905      	ldr	r1, [pc, #20]	; (800ae58 <CDC_Init_FS+0x1c>)
 800ae44:	4805      	ldr	r0, [pc, #20]	; (800ae5c <CDC_Init_FS+0x20>)
 800ae46:	f7fc f942 	bl	80070ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae4a:	4905      	ldr	r1, [pc, #20]	; (800ae60 <CDC_Init_FS+0x24>)
 800ae4c:	4803      	ldr	r0, [pc, #12]	; (800ae5c <CDC_Init_FS+0x20>)
 800ae4e:	f7fc f957 	bl	8007100 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20002314 	.word	0x20002314
 800ae5c:	20001c5c 	.word	0x20001c5c
 800ae60:	20001f2c 	.word	0x20001f2c

0800ae64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae64:	b480      	push	{r7}
 800ae66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	6039      	str	r1, [r7, #0]
 800ae7e:	71fb      	strb	r3, [r7, #7]
 800ae80:	4613      	mov	r3, r2
 800ae82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	2b23      	cmp	r3, #35	; 0x23
 800ae88:	d84a      	bhi.n	800af20 <CDC_Control_FS+0xac>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <CDC_Control_FS+0x1c>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800af21 	.word	0x0800af21
 800ae94:	0800af21 	.word	0x0800af21
 800ae98:	0800af21 	.word	0x0800af21
 800ae9c:	0800af21 	.word	0x0800af21
 800aea0:	0800af21 	.word	0x0800af21
 800aea4:	0800af21 	.word	0x0800af21
 800aea8:	0800af21 	.word	0x0800af21
 800aeac:	0800af21 	.word	0x0800af21
 800aeb0:	0800af21 	.word	0x0800af21
 800aeb4:	0800af21 	.word	0x0800af21
 800aeb8:	0800af21 	.word	0x0800af21
 800aebc:	0800af21 	.word	0x0800af21
 800aec0:	0800af21 	.word	0x0800af21
 800aec4:	0800af21 	.word	0x0800af21
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af21 	.word	0x0800af21
 800aed0:	0800af21 	.word	0x0800af21
 800aed4:	0800af21 	.word	0x0800af21
 800aed8:	0800af21 	.word	0x0800af21
 800aedc:	0800af21 	.word	0x0800af21
 800aee0:	0800af21 	.word	0x0800af21
 800aee4:	0800af21 	.word	0x0800af21
 800aee8:	0800af21 	.word	0x0800af21
 800aeec:	0800af21 	.word	0x0800af21
 800aef0:	0800af21 	.word	0x0800af21
 800aef4:	0800af21 	.word	0x0800af21
 800aef8:	0800af21 	.word	0x0800af21
 800aefc:	0800af21 	.word	0x0800af21
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800af21 	.word	0x0800af21
 800af08:	0800af21 	.word	0x0800af21
 800af0c:	0800af21 	.word	0x0800af21
 800af10:	0800af21 	.word	0x0800af21
 800af14:	0800af21 	.word	0x0800af21
 800af18:	0800af21 	.word	0x0800af21
 800af1c:	0800af21 	.word	0x0800af21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af20:	bf00      	nop
  }

  return (USBD_OK);
 800af22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	4805      	ldr	r0, [pc, #20]	; (800af54 <CDC_Receive_FS+0x24>)
 800af3e:	f7fc f8df 	bl	8007100 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af42:	4804      	ldr	r0, [pc, #16]	; (800af54 <CDC_Receive_FS+0x24>)
 800af44:	f7fc f8f0 	bl	8007128 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800af48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20001c5c 	.word	0x20001c5c

0800af58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4613      	mov	r3, r2
 800af64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
	...

0800af7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	6039      	str	r1, [r7, #0]
 800af86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2212      	movs	r2, #18
 800af8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af8e:	4b03      	ldr	r3, [pc, #12]	; (800af9c <USBD_FS_DeviceDescriptor+0x20>)
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	20000154 	.word	0x20000154

0800afa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	6039      	str	r1, [r7, #0]
 800afaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2204      	movs	r2, #4
 800afb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800afb2:	4b03      	ldr	r3, [pc, #12]	; (800afc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	20000174 	.word	0x20000174

0800afc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	6039      	str	r1, [r7, #0]
 800afce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d105      	bne.n	800afe2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	4907      	ldr	r1, [pc, #28]	; (800aff8 <USBD_FS_ProductStrDescriptor+0x34>)
 800afda:	4808      	ldr	r0, [pc, #32]	; (800affc <USBD_FS_ProductStrDescriptor+0x38>)
 800afdc:	f7fd f8dd 	bl	800819a <USBD_GetString>
 800afe0:	e004      	b.n	800afec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	4904      	ldr	r1, [pc, #16]	; (800aff8 <USBD_FS_ProductStrDescriptor+0x34>)
 800afe6:	4805      	ldr	r0, [pc, #20]	; (800affc <USBD_FS_ProductStrDescriptor+0x38>)
 800afe8:	f7fd f8d7 	bl	800819a <USBD_GetString>
  }
  return USBD_StrDesc;
 800afec:	4b02      	ldr	r3, [pc, #8]	; (800aff8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	200026fc 	.word	0x200026fc
 800affc:	0800bad8 	.word	0x0800bad8

0800b000 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	6039      	str	r1, [r7, #0]
 800b00a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	4904      	ldr	r1, [pc, #16]	; (800b020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b010:	4804      	ldr	r0, [pc, #16]	; (800b024 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b012:	f7fd f8c2 	bl	800819a <USBD_GetString>
  return USBD_StrDesc;
 800b016:	4b02      	ldr	r3, [pc, #8]	; (800b020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	200026fc 	.word	0x200026fc
 800b024:	0800baf0 	.word	0x0800baf0

0800b028 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	6039      	str	r1, [r7, #0]
 800b032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	221a      	movs	r2, #26
 800b038:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b03a:	f000 f855 	bl	800b0e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b03e:	4b02      	ldr	r3, [pc, #8]	; (800b048 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000178 	.word	0x20000178

0800b04c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	6039      	str	r1, [r7, #0]
 800b056:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d105      	bne.n	800b06a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	4907      	ldr	r1, [pc, #28]	; (800b080 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b062:	4808      	ldr	r0, [pc, #32]	; (800b084 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b064:	f7fd f899 	bl	800819a <USBD_GetString>
 800b068:	e004      	b.n	800b074 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	4904      	ldr	r1, [pc, #16]	; (800b080 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b06e:	4805      	ldr	r0, [pc, #20]	; (800b084 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b070:	f7fd f893 	bl	800819a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b074:	4b02      	ldr	r3, [pc, #8]	; (800b080 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	200026fc 	.word	0x200026fc
 800b084:	0800bb04 	.word	0x0800bb04

0800b088 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	6039      	str	r1, [r7, #0]
 800b092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d105      	bne.n	800b0a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	4907      	ldr	r1, [pc, #28]	; (800b0bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b09e:	4808      	ldr	r0, [pc, #32]	; (800b0c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0a0:	f7fd f87b 	bl	800819a <USBD_GetString>
 800b0a4:	e004      	b.n	800b0b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	4904      	ldr	r1, [pc, #16]	; (800b0bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0aa:	4805      	ldr	r0, [pc, #20]	; (800b0c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0ac:	f7fd f875 	bl	800819a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0b0:	4b02      	ldr	r3, [pc, #8]	; (800b0bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	200026fc 	.word	0x200026fc
 800b0c0:	0800bb10 	.word	0x0800bb10

0800b0c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	6039      	str	r1, [r7, #0]
 800b0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	220c      	movs	r2, #12
 800b0d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b0d6:	4b03      	ldr	r3, [pc, #12]	; (800b0e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	20000168 	.word	0x20000168

0800b0e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <Get_SerialNum+0x44>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	; (800b130 <Get_SerialNum+0x48>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b0fa:	4b0e      	ldr	r3, [pc, #56]	; (800b134 <Get_SerialNum+0x4c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4413      	add	r3, r2
 800b106:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b10e:	2208      	movs	r2, #8
 800b110:	4909      	ldr	r1, [pc, #36]	; (800b138 <Get_SerialNum+0x50>)
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f000 f814 	bl	800b140 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b118:	2204      	movs	r2, #4
 800b11a:	4908      	ldr	r1, [pc, #32]	; (800b13c <Get_SerialNum+0x54>)
 800b11c:	68b8      	ldr	r0, [r7, #8]
 800b11e:	f000 f80f 	bl	800b140 <IntToUnicode>
  }
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	1fff7590 	.word	0x1fff7590
 800b130:	1fff7594 	.word	0x1fff7594
 800b134:	1fff7598 	.word	0x1fff7598
 800b138:	2000017a 	.word	0x2000017a
 800b13c:	2000018a 	.word	0x2000018a

0800b140 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b152:	2300      	movs	r3, #0
 800b154:	75fb      	strb	r3, [r7, #23]
 800b156:	e027      	b.n	800b1a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	0f1b      	lsrs	r3, r3, #28
 800b15c:	2b09      	cmp	r3, #9
 800b15e:	d80b      	bhi.n	800b178 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	0f1b      	lsrs	r3, r3, #28
 800b164:	b2da      	uxtb	r2, r3
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	4619      	mov	r1, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	440b      	add	r3, r1
 800b170:	3230      	adds	r2, #48	; 0x30
 800b172:	b2d2      	uxtb	r2, r2
 800b174:	701a      	strb	r2, [r3, #0]
 800b176:	e00a      	b.n	800b18e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	0f1b      	lsrs	r3, r3, #28
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	005b      	lsls	r3, r3, #1
 800b182:	4619      	mov	r1, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	440b      	add	r3, r1
 800b188:	3237      	adds	r2, #55	; 0x37
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	011b      	lsls	r3, r3, #4
 800b192:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	3301      	adds	r3, #1
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	4413      	add	r3, r2
 800b19e:	2200      	movs	r2, #0
 800b1a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	75fb      	strb	r3, [r7, #23]
 800b1a8:	7dfa      	ldrb	r2, [r7, #23]
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d3d3      	bcc.n	800b158 <IntToUnicode+0x18>
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	371c      	adds	r7, #28
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a0d      	ldr	r2, [pc, #52]	; (800b200 <HAL_PCD_MspInit+0x44>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d113      	bne.n	800b1f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <HAL_PCD_MspInit+0x48>)
 800b1d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d2:	4a0c      	ldr	r2, [pc, #48]	; (800b204 <HAL_PCD_MspInit+0x48>)
 800b1d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1d8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1da:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <HAL_PCD_MspInit+0x48>)
 800b1dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2105      	movs	r1, #5
 800b1ea:	2043      	movs	r0, #67	; 0x43
 800b1ec:	f7f5 fe18 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b1f0:	2043      	movs	r0, #67	; 0x43
 800b1f2:	f7f5 fe31 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	40006800 	.word	0x40006800
 800b204:	40021000 	.word	0x40021000

0800b208 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7fc f84e 	bl	80072c0 <USBD_LL_SetupStage>
}
 800b224:	bf00      	nop
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b23e:	78fa      	ldrb	r2, [r7, #3]
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	440b      	add	r3, r1
 800b24c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	78fb      	ldrb	r3, [r7, #3]
 800b254:	4619      	mov	r1, r3
 800b256:	f7fc f886 	bl	8007366 <USBD_LL_DataOutStage>
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	460b      	mov	r3, r1
 800b26c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b274:	78fa      	ldrb	r2, [r7, #3]
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	440b      	add	r3, r1
 800b282:	333c      	adds	r3, #60	; 0x3c
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	78fb      	ldrb	r3, [r7, #3]
 800b288:	4619      	mov	r1, r3
 800b28a:	f7fc f8cf 	bl	800742c <USBD_LL_DataInStage>
}
 800b28e:	bf00      	nop
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fc f9d3 	bl	8007650 <USBD_LL_SOF>
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d001      	beq.n	800b2ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2c6:	f7f5 fa91 	bl	80007ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2d0:	7bfa      	ldrb	r2, [r7, #15]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fc f980 	bl	80075da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fc f939 	bl	8007558 <USBD_LL_Reset>
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fc f97b 	bl	80075fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d005      	beq.n	800b318 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b30c:	4b04      	ldr	r3, [pc, #16]	; (800b320 <HAL_PCD_SuspendCallback+0x30>)
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	4a03      	ldr	r2, [pc, #12]	; (800b320 <HAL_PCD_SuspendCallback+0x30>)
 800b312:	f043 0306 	orr.w	r3, r3, #6
 800b316:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	e000ed00 	.word	0xe000ed00

0800b324 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d007      	beq.n	800b344 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b334:	4b08      	ldr	r3, [pc, #32]	; (800b358 <HAL_PCD_ResumeCallback+0x34>)
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	4a07      	ldr	r2, [pc, #28]	; (800b358 <HAL_PCD_ResumeCallback+0x34>)
 800b33a:	f023 0306 	bic.w	r3, r3, #6
 800b33e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b340:	f000 fa9e 	bl	800b880 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fc f96a 	bl	8007624 <USBD_LL_Resume>
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	e000ed00 	.word	0xe000ed00

0800b35c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b364:	f7f7 fb12 	bl	800298c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b368:	4a2b      	ldr	r2, [pc, #172]	; (800b418 <USBD_LL_Init+0xbc>)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a29      	ldr	r2, [pc, #164]	; (800b418 <USBD_LL_Init+0xbc>)
 800b374:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b378:	4b27      	ldr	r3, [pc, #156]	; (800b418 <USBD_LL_Init+0xbc>)
 800b37a:	4a28      	ldr	r2, [pc, #160]	; (800b41c <USBD_LL_Init+0xc0>)
 800b37c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b37e:	4b26      	ldr	r3, [pc, #152]	; (800b418 <USBD_LL_Init+0xbc>)
 800b380:	2208      	movs	r2, #8
 800b382:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b384:	4b24      	ldr	r3, [pc, #144]	; (800b418 <USBD_LL_Init+0xbc>)
 800b386:	2202      	movs	r2, #2
 800b388:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b38a:	4b23      	ldr	r3, [pc, #140]	; (800b418 <USBD_LL_Init+0xbc>)
 800b38c:	2202      	movs	r2, #2
 800b38e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b390:	4b21      	ldr	r3, [pc, #132]	; (800b418 <USBD_LL_Init+0xbc>)
 800b392:	2200      	movs	r2, #0
 800b394:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b396:	4b20      	ldr	r3, [pc, #128]	; (800b418 <USBD_LL_Init+0xbc>)
 800b398:	2200      	movs	r2, #0
 800b39a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b39c:	4b1e      	ldr	r3, [pc, #120]	; (800b418 <USBD_LL_Init+0xbc>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b3a2:	4b1d      	ldr	r3, [pc, #116]	; (800b418 <USBD_LL_Init+0xbc>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b3a8:	481b      	ldr	r0, [pc, #108]	; (800b418 <USBD_LL_Init+0xbc>)
 800b3aa:	f7f5 fee5 	bl	8001178 <HAL_PCD_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b3b4:	f7f5 fa1a 	bl	80007ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b3be:	2318      	movs	r3, #24
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	f7f7 fa00 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b3ce:	2358      	movs	r3, #88	; 0x58
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2180      	movs	r1, #128	; 0x80
 800b3d4:	f7f7 f9f8 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b3de:	23c0      	movs	r3, #192	; 0xc0
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2181      	movs	r1, #129	; 0x81
 800b3e4:	f7f7 f9f0 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b3ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	f7f7 f9e7 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b400:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b404:	2200      	movs	r2, #0
 800b406:	2182      	movs	r1, #130	; 0x82
 800b408:	f7f7 f9de 	bl	80027c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	200028fc 	.word	0x200028fc
 800b41c:	40006800 	.word	0x40006800

0800b420 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b436:	4618      	mov	r0, r3
 800b438:	f7f5 ffb0 	bl	800139c <HAL_PCD_Start>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b03      	cmp	r3, #3
 800b444:	d816      	bhi.n	800b474 <USBD_LL_Start+0x54>
 800b446:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <USBD_LL_Start+0x2c>)
 800b448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44c:	0800b45d 	.word	0x0800b45d
 800b450:	0800b463 	.word	0x0800b463
 800b454:	0800b469 	.word	0x0800b469
 800b458:	0800b46f 	.word	0x0800b46f
    case HAL_OK :
      usb_status = USBD_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]
    break;
 800b460:	e00b      	b.n	800b47a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b462:	2303      	movs	r3, #3
 800b464:	73fb      	strb	r3, [r7, #15]
    break;
 800b466:	e008      	b.n	800b47a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b468:	2301      	movs	r3, #1
 800b46a:	73fb      	strb	r3, [r7, #15]
    break;
 800b46c:	e005      	b.n	800b47a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b46e:	2303      	movs	r3, #3
 800b470:	73fb      	strb	r3, [r7, #15]
    break;
 800b472:	e002      	b.n	800b47a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b474:	2303      	movs	r3, #3
 800b476:	73fb      	strb	r3, [r7, #15]
    break;
 800b478:	bf00      	nop
  }
  return usb_status;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	4608      	mov	r0, r1
 800b48e:	4611      	mov	r1, r2
 800b490:	461a      	mov	r2, r3
 800b492:	4603      	mov	r3, r0
 800b494:	70fb      	strb	r3, [r7, #3]
 800b496:	460b      	mov	r3, r1
 800b498:	70bb      	strb	r3, [r7, #2]
 800b49a:	4613      	mov	r3, r2
 800b49c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4ac:	78bb      	ldrb	r3, [r7, #2]
 800b4ae:	883a      	ldrh	r2, [r7, #0]
 800b4b0:	78f9      	ldrb	r1, [r7, #3]
 800b4b2:	f7f6 f908 	bl	80016c6 <HAL_PCD_EP_Open>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d817      	bhi.n	800b4f0 <USBD_LL_OpenEP+0x6c>
 800b4c0:	a201      	add	r2, pc, #4	; (adr r2, 800b4c8 <USBD_LL_OpenEP+0x44>)
 800b4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c6:	bf00      	nop
 800b4c8:	0800b4d9 	.word	0x0800b4d9
 800b4cc:	0800b4df 	.word	0x0800b4df
 800b4d0:	0800b4e5 	.word	0x0800b4e5
 800b4d4:	0800b4eb 	.word	0x0800b4eb
    case HAL_OK :
      usb_status = USBD_OK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]
    break;
 800b4dc:	e00b      	b.n	800b4f6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e2:	e008      	b.n	800b4f6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e8:	e005      	b.n	800b4f6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ee:	e002      	b.n	800b4f6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f4:	bf00      	nop
  }
  return usb_status;
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f6 f937 	bl	8001792 <HAL_PCD_EP_Close>
 800b524:	4603      	mov	r3, r0
 800b526:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d816      	bhi.n	800b55c <USBD_LL_CloseEP+0x5c>
 800b52e:	a201      	add	r2, pc, #4	; (adr r2, 800b534 <USBD_LL_CloseEP+0x34>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b545 	.word	0x0800b545
 800b538:	0800b54b 	.word	0x0800b54b
 800b53c:	0800b551 	.word	0x0800b551
 800b540:	0800b557 	.word	0x0800b557
    case HAL_OK :
      usb_status = USBD_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]
    break;
 800b548:	e00b      	b.n	800b562 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b54a:	2303      	movs	r3, #3
 800b54c:	73fb      	strb	r3, [r7, #15]
    break;
 800b54e:	e008      	b.n	800b562 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b550:	2301      	movs	r3, #1
 800b552:	73fb      	strb	r3, [r7, #15]
    break;
 800b554:	e005      	b.n	800b562 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	73fb      	strb	r3, [r7, #15]
    break;
 800b55a:	e002      	b.n	800b562 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	73fb      	strb	r3, [r7, #15]
    break;
 800b560:	bf00      	nop
  }
  return usb_status;
 800b562:	7bfb      	ldrb	r3, [r7, #15]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b578:	2300      	movs	r3, #0
 800b57a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b586:	78fa      	ldrb	r2, [r7, #3]
 800b588:	4611      	mov	r1, r2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7f6 f9e1 	bl	8001952 <HAL_PCD_EP_SetStall>
 800b590:	4603      	mov	r3, r0
 800b592:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	2b03      	cmp	r3, #3
 800b598:	d816      	bhi.n	800b5c8 <USBD_LL_StallEP+0x5c>
 800b59a:	a201      	add	r2, pc, #4	; (adr r2, 800b5a0 <USBD_LL_StallEP+0x34>)
 800b59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a0:	0800b5b1 	.word	0x0800b5b1
 800b5a4:	0800b5b7 	.word	0x0800b5b7
 800b5a8:	0800b5bd 	.word	0x0800b5bd
 800b5ac:	0800b5c3 	.word	0x0800b5c3
    case HAL_OK :
      usb_status = USBD_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b4:	e00b      	b.n	800b5ce <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ba:	e008      	b.n	800b5ce <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c0:	e005      	b.n	800b5ce <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c6:	e002      	b.n	800b5ce <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b5cc:	bf00      	nop
  }
  return usb_status;
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5f2:	78fa      	ldrb	r2, [r7, #3]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f6 fa0b 	bl	8001a12 <HAL_PCD_EP_ClrStall>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	2b03      	cmp	r3, #3
 800b604:	d816      	bhi.n	800b634 <USBD_LL_ClearStallEP+0x5c>
 800b606:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <USBD_LL_ClearStallEP+0x34>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b61d 	.word	0x0800b61d
 800b610:	0800b623 	.word	0x0800b623
 800b614:	0800b629 	.word	0x0800b629
 800b618:	0800b62f 	.word	0x0800b62f
    case HAL_OK :
      usb_status = USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]
    break;
 800b620:	e00b      	b.n	800b63a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b622:	2303      	movs	r3, #3
 800b624:	73fb      	strb	r3, [r7, #15]
    break;
 800b626:	e008      	b.n	800b63a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b628:	2301      	movs	r3, #1
 800b62a:	73fb      	strb	r3, [r7, #15]
    break;
 800b62c:	e005      	b.n	800b63a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b62e:	2303      	movs	r3, #3
 800b630:	73fb      	strb	r3, [r7, #15]
    break;
 800b632:	e002      	b.n	800b63a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	73fb      	strb	r3, [r7, #15]
    break;
 800b638:	bf00      	nop
  }
  return usb_status;
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b656:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	da0c      	bge.n	800b67a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	1c5a      	adds	r2, r3, #1
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	440b      	add	r3, r1
 800b674:	3302      	adds	r3, #2
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	e00b      	b.n	800b692 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b680:	68f9      	ldr	r1, [r7, #12]
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	00db      	lsls	r3, r3, #3
 800b68a:	440b      	add	r3, r1
 800b68c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b690:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
	...

0800b6a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6ba:	78fa      	ldrb	r2, [r7, #3]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f5 ffdc 	bl	800167c <HAL_PCD_SetAddress>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d816      	bhi.n	800b6fc <USBD_LL_SetUSBAddress+0x5c>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <USBD_LL_SetUSBAddress+0x34>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b6e5 	.word	0x0800b6e5
 800b6d8:	0800b6eb 	.word	0x0800b6eb
 800b6dc:	0800b6f1 	.word	0x0800b6f1
 800b6e0:	0800b6f7 	.word	0x0800b6f7
    case HAL_OK :
      usb_status = USBD_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e8:	e00b      	b.n	800b702 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ee:	e008      	b.n	800b702 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6f4:	e005      	b.n	800b702 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6fa:	e002      	b.n	800b702 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b700:	bf00      	nop
  }
  return usb_status;
 800b702:	7bfb      	ldrb	r3, [r7, #15]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	607a      	str	r2, [r7, #4]
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	460b      	mov	r3, r1
 800b71a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b720:	2300      	movs	r3, #0
 800b722:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b72a:	7af9      	ldrb	r1, [r7, #11]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	f7f6 f8cc 	bl	80018cc <HAL_PCD_EP_Transmit>
 800b734:	4603      	mov	r3, r0
 800b736:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b738:	7dbb      	ldrb	r3, [r7, #22]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d816      	bhi.n	800b76c <USBD_LL_Transmit+0x60>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <USBD_LL_Transmit+0x38>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b755 	.word	0x0800b755
 800b748:	0800b75b 	.word	0x0800b75b
 800b74c:	0800b761 	.word	0x0800b761
 800b750:	0800b767 	.word	0x0800b767
    case HAL_OK :
      usb_status = USBD_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	75fb      	strb	r3, [r7, #23]
    break;
 800b758:	e00b      	b.n	800b772 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b75a:	2303      	movs	r3, #3
 800b75c:	75fb      	strb	r3, [r7, #23]
    break;
 800b75e:	e008      	b.n	800b772 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b760:	2301      	movs	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]
    break;
 800b764:	e005      	b.n	800b772 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b766:	2303      	movs	r3, #3
 800b768:	75fb      	strb	r3, [r7, #23]
    break;
 800b76a:	e002      	b.n	800b772 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	75fb      	strb	r3, [r7, #23]
    break;
 800b770:	bf00      	nop
  }
  return usb_status;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	607a      	str	r2, [r7, #4]
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	460b      	mov	r3, r1
 800b78a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b79a:	7af9      	ldrb	r1, [r7, #11]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	f7f6 f83f 	bl	8001822 <HAL_PCD_EP_Receive>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b7a8:	7dbb      	ldrb	r3, [r7, #22]
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d816      	bhi.n	800b7dc <USBD_LL_PrepareReceive+0x60>
 800b7ae:	a201      	add	r2, pc, #4	; (adr r2, 800b7b4 <USBD_LL_PrepareReceive+0x38>)
 800b7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b4:	0800b7c5 	.word	0x0800b7c5
 800b7b8:	0800b7cb 	.word	0x0800b7cb
 800b7bc:	0800b7d1 	.word	0x0800b7d1
 800b7c0:	0800b7d7 	.word	0x0800b7d7
    case HAL_OK :
      usb_status = USBD_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	75fb      	strb	r3, [r7, #23]
    break;
 800b7c8:	e00b      	b.n	800b7e2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	75fb      	strb	r3, [r7, #23]
    break;
 800b7ce:	e008      	b.n	800b7e2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	75fb      	strb	r3, [r7, #23]
    break;
 800b7d4:	e005      	b.n	800b7e2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	75fb      	strb	r3, [r7, #23]
    break;
 800b7da:	e002      	b.n	800b7e2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	75fb      	strb	r3, [r7, #23]
    break;
 800b7e0:	bf00      	nop
  }
  return usb_status;
 800b7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3718      	adds	r7, #24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7fe:	78fa      	ldrb	r2, [r7, #3]
 800b800:	4611      	mov	r1, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7f6 f84a 	bl	800189c <HAL_PCD_EP_GetRxCount>
 800b808:	4603      	mov	r3, r0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	460b      	mov	r3, r1
 800b81e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b820:	78fb      	ldrb	r3, [r7, #3]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <HAL_PCDEx_LPM_Callback+0x18>
 800b826:	2b01      	cmp	r3, #1
 800b828:	d013      	beq.n	800b852 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b82a:	e023      	b.n	800b874 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b834:	f000 f824 	bl	800b880 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b838:	4b10      	ldr	r3, [pc, #64]	; (800b87c <HAL_PCDEx_LPM_Callback+0x68>)
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	4a0f      	ldr	r2, [pc, #60]	; (800b87c <HAL_PCDEx_LPM_Callback+0x68>)
 800b83e:	f023 0306 	bic.w	r3, r3, #6
 800b842:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fb feea 	bl	8007624 <USBD_LL_Resume>
    break;
 800b850:	e010      	b.n	800b874 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fb fece 	bl	80075fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d005      	beq.n	800b872 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b866:	4b05      	ldr	r3, [pc, #20]	; (800b87c <HAL_PCDEx_LPM_Callback+0x68>)
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	4a04      	ldr	r2, [pc, #16]	; (800b87c <HAL_PCDEx_LPM_Callback+0x68>)
 800b86c:	f043 0306 	orr.w	r3, r3, #6
 800b870:	6113      	str	r3, [r2, #16]
    break;
 800b872:	bf00      	nop
}
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	e000ed00 	.word	0xe000ed00

0800b880 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b884:	f7f4 fe4a 	bl	800051c <SystemClock_Config>
}
 800b888:	bf00      	nop
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <__errno>:
 800b88c:	4b01      	ldr	r3, [pc, #4]	; (800b894 <__errno+0x8>)
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20000194 	.word	0x20000194

0800b898 <__libc_init_array>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	4e0d      	ldr	r6, [pc, #52]	; (800b8d0 <__libc_init_array+0x38>)
 800b89c:	4c0d      	ldr	r4, [pc, #52]	; (800b8d4 <__libc_init_array+0x3c>)
 800b89e:	1ba4      	subs	r4, r4, r6
 800b8a0:	10a4      	asrs	r4, r4, #2
 800b8a2:	2500      	movs	r5, #0
 800b8a4:	42a5      	cmp	r5, r4
 800b8a6:	d109      	bne.n	800b8bc <__libc_init_array+0x24>
 800b8a8:	4e0b      	ldr	r6, [pc, #44]	; (800b8d8 <__libc_init_array+0x40>)
 800b8aa:	4c0c      	ldr	r4, [pc, #48]	; (800b8dc <__libc_init_array+0x44>)
 800b8ac:	f000 f8f6 	bl	800ba9c <_init>
 800b8b0:	1ba4      	subs	r4, r4, r6
 800b8b2:	10a4      	asrs	r4, r4, #2
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	42a5      	cmp	r5, r4
 800b8b8:	d105      	bne.n	800b8c6 <__libc_init_array+0x2e>
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8c0:	4798      	blx	r3
 800b8c2:	3501      	adds	r5, #1
 800b8c4:	e7ee      	b.n	800b8a4 <__libc_init_array+0xc>
 800b8c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8ca:	4798      	blx	r3
 800b8cc:	3501      	adds	r5, #1
 800b8ce:	e7f2      	b.n	800b8b6 <__libc_init_array+0x1e>
 800b8d0:	0800bb94 	.word	0x0800bb94
 800b8d4:	0800bb94 	.word	0x0800bb94
 800b8d8:	0800bb94 	.word	0x0800bb94
 800b8dc:	0800bb98 	.word	0x0800bb98

0800b8e0 <malloc>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <malloc+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	f000 b86d 	b.w	800b9c4 <_malloc_r>
 800b8ea:	bf00      	nop
 800b8ec:	20000194 	.word	0x20000194

0800b8f0 <free>:
 800b8f0:	4b02      	ldr	r3, [pc, #8]	; (800b8fc <free+0xc>)
 800b8f2:	4601      	mov	r1, r0
 800b8f4:	6818      	ldr	r0, [r3, #0]
 800b8f6:	f000 b817 	b.w	800b928 <_free_r>
 800b8fa:	bf00      	nop
 800b8fc:	20000194 	.word	0x20000194

0800b900 <memcpy>:
 800b900:	b510      	push	{r4, lr}
 800b902:	1e43      	subs	r3, r0, #1
 800b904:	440a      	add	r2, r1
 800b906:	4291      	cmp	r1, r2
 800b908:	d100      	bne.n	800b90c <memcpy+0xc>
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b910:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b914:	e7f7      	b.n	800b906 <memcpy+0x6>

0800b916 <memset>:
 800b916:	4402      	add	r2, r0
 800b918:	4603      	mov	r3, r0
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d100      	bne.n	800b920 <memset+0xa>
 800b91e:	4770      	bx	lr
 800b920:	f803 1b01 	strb.w	r1, [r3], #1
 800b924:	e7f9      	b.n	800b91a <memset+0x4>
	...

0800b928 <_free_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4605      	mov	r5, r0
 800b92c:	2900      	cmp	r1, #0
 800b92e:	d045      	beq.n	800b9bc <_free_r+0x94>
 800b930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b934:	1f0c      	subs	r4, r1, #4
 800b936:	2b00      	cmp	r3, #0
 800b938:	bfb8      	it	lt
 800b93a:	18e4      	addlt	r4, r4, r3
 800b93c:	f000 f8ac 	bl	800ba98 <__malloc_lock>
 800b940:	4a1f      	ldr	r2, [pc, #124]	; (800b9c0 <_free_r+0x98>)
 800b942:	6813      	ldr	r3, [r2, #0]
 800b944:	4610      	mov	r0, r2
 800b946:	b933      	cbnz	r3, 800b956 <_free_r+0x2e>
 800b948:	6063      	str	r3, [r4, #4]
 800b94a:	6014      	str	r4, [r2, #0]
 800b94c:	4628      	mov	r0, r5
 800b94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b952:	f000 b8a2 	b.w	800ba9a <__malloc_unlock>
 800b956:	42a3      	cmp	r3, r4
 800b958:	d90c      	bls.n	800b974 <_free_r+0x4c>
 800b95a:	6821      	ldr	r1, [r4, #0]
 800b95c:	1862      	adds	r2, r4, r1
 800b95e:	4293      	cmp	r3, r2
 800b960:	bf04      	itt	eq
 800b962:	681a      	ldreq	r2, [r3, #0]
 800b964:	685b      	ldreq	r3, [r3, #4]
 800b966:	6063      	str	r3, [r4, #4]
 800b968:	bf04      	itt	eq
 800b96a:	1852      	addeq	r2, r2, r1
 800b96c:	6022      	streq	r2, [r4, #0]
 800b96e:	6004      	str	r4, [r0, #0]
 800b970:	e7ec      	b.n	800b94c <_free_r+0x24>
 800b972:	4613      	mov	r3, r2
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	b10a      	cbz	r2, 800b97c <_free_r+0x54>
 800b978:	42a2      	cmp	r2, r4
 800b97a:	d9fa      	bls.n	800b972 <_free_r+0x4a>
 800b97c:	6819      	ldr	r1, [r3, #0]
 800b97e:	1858      	adds	r0, r3, r1
 800b980:	42a0      	cmp	r0, r4
 800b982:	d10b      	bne.n	800b99c <_free_r+0x74>
 800b984:	6820      	ldr	r0, [r4, #0]
 800b986:	4401      	add	r1, r0
 800b988:	1858      	adds	r0, r3, r1
 800b98a:	4282      	cmp	r2, r0
 800b98c:	6019      	str	r1, [r3, #0]
 800b98e:	d1dd      	bne.n	800b94c <_free_r+0x24>
 800b990:	6810      	ldr	r0, [r2, #0]
 800b992:	6852      	ldr	r2, [r2, #4]
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	4401      	add	r1, r0
 800b998:	6019      	str	r1, [r3, #0]
 800b99a:	e7d7      	b.n	800b94c <_free_r+0x24>
 800b99c:	d902      	bls.n	800b9a4 <_free_r+0x7c>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	e7d3      	b.n	800b94c <_free_r+0x24>
 800b9a4:	6820      	ldr	r0, [r4, #0]
 800b9a6:	1821      	adds	r1, r4, r0
 800b9a8:	428a      	cmp	r2, r1
 800b9aa:	bf04      	itt	eq
 800b9ac:	6811      	ldreq	r1, [r2, #0]
 800b9ae:	6852      	ldreq	r2, [r2, #4]
 800b9b0:	6062      	str	r2, [r4, #4]
 800b9b2:	bf04      	itt	eq
 800b9b4:	1809      	addeq	r1, r1, r0
 800b9b6:	6021      	streq	r1, [r4, #0]
 800b9b8:	605c      	str	r4, [r3, #4]
 800b9ba:	e7c7      	b.n	800b94c <_free_r+0x24>
 800b9bc:	bd38      	pop	{r3, r4, r5, pc}
 800b9be:	bf00      	nop
 800b9c0:	20001adc 	.word	0x20001adc

0800b9c4 <_malloc_r>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	1ccd      	adds	r5, r1, #3
 800b9c8:	f025 0503 	bic.w	r5, r5, #3
 800b9cc:	3508      	adds	r5, #8
 800b9ce:	2d0c      	cmp	r5, #12
 800b9d0:	bf38      	it	cc
 800b9d2:	250c      	movcc	r5, #12
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	db01      	blt.n	800b9de <_malloc_r+0x1a>
 800b9da:	42a9      	cmp	r1, r5
 800b9dc:	d903      	bls.n	800b9e6 <_malloc_r+0x22>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	6033      	str	r3, [r6, #0]
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
 800b9e6:	f000 f857 	bl	800ba98 <__malloc_lock>
 800b9ea:	4a21      	ldr	r2, [pc, #132]	; (800ba70 <_malloc_r+0xac>)
 800b9ec:	6814      	ldr	r4, [r2, #0]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	b991      	cbnz	r1, 800ba18 <_malloc_r+0x54>
 800b9f2:	4c20      	ldr	r4, [pc, #128]	; (800ba74 <_malloc_r+0xb0>)
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	b91b      	cbnz	r3, 800ba00 <_malloc_r+0x3c>
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f000 f83d 	bl	800ba78 <_sbrk_r>
 800b9fe:	6020      	str	r0, [r4, #0]
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f000 f838 	bl	800ba78 <_sbrk_r>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d124      	bne.n	800ba56 <_malloc_r+0x92>
 800ba0c:	230c      	movs	r3, #12
 800ba0e:	6033      	str	r3, [r6, #0]
 800ba10:	4630      	mov	r0, r6
 800ba12:	f000 f842 	bl	800ba9a <__malloc_unlock>
 800ba16:	e7e4      	b.n	800b9e2 <_malloc_r+0x1e>
 800ba18:	680b      	ldr	r3, [r1, #0]
 800ba1a:	1b5b      	subs	r3, r3, r5
 800ba1c:	d418      	bmi.n	800ba50 <_malloc_r+0x8c>
 800ba1e:	2b0b      	cmp	r3, #11
 800ba20:	d90f      	bls.n	800ba42 <_malloc_r+0x7e>
 800ba22:	600b      	str	r3, [r1, #0]
 800ba24:	50cd      	str	r5, [r1, r3]
 800ba26:	18cc      	adds	r4, r1, r3
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f000 f836 	bl	800ba9a <__malloc_unlock>
 800ba2e:	f104 000b 	add.w	r0, r4, #11
 800ba32:	1d23      	adds	r3, r4, #4
 800ba34:	f020 0007 	bic.w	r0, r0, #7
 800ba38:	1ac3      	subs	r3, r0, r3
 800ba3a:	d0d3      	beq.n	800b9e4 <_malloc_r+0x20>
 800ba3c:	425a      	negs	r2, r3
 800ba3e:	50e2      	str	r2, [r4, r3]
 800ba40:	e7d0      	b.n	800b9e4 <_malloc_r+0x20>
 800ba42:	428c      	cmp	r4, r1
 800ba44:	684b      	ldr	r3, [r1, #4]
 800ba46:	bf16      	itet	ne
 800ba48:	6063      	strne	r3, [r4, #4]
 800ba4a:	6013      	streq	r3, [r2, #0]
 800ba4c:	460c      	movne	r4, r1
 800ba4e:	e7eb      	b.n	800ba28 <_malloc_r+0x64>
 800ba50:	460c      	mov	r4, r1
 800ba52:	6849      	ldr	r1, [r1, #4]
 800ba54:	e7cc      	b.n	800b9f0 <_malloc_r+0x2c>
 800ba56:	1cc4      	adds	r4, r0, #3
 800ba58:	f024 0403 	bic.w	r4, r4, #3
 800ba5c:	42a0      	cmp	r0, r4
 800ba5e:	d005      	beq.n	800ba6c <_malloc_r+0xa8>
 800ba60:	1a21      	subs	r1, r4, r0
 800ba62:	4630      	mov	r0, r6
 800ba64:	f000 f808 	bl	800ba78 <_sbrk_r>
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d0cf      	beq.n	800ba0c <_malloc_r+0x48>
 800ba6c:	6025      	str	r5, [r4, #0]
 800ba6e:	e7db      	b.n	800ba28 <_malloc_r+0x64>
 800ba70:	20001adc 	.word	0x20001adc
 800ba74:	20001ae0 	.word	0x20001ae0

0800ba78 <_sbrk_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4c06      	ldr	r4, [pc, #24]	; (800ba94 <_sbrk_r+0x1c>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4605      	mov	r5, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	f7f4 fff4 	bl	8000a70 <_sbrk>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d102      	bne.n	800ba92 <_sbrk_r+0x1a>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	b103      	cbz	r3, 800ba92 <_sbrk_r+0x1a>
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	20002bf0 	.word	0x20002bf0

0800ba98 <__malloc_lock>:
 800ba98:	4770      	bx	lr

0800ba9a <__malloc_unlock>:
 800ba9a:	4770      	bx	lr

0800ba9c <_init>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	bf00      	nop
 800baa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa2:	bc08      	pop	{r3}
 800baa4:	469e      	mov	lr, r3
 800baa6:	4770      	bx	lr

0800baa8 <_fini>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	bf00      	nop
 800baac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baae:	bc08      	pop	{r3}
 800bab0:	469e      	mov	lr, r3
 800bab2:	4770      	bx	lr
