
USB_serial_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be6c  0800be6c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be74  0800be74  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800be7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a04  200001f8  0800c074  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bfc  0800c074  00022bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bdb9  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fbe  00000000  00000000  0004bfe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d48  00000000  00000000  00050fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b10  00000000  00000000  00052ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007494  00000000  00000000  000547f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aaaf  00000000  00000000  0005bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9bb8  00000000  00000000  0007673b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001502f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b38  00000000  00000000  00150370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd6c 	.word	0x0800bd6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800bd6c 	.word	0x0800bd6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcdf 	bl	8000e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f826 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8e8 	bl	80006b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8b6 	bl	8000650 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f007 ffca 	bl	800847c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <main+0x44>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	480a      	ldr	r0, [pc, #40]	; (8000518 <main+0x48>)
 80004ee:	f008 f82f 	bl	8008550 <osThreadNew>
 80004f2:	4602      	mov	r2, r0
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x4c>)
 80004f6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(LED_flash, NULL, NULL);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x50>)
 80004fe:	f008 f827 	bl	8008550 <osThreadNew>
  osThreadNew(LCD_text, NULL, NULL);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <main+0x54>)
 8000508:	f008 f822 	bl	8008550 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800050c:	f007 ffea 	bl	80084e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x40>
 8000512:	bf00      	nop
 8000514:	0800be00 	.word	0x0800be00
 8000518:	08000771 	.word	0x08000771
 800051c:	20001b48 	.word	0x20001b48
 8000520:	08000a81 	.word	0x08000a81
 8000524:	08000dd1 	.word	0x08000dd1

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0ac      	sub	sp, #176	; 0xb0
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f00b fb55 	bl	800bbe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2254      	movs	r2, #84	; 0x54
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f00b fb47 	bl	800bbe6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000558:	f002 fad0 	bl	8002afc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800055c:	4b3b      	ldr	r3, [pc, #236]	; (800064c <SystemClock_Config+0x124>)
 800055e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000562:	4a3a      	ldr	r2, [pc, #232]	; (800064c <SystemClock_Config+0x124>)
 8000564:	f023 0318 	bic.w	r3, r3, #24
 8000568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800056c:	2314      	movs	r3, #20
 800056e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000580:	2360      	movs	r3, #96	; 0x60
 8000582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000598:	2310      	movs	r3, #16
 800059a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059e:	2307      	movs	r3, #7
 80005a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fb25 	bl	8002c04 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f8f2 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 ff30 	bl	8003444 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ea:	f000 f8dd 	bl	80007a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 80005ee:	f242 0302 	movw	r3, #8194	; 0x2002
 80005f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005fe:	2301      	movs	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000606:	2318      	movs	r3, #24
 8000608:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800060a:	2307      	movs	r3, #7
 800060c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000616:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800061a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f946 	bl	80038b0 <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x106>
  {
    Error_Handler();
 800062a:	f000 f8bd 	bl	80007a8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f002 fa81 	bl	8002b38 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800063c:	f000 f8b4 	bl	80007a8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000640:	f003 fb28 	bl	8003c94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000644:	bf00      	nop
 8000646:	37b0      	adds	r7, #176	; 0xb0
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <MX_USART2_UART_Init+0x5c>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800065c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_USART2_UART_Init+0x58>)
 8000694:	f003 fe7e 	bl	8004394 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 f883 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20001b4c 	.word	0x20001b4c
 80006ac:	40004400 	.word	0x40004400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a27      	ldr	r2, [pc, #156]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <MX_GPIO_Init+0xb8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_GPIO_Init+0xb8>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800070e:	2200      	movs	r2, #0
 8000710:	21f3      	movs	r1, #243	; 0xf3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f000 fe43 	bl	80013a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2108      	movs	r1, #8
 800071e:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_GPIO_Init+0xbc>)
 8000720:	f000 fe3e 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000724:	23f3      	movs	r3, #243	; 0xf3
 8000726:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fcc5 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000742:	2308      	movs	r3, #8
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xbc>)
 800075a:	f000 fcb7 	bl	80010cc <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400

08000770 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000778:	f00a fc4e 	bl	800b018 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f007 ff8d 	bl	800869c <osDelay>
 8000782:	e7fb      	b.n	800077c <StartDefaultTask+0xc>

08000784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d101      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000796:	f000 fb97 	bl	8000ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ae:	e7fe      	b.n	80007ae <Error_Handler+0x6>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_MspInit+0x4c>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6613      	str	r3, [r2, #96]	; 0x60
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <HAL_MspInit+0x4c>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_MspInit+0x4c>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_MspInit+0x4c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6593      	str	r3, [r2, #88]	; 0x58
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	210f      	movs	r1, #15
 80007ea:	f06f 0001 	mvn.w	r0, #1
 80007ee:	f000 fc43 	bl	8001078 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <HAL_UART_MspInit+0xa0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d13a      	bne.n	8000898 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <HAL_UART_MspInit+0xa4>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <HAL_UART_MspInit+0xa4>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	6593      	str	r3, [r2, #88]	; 0x58
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_UART_MspInit+0xa4>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_UART_MspInit+0xa4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_UART_MspInit+0xa4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_UART_MspInit+0xa4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000852:	2304      	movs	r3, #4
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000862:	2307      	movs	r3, #7
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 fc2c 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000886:	2303      	movs	r3, #3
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 fc1a 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2019      	movs	r0, #25
 80008be:	f000 fbdb 	bl	8001078 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008c2:	2019      	movs	r0, #25
 80008c4:	f000 fbf4 	bl	80010b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <HAL_InitTick+0x9c>)
 80008ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <HAL_InitTick+0x9c>)
 80008ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d2:	6613      	str	r3, [r2, #96]	; 0x60
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_InitTick+0x9c>)
 80008d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e0:	f107 0210 	add.w	r2, r7, #16
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 ff4e 	bl	800378c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008f0:	f002 ff36 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 80008f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <HAL_InitTick+0xa0>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3b01      	subs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0xa4>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <HAL_InitTick+0xa8>)
 8000908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_InitTick+0xa4>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_InitTick+0xa4>)
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_InitTick+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_InitTick+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_InitTick+0xa4>)
 8000926:	f003 fab5 	bl	8003e94 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_InitTick+0xa4>)
 8000932:	f003 fb11 	bl	8003f58 <HAL_TIM_Base_Start_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	431bde83 	.word	0x431bde83
 800094c:	20001bcc 	.word	0x20001bcc
 8000950:	40012c00 	.word	0x40012c00

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000986:	f003 fb3b 	bl	8004000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20001bcc 	.word	0x20001bcc

08000994 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <USB_IRQHandler+0x10>)
 800099a:	f000 fe4d 	bl	8001638 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20002904 	.word	0x20002904

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f00b f8c0 	bl	800bb5c <__errno>
 80009dc:	4602      	mov	r2, r0
 80009de:	230c      	movs	r3, #12
 80009e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20010000 	.word	0x20010000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	20000214 	.word	0x20000214
 8000a10:	20002c00 	.word	0x20002c00

08000a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <SystemInit+0x64>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <SystemInit+0x64>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <SystemInit+0x68>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <SystemInit+0x68>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <SystemInit+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <SystemInit+0x68>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <SystemInit+0x68>)
 8000a40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <SystemInit+0x68>)
 8000a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <SystemInit+0x68>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <SystemInit+0x68>)
 8000a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <SystemInit+0x68>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SystemInit+0x64>)
 8000a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LED_flash>:
void LCD_add(char usb_char);


//LED Flash task
void LED_flash(void *pvParameters)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	const uint32_t LED_period1 = 900;
 8000a88:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000a8c:	613b      	str	r3, [r7, #16]
	const uint32_t LED_period2 = 100;
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	60fb      	str	r3, [r7, #12]

	_Bool LED_out = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]
	for(;;)
	{
		LED_out = LED_out ^ 1;
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	f083 0301 	eor.w	r3, r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf14      	ite	ne
 8000aa2:	2301      	movne	r3, #1
 8000aa4:	2300      	moveq	r3, #0
 8000aa6:	75fb      	strb	r3, [r7, #23]

		if (LED_out==0)
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d008      	beq.n	8000ac6 <LED_flash+0x46>
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <LED_flash+0x58>)
 8000aba:	f000 fc71 	bl	80013a0 <HAL_GPIO_WritePin>
			osDelay(LED_period1);
 8000abe:	6938      	ldr	r0, [r7, #16]
 8000ac0:	f007 fdec 	bl	800869c <osDelay>
 8000ac4:	e7e7      	b.n	8000a96 <LED_flash+0x16>
		}
		else
		{
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <LED_flash+0x58>)
 8000acc:	f000 fc68 	bl	80013a0 <HAL_GPIO_WritePin>
			osDelay(LED_period2);
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f007 fde3 	bl	800869c <osDelay>
		LED_out = LED_out ^ 1;
 8000ad6:	e7de      	b.n	8000a96 <LED_flash+0x16>
 8000ad8:	48000400 	.word	0x48000400

08000adc <data_bus_write>:
	}
}

//PA4-7 are the data bits to be written
void data_bus_write(uint8_t data)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	uint16_t lcd_data = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	81fb      	strh	r3, [r7, #14]
	lcd_data = data << 4;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	81fb      	strh	r3, [r7, #14]
	uint16_t tmp = GPIOA->IDR;
 8000af2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	81bb      	strh	r3, [r7, #12]
	tmp = tmp & 0xFF0F;
 8000afa:	89bb      	ldrh	r3, [r7, #12]
 8000afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b00:	81bb      	strh	r3, [r7, #12]
	tmp |= lcd_data;
 8000b02:	89ba      	ldrh	r2, [r7, #12]
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	81bb      	strh	r3, [r7, #12]
	GPIOA->ODR = tmp;
 8000b0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b0e:	89bb      	ldrh	r3, [r7, #12]
 8000b10:	6153      	str	r3, [r2, #20]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <set_E>:

void set_E(_Bool f)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, f);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fc35 	bl	80013a0 <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <set_RS>:

void set_RS(_Bool f)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, f);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 fc25 	bl	80013a0 <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <LCD_send_now>:

//initialise the LCD before setting 4 bit interface
void LCD_send_now(uint8_t inst)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
    //minimum lcd_wait 5 ms
	uint16_t lcd_wait = 5;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	81fb      	strh	r3, [r7, #14]
	data_bus_write(inst);
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffb4 	bl	8000adc <data_bus_write>
    set_E(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ffd2 	bl	8000b1e <set_E>
    osDelay(lcd_wait);
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 fd8d 	bl	800869c <osDelay>
    set_E(0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ffcb 	bl	8000b1e <set_E>

    osDelay(lcd_wait);
 8000b88:	89fb      	ldrh	r3, [r7, #14]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f007 fd86 	bl	800869c <osDelay>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <LCD_send_bits>:

//send upper 4 bits first
void LCD_send_bits(uint8_t value)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
    //minimum wait_time = 0.00001;
    uint16_t wait_time = 1;	//1 ms, could be less
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	81fb      	strh	r3, [r7, #14]

    data_bus_write(value >> 4);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	091b      	lsrs	r3, r3, #4
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff95 	bl	8000adc <data_bus_write>
    set_E(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff ffb3 	bl	8000b1e <set_E>
    osDelay(wait_time);
 8000bb8:	89fb      	ldrh	r3, [r7, #14]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f007 fd6e 	bl	800869c <osDelay>
    set_E(0);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ffac 	bl	8000b1e <set_E>
    osDelay(wait_time);
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 fd67 	bl	800869c <osDelay>

    data_bus_write(value & 0x0F);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff80 	bl	8000adc <data_bus_write>
    set_E(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff ff9e 	bl	8000b1e <set_E>
    osDelay(wait_time);
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f007 fd59 	bl	800869c <osDelay>
    set_E(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff97 	bl	8000b1e <set_E>
    osDelay(wait_time);
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f007 fd52 	bl	800869c <osDelay>
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <set_position>:


void set_position(uint8_t pos)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    set_RS(0);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff ff97 	bl	8000b3e <set_RS>
    LCD_send_bits(0x80 | pos);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ffbd 	bl	8000b98 <LCD_send_bits>
    set_RS(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff ff8d 	bl	8000b3e <set_RS>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <write_text>:

//zero marks the end of the string
//wrap message to second line if necessary
//line 1: 0x00-0x0f, line 2: 0x40-0x4f
void write_text(uint8_t pos, char *str)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j=0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73bb      	strb	r3, [r7, #14]

    set_position(pos);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffde 	bl	8000c00 <set_position>
    set_RS(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ff7a 	bl	8000b3e <set_RS>
    i = str[j];
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	73fb      	strb	r3, [r7, #15]
    while (i)
 8000c54:	e024      	b.n	8000ca0 <write_text+0x74>
    {
        LCD_send_bits(i);
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff9d 	bl	8000b98 <LCD_send_bits>
        pos++;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	3301      	adds	r3, #1
 8000c62:	71fb      	strb	r3, [r7, #7]
        if (pos < 0x10)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d912      	bls.n	8000c90 <write_text+0x64>
        {
        	//nothing to do
        }
        else if (pos < 0x40)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c6e:	d806      	bhi.n	8000c7e <write_text+0x52>
        {
        	pos = 0x40;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	71fb      	strb	r3, [r7, #7]
        	set_position(pos);
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffc2 	bl	8000c00 <set_position>
 8000c7c:	e008      	b.n	8000c90 <write_text+0x64>
        }
        else if (pos < 0x50)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b4f      	cmp	r3, #79	; 0x4f
 8000c82:	d905      	bls.n	8000c90 <write_text+0x64>
        {
        	//nothing to do
        }
        else
        {
        	pos = 0x00;
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
        	set_position(pos);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffb8 	bl	8000c00 <set_position>
        }

        j++;
 8000c90:	7bbb      	ldrb	r3, [r7, #14]
 8000c92:	3301      	adds	r3, #1
 8000c94:	73bb      	strb	r3, [r7, #14]
        i = str[j];
 8000c96:	7bbb      	ldrb	r3, [r7, #14]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	73fb      	strb	r3, [r7, #15]
    while (i)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1d7      	bne.n	8000c56 <write_text+0x2a>
    }
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <LCD_init>:

void LCD_init(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
    //minimum instruction_time = 40 us
    uint16_t instruction_time = 1 ;	//could be less
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	80fb      	strh	r3, [r7, #6]
    data_bus_write(0);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff0f 	bl	8000adc <data_bus_write>
    set_E(0);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff2d 	bl	8000b1e <set_E>
    set_RS(0);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff ff3a 	bl	8000b3e <set_RS>

    //initialise 4 bit data
    LCD_send_now(0x03);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f7ff ff47 	bl	8000b5e <LCD_send_now>
    LCD_send_now(0x03);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f7ff ff44 	bl	8000b5e <LCD_send_now>
    LCD_send_now(0x03);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f7ff ff41 	bl	8000b5e <LCD_send_now>
    LCD_send_now(0x02);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff ff3e 	bl	8000b5e <LCD_send_now>
    //now in 4 bit mode
    LCD_send_bits(0x20);
 8000ce2:	2020      	movs	r0, #32
 8000ce4:	f7ff ff58 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f007 fcd6 	bl	800869c <osDelay>
    LCD_send_bits(0x28);    // 2 lines, 5x8
 8000cf0:	2028      	movs	r0, #40	; 0x28
 8000cf2:	f7ff ff51 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f007 fccf 	bl	800869c <osDelay>
    LCD_send_bits(0x08);    // display off
 8000cfe:	2008      	movs	r0, #8
 8000d00:	f7ff ff4a 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f007 fcc8 	bl	800869c <osDelay>
    LCD_send_bits(0x01);    // display clear
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff43 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f007 fcc1 	bl	800869c <osDelay>
    LCD_send_bits(0x06);    // entry mode?
 8000d1a:	2006      	movs	r0, #6
 8000d1c:	f7ff ff3c 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 fcba 	bl	800869c <osDelay>
    LCD_send_bits(0x02);    // return cursor to home
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f7ff ff35 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 fcb3 	bl	800869c <osDelay>
    LCD_send_bits(0x0C);    // display on, cursor on
 8000d36:	200c      	movs	r0, #12
 8000d38:	f7ff ff2e 	bl	8000b98 <LCD_send_bits>
    osDelay(instruction_time);
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f007 fcac 	bl	800869c <osDelay>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <LCD_clear>:
	return half;
}

//File the LCD buffer with spaces and a final null terminator
void LCD_clear(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i=0; i < (lcd_buffer_size-1); i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e006      	b.n	8000d66 <LCD_clear+0x1a>
	{
		LCD_line[i] = ' ';
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LCD_clear+0x3c>)
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < (lcd_buffer_size-1); i++)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	3301      	adds	r3, #1
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	d9f5      	bls.n	8000d58 <LCD_clear+0xc>
	}
	LCD_line[i] = 0;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <LCD_clear+0x3c>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	54d1      	strb	r1, [r2, r3]
	lcd_position = 0;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <LCD_clear+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000218 	.word	0x20000218
 8000d8c:	20000239 	.word	0x20000239

08000d90 <LCD_add>:

//add a character to the LCD buffer, if it is printable
void LCD_add(char usb_char)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	if (lcd_position == (lcd_buffer_size-1) )
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <LCD_add+0x38>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b20      	cmp	r3, #32
 8000da0:	d00b      	beq.n	8000dba <LCD_add+0x2a>
	{
		//no more space,
	}
	else
	{
		LCD_line[lcd_position] = usb_char;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <LCD_add+0x38>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <LCD_add+0x3c>)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	5453      	strb	r3, [r2, r1]
		lcd_position++;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <LCD_add+0x38>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <LCD_add+0x38>)
 8000db8:	701a      	strb	r2, [r3, #0]
	}
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000239 	.word	0x20000239
 8000dcc:	20000218 	.word	0x20000218

08000dd0 <LCD_text>:

//USB to LCD text task
void LCD_text(void *pvParameters)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	LCD_init();
 8000dd8:	f7ff ff69 	bl	8000cae <LCD_init>
	//will need to be preceded by set_RS(1)
	//the function write_text does this automatically

    //try a write
    {
		char greeting[] = "USB serial text";
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <LCD_text+0x6c>)
 8000dde:	f107 040c 	add.w	r4, r7, #12
 8000de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        write_text(0, greeting);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ff1c 	bl	8000c2c <write_text>

    for (;;)
    {

    	//USB data, write to LCD when CR receive, drop all non-printing chars
    	uint8_t num_usb_bytes = usb_check_buffer();
 8000df4:	f00a f882 	bl	800aefc <usb_check_buffer>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	77fb      	strb	r3, [r7, #31]
    	if (num_usb_bytes)
 8000dfc:	7ffb      	ldrb	r3, [r7, #31]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f8      	beq.n	8000df4 <LCD_text+0x24>
    	{
    		while (num_usb_bytes)
 8000e02:	e016      	b.n	8000e32 <LCD_text+0x62>
    		{
				char usb_data = usb_get_byte();
 8000e04:	f00a f8a6 	bl	800af54 <usb_get_byte>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	77bb      	strb	r3, [r7, #30]
				if (usb_data == 13)	//CR
 8000e0c:	7fbb      	ldrb	r3, [r7, #30]
 8000e0e:	2b0d      	cmp	r3, #13
 8000e10:	d105      	bne.n	8000e1e <LCD_text+0x4e>
				{
					write_text(0, LCD_line);
 8000e12:	490b      	ldr	r1, [pc, #44]	; (8000e40 <LCD_text+0x70>)
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff ff09 	bl	8000c2c <write_text>
					LCD_clear();
 8000e1a:	f7ff ff97 	bl	8000d4c <LCD_clear>
				}
				if (usb_data >= ' ' )
 8000e1e:	7fbb      	ldrb	r3, [r7, #30]
 8000e20:	2b1f      	cmp	r3, #31
 8000e22:	d903      	bls.n	8000e2c <LCD_text+0x5c>
				{
					LCD_add(usb_data);
 8000e24:	7fbb      	ldrb	r3, [r7, #30]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ffb2 	bl	8000d90 <LCD_add>
				}
				num_usb_bytes--;
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	77fb      	strb	r3, [r7, #31]
    		while (num_usb_bytes)
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e5      	bne.n	8000e04 <LCD_text+0x34>
    {
 8000e38:	e7dc      	b.n	8000df4 <LCD_text+0x24>
 8000e3a:	bf00      	nop
 8000e3c:	0800bd90 	.word	0x0800bd90
 8000e40:	20000218 	.word	0x20000218

08000e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff fde4 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e4e:	e003      	b.n	8000e58 <LoopCopyDataInit>

08000e50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e56:	3104      	adds	r1, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e60:	d3f6      	bcc.n	8000e50 <CopyDataInit>
	ldr	r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e64:	e002      	b.n	8000e6c <LoopFillZerobss>

08000e66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e68:	f842 3b04 	str.w	r3, [r2], #4

08000e6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <LoopForever+0x16>)
	cmp	r2, r3
 8000e6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e70:	d3f9      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f00a fe79 	bl	800bb68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e76:	f7ff fb2b 	bl	80004d0 <main>

08000e7a <LoopForever>:

LoopForever:
    b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000e80:	0800be7c 	.word	0x0800be7c
	ldr	r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e88:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8000e8c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8000e90:	20002bfc 	.word	0x20002bfc

08000e94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_IRQHandler>

08000e96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8de 	bl	8001062 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fcfe 	bl	80008a8 <HAL_InitTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	e001      	b.n	8000ebc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb8:	f7ff fc7a 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20001c18 	.word	0x20001c18

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20001c18 	.word	0x20001c18

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff4c 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108a:	f7ff ff61 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 800108e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	6978      	ldr	r0, [r7, #20]
 8001096:	f7ff ffb1 	bl	8000ffc <NVIC_EncodePriority>
 800109a:	4602      	mov	r2, r0
 800109c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff80 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff54 	bl	8000f6c <__NVIC_EnableIRQ>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e148      	b.n	800136e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 813a 	beq.w	8001368 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d00b      	beq.n	8001114 <HAL_GPIO_Init+0x48>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001108:	2b11      	cmp	r3, #17
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b12      	cmp	r3, #18
 8001112:	d130      	bne.n	8001176 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114a:	2201      	movs	r2, #1
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f003 0201 	and.w	r2, r3, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0xea>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d123      	bne.n	80011fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	6939      	ldr	r1, [r7, #16]
 80011fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0203 	and.w	r2, r3, #3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8094 	beq.w	8001368 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <HAL_GPIO_Init+0x2c0>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x2c0>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6613      	str	r3, [r2, #96]	; 0x60
 800124c:	4b4f      	ldr	r3, [pc, #316]	; (800138c <HAL_GPIO_Init+0x2c0>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001258:	4a4d      	ldr	r2, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x2c4>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001282:	d00d      	beq.n	80012a0 <HAL_GPIO_Init+0x1d4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a43      	ldr	r2, [pc, #268]	; (8001394 <HAL_GPIO_Init+0x2c8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x1d0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a42      	ldr	r2, [pc, #264]	; (8001398 <HAL_GPIO_Init+0x2cc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d101      	bne.n	8001298 <HAL_GPIO_Init+0x1cc>
 8001294:	2302      	movs	r3, #2
 8001296:	e004      	b.n	80012a2 <HAL_GPIO_Init+0x1d6>
 8001298:	2307      	movs	r3, #7
 800129a:	e002      	b.n	80012a2 <HAL_GPIO_Init+0x1d6>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <HAL_GPIO_Init+0x1d6>
 80012a0:	2300      	movs	r3, #0
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	f002 0203 	and.w	r2, r2, #3
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	4093      	lsls	r3, r2
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b2:	4937      	ldr	r1, [pc, #220]	; (8001390 <HAL_GPIO_Init+0x2c4>)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e4:	4a2d      	ldr	r2, [pc, #180]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	f47f aeaf 	bne.w	80010dc <HAL_GPIO_Init+0x10>
  }
}
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	48000400 	.word	0x48000400
 8001398:	48000800 	.word	0x48000800
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b08b      	sub	sp, #44	; 0x2c
 80013d4:	af06      	add	r7, sp, #24
 80013d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e104      	b.n	80015ec <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f00a f848 	bl	800b48c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2203      	movs	r2, #3
 8001400:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fbab 	bl	8004b64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	687e      	ldr	r6, [r7, #4]
 8001416:	466d      	mov	r5, sp
 8001418:	f106 0410 	add.w	r4, r6, #16
 800141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	602b      	str	r3, [r5, #0]
 8001424:	1d33      	adds	r3, r6, #4
 8001426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001428:	6838      	ldr	r0, [r7, #0]
 800142a:	f003 fb73 	bl	8004b14 <USB_CoreInit>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0d5      	b.n	80015ec <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fba7 	bl	8004b9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e04c      	b.n	80014ec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3301      	adds	r3, #1
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	b298      	uxth	r0, r3
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	3336      	adds	r3, #54	; 0x36
 8001490:	4602      	mov	r2, r0
 8001492:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3303      	adds	r3, #3
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3338      	adds	r3, #56	; 0x38
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	333c      	adds	r3, #60	; 0x3c
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	3340      	adds	r3, #64	; 0x40
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	3301      	adds	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3ad      	bcc.n	8001452 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e044      	b.n	8001586 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	440b      	add	r3, r1
 8001536:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	3301      	adds	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d3b5      	bcc.n	80014fc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	687e      	ldr	r6, [r7, #4]
 8001598:	466d      	mov	r5, sp
 800159a:	f106 0410 	add.w	r4, r6, #16
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	602b      	str	r3, [r5, #0]
 80015a6:	1d33      	adds	r3, r6, #4
 80015a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f003 fb02 	bl	8004bb4 <USB_DevInit>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e014      	b.n	80015ec <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d102      	bne.n	80015e0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f001 fa63 	bl	8002aa6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 fabb 	bl	8006b60 <USB_DevDisconnect>

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_PCD_Start+0x16>
 8001606:	2302      	movs	r3, #2
 8001608:	e012      	b.n	8001630 <HAL_PCD_Start+0x3c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fa8d 	bl	8004b36 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f005 fa86 	bl	8006b32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f005 faa0 	bl	8006b8a <USB_ReadInterrupts>
 800164a:	4603      	mov	r3, r0
 800164c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001654:	d102      	bne.n	800165c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 fb5b 	bl	8001d12 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f005 fa92 	bl	8006b8a <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001670:	d112      	bne.n	8001698 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001684:	b292      	uxth	r2, r2
 8001686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f009 ff79 	bl	800b582 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f91e 	bl	80018d4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fa74 	bl	8006b8a <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016ac:	d10b      	bne.n	80016c6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fa5d 	bl	8006b8a <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016da:	d10b      	bne.n	80016f4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 fa46 	bl	8006b8a <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001708:	d133      	bne.n	8001772 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0204 	bic.w	r2, r2, #4
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0208 	bic.w	r2, r2, #8
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800174c:	2100      	movs	r1, #0
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f00a f9c8 	bl	800bae4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f009 ff4d 	bl	800b5f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800176c:	b292      	uxth	r2, r2
 800176e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 fa07 	bl	8006b8a <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001786:	d126      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0208 	orr.w	r2, r2, #8
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b2:	b292      	uxth	r2, r2
 80017b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0204 	orr.w	r2, r2, #4
 80017ca:	b292      	uxth	r2, r2
 80017cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f009 fef5 	bl	800b5c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 f9d5 	bl	8006b8a <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b80      	cmp	r3, #128	; 0x80
 80017e8:	d13f      	bne.n	800186a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fc:	b292      	uxth	r2, r2
 80017fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d12b      	bne.n	8001864 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0204 	orr.w	r2, r2, #4
 800181e:	b292      	uxth	r2, r2
 8001820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0208 	orr.w	r2, r2, #8
 8001836:	b292      	uxth	r2, r2
 8001838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800184c:	b29b      	uxth	r3, r3
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800185a:	2101      	movs	r1, #1
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f00a f941 	bl	800bae4 <HAL_PCDEx_LPM_Callback>
 8001862:	e002      	b.n	800186a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f009 feab 	bl	800b5c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f005 f98b 	bl	8006b8a <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187e:	d10e      	bne.n	800189e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001892:	b292      	uxth	r2, r2
 8001894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f009 fe64 	bl	800b566 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 f971 	bl	8006b8a <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b2:	d10b      	bne.n	80018cc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018bc:	b29a      	uxth	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c6:	b292      	uxth	r2, r2
 80018c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_PCD_SetAddress+0x1a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e013      	b.n	8001916 <HAL_PCD_SetAddress+0x42>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f005 f8ff 	bl	8006b0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	4608      	mov	r0, r1
 8001928:	4611      	mov	r1, r2
 800192a:	461a      	mov	r2, r3
 800192c:	4603      	mov	r3, r0
 800192e:	70fb      	strb	r3, [r7, #3]
 8001930:	460b      	mov	r3, r1
 8001932:	803b      	strh	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800193c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da0e      	bge.n	8001962 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	705a      	strb	r2, [r3, #1]
 8001960:	e00e      	b.n	8001980 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	f003 0207 	and.w	r2, r3, #7
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	b2da      	uxtb	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800198c:	883a      	ldrh	r2, [r7, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	78ba      	ldrb	r2, [r7, #2]
 8001996:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019aa:	78bb      	ldrb	r3, [r7, #2]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d102      	bne.n	80019b6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_PCD_EP_Open+0xa6>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e00e      	b.n	80019e2 <HAL_PCD_EP_Open+0xc4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 f910 	bl	8004bf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019e0:	7afb      	ldrb	r3, [r7, #11]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da0e      	bge.n	8001a1c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	705a      	strb	r2, [r3, #1]
 8001a1a:	e00e      	b.n	8001a3a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	f003 0207 	and.w	r2, r3, #7
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_PCD_EP_Close+0x6a>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e00e      	b.n	8001a72 <HAL_PCD_EP_Close+0x88>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fc36 	bl	80052d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	460b      	mov	r3, r1
 8001a88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a8a:	7afb      	ldrb	r3, [r7, #11]
 8001a8c:	f003 0207 	and.w	r2, r3, #7
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6979      	ldr	r1, [r7, #20]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fde9 	bl	80056ae <USB_EPStartXfer>
 8001adc:	e005      	b.n	8001aea <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6979      	ldr	r1, [r7, #20]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fde2 	bl	80056ae <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	460b      	mov	r3, r1
 8001b32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6979      	ldr	r1, [r7, #20]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fd8e 	bl	80056ae <USB_EPStartXfer>
 8001b92:	e005      	b.n	8001ba0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fd87 	bl	80056ae <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 0207 	and.w	r2, r3, #7
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d901      	bls.n	8001bc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04c      	b.n	8001c62 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0e      	bge.n	8001bee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	705a      	strb	r2, [r3, #1]
 8001bec:	e00c      	b.n	8001c08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_PCD_EP_SetStall+0x7e>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e01c      	b.n	8001c62 <HAL_PCD_EP_SetStall+0xb8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fe68 	bl	800690c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f004 ffa9 	bl	8006baa <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d901      	bls.n	8001c88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e040      	b.n	8001d0a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da0e      	bge.n	8001cae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	705a      	strb	r2, [r3, #1]
 8001cac:	e00e      	b.n	8001ccc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0207 	and.w	r2, r3, #7
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_PCD_EP_ClrStall+0x82>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e00e      	b.n	8001d0a <HAL_PCD_EP_ClrStall+0xa0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 fe57 	bl	80069ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b08e      	sub	sp, #56	; 0x38
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d1a:	e2d1      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d24:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 8152 	bne.w	8001fe0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d150      	bne.n	8001de8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	81fb      	strh	r3, [r7, #14]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3328      	adds	r3, #40	; 0x28
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	441a      	add	r2, r3
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001da6:	2100      	movs	r1, #0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f009 fbc2 	bl	800b532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8282 	beq.w	80022c0 <PCD_EP_ISR_Handler+0x5ae>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f040 827d 	bne.w	80022c0 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001de6:	e26b      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001df8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d032      	beq.n	8001e68 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f004 ff01 	bl	8006c44 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e4e:	4013      	ands	r3, r2
 8001e50:	823b      	strh	r3, [r7, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	8a3a      	ldrh	r2, [r7, #16]
 8001e58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f009 fb39 	bl	800b4d8 <HAL_PCD_SetupStageCallback>
 8001e66:	e22b      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f280 8227 	bge.w	80022c0 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e7e:	4013      	ands	r3, r2
 8001e80:	83bb      	strh	r3, [r7, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	8bba      	ldrh	r2, [r7, #28]
 8001e88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d019      	beq.n	8001ef4 <PCD_EP_ISR_Handler+0x1e2>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	6959      	ldr	r1, [r3, #20]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f004 feb3 	bl	8006c44 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001eec:	2100      	movs	r1, #0
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f009 fb04 	bl	800b4fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x230>
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e02f      	b.n	8001fa2 <PCD_EP_ISR_Handler+0x290>
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b3e      	cmp	r3, #62	; 0x3e
 8001f48:	d813      	bhi.n	8001f72 <PCD_EP_ISR_Handler+0x260>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <PCD_EP_ISR_Handler+0x252>
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	3301      	adds	r3, #1
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	029b      	lsls	r3, r3, #10
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	801a      	strh	r2, [r3, #0]
 8001f70:	e017      	b.n	8001fa2 <PCD_EP_ISR_Handler+0x290>
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <PCD_EP_ISR_Handler+0x27a>
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	827b      	strh	r3, [r7, #18]
 8001fb4:	8a7b      	ldrh	r3, [r7, #18]
 8001fb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fba:	827b      	strh	r3, [r7, #18]
 8001fbc:	8a7b      	ldrh	r3, [r7, #18]
 8001fbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fc2:	827b      	strh	r3, [r7, #18]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	8a7b      	ldrh	r3, [r7, #18]
 8001fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8013      	strh	r3, [r2, #0]
 8001fde:	e16f      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ff2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f280 80e4 	bge.w	80021c4 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29a      	uxth	r2, r3
 800200e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002012:	4013      	ands	r3, r2
 8002014:	853b      	strh	r3, [r7, #40]	; 0x28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202a:	b292      	uxth	r2, r2
 800202c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800202e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	7b1b      	ldrb	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d120      	bne.n	800208e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002054:	b29b      	uxth	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	4413      	add	r3, r2
 8002066:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002070:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002072:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8083 	beq.w	8002180 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	6959      	ldr	r1, [r3, #20]
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	88da      	ldrh	r2, [r3, #6]
 8002086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002088:	f004 fddc 	bl	8006c44 <USB_ReadPMA>
 800208c:	e078      	b.n	8002180 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d108      	bne.n	80020a8 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002096:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002098:	461a      	mov	r2, r3
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f91d 	bl	80022dc <HAL_PCD_EP_DB_Receive>
 80020a2:	4603      	mov	r3, r0
 80020a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020a6:	e06b      	b.n	8002180 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	441a      	add	r2, r3
 80020d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01f      	beq.n	8002142 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	4413      	add	r3, r2
 800211c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002126:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800212a:	2b00      	cmp	r3, #0
 800212c:	d028      	beq.n	8002180 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	6959      	ldr	r1, [r3, #20]
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	891a      	ldrh	r2, [r3, #8]
 800213a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800213c:	f004 fd82 	bl	8006c44 <USB_ReadPMA>
 8002140:	e01e      	b.n	8002180 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	895a      	ldrh	r2, [r3, #10]
 800217a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217c:	f004 fd62 	bl	8006c44 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002186:	441a      	add	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002192:	441a      	add	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <PCD_EP_ISR_Handler+0x498>
 80021a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d206      	bcs.n	80021b8 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f009 f9a3 	bl	800b4fc <HAL_PCD_DataOutStageCallback>
 80021b6:	e005      	b.n	80021c4 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fa75 	bl	80056ae <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d078      	beq.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80021ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fc:	843b      	strh	r3, [r7, #32]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	441a      	add	r2, r3
 800220c:	8c3b      	ldrh	r3, [r7, #32]
 800220e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002216:	b29b      	uxth	r3, r3
 8002218:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d108      	bne.n	8002234 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002226:	2b02      	cmp	r3, #2
 8002228:	d144      	bne.n	80022b4 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800222a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d13f      	bne.n	80022b4 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	4413      	add	r3, r2
 800224e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002258:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	8bfb      	ldrh	r3, [r7, #30]
 8002260:	429a      	cmp	r2, r3
 8002262:	d906      	bls.n	8002272 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	8bfb      	ldrh	r3, [r7, #30]
 800226a:	1ad2      	subs	r2, r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	e002      	b.n	8002278 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f009 f953 	bl	800b532 <HAL_PCD_DataInStageCallback>
 800228c:	e018      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	441a      	add	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	8bfb      	ldrh	r3, [r7, #30]
 80022a0:	441a      	add	r2, r3
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 f9fe 	bl	80056ae <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80022b2:	e005      	b.n	80022c0 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80022b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022b6:	461a      	mov	r2, r3
 80022b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f917 	bl	80024ee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f6ff ad25 	blt.w	8001d1c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3738      	adds	r7, #56	; 0x38
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d07c      	beq.n	80023ee <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	4413      	add	r3, r2
 800230e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002318:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	8b7b      	ldrh	r3, [r7, #26]
 8002320:	429a      	cmp	r2, r3
 8002322:	d306      	bcc.n	8002332 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	8b7b      	ldrh	r3, [r7, #26]
 800232a:	1ad2      	subs	r2, r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	619a      	str	r2, [r3, #24]
 8002330:	e002      	b.n	8002338 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d123      	bne.n	8002388 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	833b      	strh	r3, [r7, #24]
 800235c:	8b3b      	ldrh	r3, [r7, #24]
 800235e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002362:	833b      	strh	r3, [r7, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	441a      	add	r2, r3
 8002372:	8b3b      	ldrh	r3, [r7, #24]
 8002374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800237c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	b29b      	uxth	r3, r3
 8002386:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01f      	beq.n	80023d2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	82fb      	strh	r3, [r7, #22]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	441a      	add	r2, r3
 80023bc:	8afb      	ldrh	r3, [r7, #22]
 80023be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023d2:	8b7b      	ldrh	r3, [r7, #26]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8085 	beq.w	80024e4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	6959      	ldr	r1, [r3, #20]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	891a      	ldrh	r2, [r3, #8]
 80023e6:	8b7b      	ldrh	r3, [r7, #26]
 80023e8:	f004 fc2c 	bl	8006c44 <USB_ReadPMA>
 80023ec:	e07a      	b.n	80024e4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	4413      	add	r3, r2
 8002408:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002412:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	8b7b      	ldrh	r3, [r7, #26]
 800241a:	429a      	cmp	r2, r3
 800241c:	d306      	bcc.n	800242c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	8b7b      	ldrh	r3, [r7, #26]
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	619a      	str	r2, [r3, #24]
 800242a:	e002      	b.n	8002432 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d123      	bne.n	8002482 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002454:	83fb      	strh	r3, [r7, #30]
 8002456:	8bfb      	ldrh	r3, [r7, #30]
 8002458:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800245c:	83fb      	strh	r3, [r7, #30]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	441a      	add	r2, r3
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247e:	b29b      	uxth	r3, r3
 8002480:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11f      	bne.n	80024cc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	83bb      	strh	r3, [r7, #28]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	8bbb      	ldrh	r3, [r7, #28]
 80024b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024cc:	8b7b      	ldrh	r3, [r7, #26]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6959      	ldr	r1, [r3, #20]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	895a      	ldrh	r2, [r3, #10]
 80024de:	8b7b      	ldrh	r3, [r7, #26]
 80024e0:	f004 fbb0 	bl	8006c44 <USB_ReadPMA>
    }
  }

  return count;
 80024e4:	8b7b      	ldrh	r3, [r7, #26]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b092      	sub	sp, #72	; 0x48
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8130 	beq.w	8002768 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002534:	429a      	cmp	r2, r3
 8002536:	d906      	bls.n	8002546 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	619a      	str	r2, [r3, #24]
 8002544:	e002      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d12c      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f008 ffe9 	bl	800b532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 822d 	beq.w	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	827b      	strh	r3, [r7, #18]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	8a7b      	ldrh	r3, [r7, #18]
 8002598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
 80025ac:	e20b      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01f      	beq.n	80025f8 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 81e1 	bne.w	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800260a:	441a      	add	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002616:	441a      	add	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	d309      	bcc.n	800263c <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6a1a      	ldr	r2, [r3, #32]
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	1ad2      	subs	r2, r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	621a      	str	r2, [r3, #32]
 800263a:	e014      	b.n	8002666 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002650:	e009      	b.n	8002666 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2200      	movs	r2, #0
 8002664:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d155      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x22c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	00da      	lsls	r2, r3, #3
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b00      	cmp	r3, #0
 800269a:	d112      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x1d4>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	801a      	strh	r2, [r3, #0]
 80026c0:	e047      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x264>
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	2b3e      	cmp	r3, #62	; 0x3e
 80026c6:	d811      	bhi.n	80026ec <HAL_PCD_EP_DB_Transmit+0x1fe>
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_PCD_EP_DB_Transmit+0x1f0>
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	3301      	adds	r3, #1
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	801a      	strh	r2, [r3, #0]
 80026ea:	e032      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x264>
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x214>
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	3b01      	subs	r3, #1
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	b29b      	uxth	r3, r3
 8002706:	029b      	lsls	r3, r3, #10
 8002708:	b29b      	uxth	r3, r3
 800270a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002712:	b29a      	uxth	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	e01b      	b.n	8002752 <HAL_PCD_EP_DB_Transmit+0x264>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d117      	bne.n	8002752 <HAL_PCD_EP_DB_Transmit+0x264>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	4413      	add	r3, r2
 8002738:	623b      	str	r3, [r7, #32]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00da      	lsls	r2, r3, #3
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	4413      	add	r3, r2
 8002744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	b29a      	uxth	r2, r3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6959      	ldr	r1, [r3, #20]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	891a      	ldrh	r2, [r3, #8]
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	b29b      	uxth	r3, r3
 8002762:	f004 fa2e 	bl	8006bc2 <USB_WritePMA>
 8002766:	e12e      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	4413      	add	r3, r2
 8002782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800278c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002794:	429a      	cmp	r2, r3
 8002796:	d306      	bcc.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800279e:	1ad2      	subs	r2, r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	e002      	b.n	80027ac <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12c      	bne.n	800280e <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f008 feb9 	bl	800b532 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80fd 	bne.w	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]
 800280c:	e0db      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11f      	bne.n	8002858 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	b29b      	uxth	r3, r3
 8002856:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285e:	2b01      	cmp	r3, #1
 8002860:	f040 80b1 	bne.w	80029c6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800286a:	441a      	add	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002876:	441a      	add	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d309      	bcc.n	800289c <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	621a      	str	r2, [r3, #32]
 800289a:	e014      	b.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80028a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028b0:	e009      	b.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	785b      	ldrb	r3, [r3, #1]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d155      	bne.n	8002980 <HAL_PCD_EP_DB_Transmit+0x492>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	647b      	str	r3, [r7, #68]	; 0x44
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e8:	4413      	add	r3, r2
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f4:	4413      	add	r3, r2
 80028f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028fa:	643b      	str	r3, [r7, #64]	; 0x40
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d112      	bne.n	8002928 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800290c:	b29a      	uxth	r2, r3
 800290e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002920:	b29a      	uxth	r2, r3
 8002922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	e044      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2b3e      	cmp	r3, #62	; 0x3e
 800292c:	d811      	bhi.n	8002952 <HAL_PCD_EP_DB_Transmit+0x464>
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_PCD_EP_DB_Transmit+0x456>
 800293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002940:	3301      	adds	r3, #1
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002946:	b29b      	uxth	r3, r3
 8002948:	029b      	lsls	r3, r3, #10
 800294a:	b29a      	uxth	r2, r3
 800294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	e02f      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002964:	3b01      	subs	r3, #1
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	b29b      	uxth	r3, r3
 800296c:	029b      	lsls	r3, r3, #10
 800296e:	b29b      	uxth	r3, r3
 8002970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002978:	b29a      	uxth	r2, r3
 800297a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297c:	801a      	strh	r2, [r3, #0]
 800297e:	e018      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d114      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	4413      	add	r3, r2
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	00da      	lsls	r2, r3, #3
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	4413      	add	r3, r2
 80029a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	6959      	ldr	r1, [r3, #20]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	895a      	ldrh	r2, [r3, #10]
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f004 f8fe 	bl	8006bc2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e0:	823b      	strh	r3, [r7, #16]
 80029e2:	8a3b      	ldrh	r3, [r7, #16]
 80029e4:	f083 0310 	eor.w	r3, r3, #16
 80029e8:	823b      	strh	r3, [r7, #16]
 80029ea:	8a3b      	ldrh	r3, [r7, #16]
 80029ec:	f083 0320 	eor.w	r3, r3, #32
 80029f0:	823b      	strh	r3, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	8a3b      	ldrh	r3, [r7, #16]
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3748      	adds	r7, #72	; 0x48
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a32:	897b      	ldrh	r3, [r7, #10]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e009      	b.n	8002a6a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a56:	897a      	ldrh	r2, [r7, #10]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a6a:	893b      	ldrh	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	80da      	strh	r2, [r3, #6]
 8002a7e:	e00b      	b.n	8002a98 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2201      	movs	r2, #1
 8002a84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40007000 	.word	0x40007000

08002b1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40007000 	.word	0x40007000

08002b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b46:	d130      	bne.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d038      	beq.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2232      	movs	r2, #50	; 0x32
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0c9b      	lsrs	r3, r3, #18
 8002b78:	3301      	adds	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7c:	e002      	b.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b90:	d102      	bne.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f2      	bne.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba4:	d110      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e00f      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d007      	beq.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	431bde83 	.word	0x431bde83

08002be4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6053      	str	r3, [r2, #4]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40007000 	.word	0x40007000

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f000 bc11 	b.w	800343a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c18:	4ba0      	ldr	r3, [pc, #640]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c22:	4b9e      	ldr	r3, [pc, #632]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80e4 	beq.w	8002e02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4c>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	f040 808b 	bne.w	8002d5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	f040 8087 	bne.w	8002d5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c50:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_OscConfig+0x64>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e3e8      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	4b8b      	ldr	r3, [pc, #556]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_RCC_OscConfig+0x7e>
 8002c78:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c80:	e005      	b.n	8002c8e <HAL_RCC_OscConfig+0x8a>
 8002c82:	4b86      	ldr	r3, [pc, #536]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d223      	bcs.n	8002cda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fdaa 	bl	80037f0 <RCC_SetFlashLatencyFromMSIRange>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e3c9      	b.n	800343a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca6:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7c      	ldr	r2, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4977      	ldr	r1, [pc, #476]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc4:	4b75      	ldr	r3, [pc, #468]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	4972      	ldr	r1, [pc, #456]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	e025      	b.n	8002d26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cda:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6f      	ldr	r2, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	496a      	ldr	r1, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	4965      	ldr	r1, [pc, #404]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd6a 	bl	80037f0 <RCC_SetFlashLatencyFromMSIRange>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e389      	b.n	800343a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d26:	f000 fc6f 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	4b5b      	ldr	r3, [pc, #364]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a5a      	ldr	r2, [pc, #360]	; (8002ea0 <HAL_RCC_OscConfig+0x29c>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d42:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_OscConfig+0x2a0>)
 8002d44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_RCC_OscConfig+0x2a4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fdac 	bl	80008a8 <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d052      	beq.n	8002e00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	e36d      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d032      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d66:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a4c      	ldr	r2, [pc, #304]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d72:	f7fe f8bd 	bl	8000ef0 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d7a:	f7fe f8b9 	bl	8000ef0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e356      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8c:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	493a      	ldr	r1, [pc, #232]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
 8002dca:	e01a      	b.n	8002e02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f88a 	bl	8000ef0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de0:	f7fe f886 	bl	8000ef0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e323      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1dc>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d073      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x21c>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d10e      	bne.n	8002e38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d063      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2f0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d15f      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e300      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x24c>
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0x288>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x270>
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0x288>
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <HAL_RCC_OscConfig+0x298>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f82c 	bl	8000ef0 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9a:	e010      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ba>
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	0800be24 	.word	0x0800be24
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe f820 	bl	8000ef0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e2bd      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	4baf      	ldr	r3, [pc, #700]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x2a8>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f810 	bl	8000ef0 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe f80c 	bl	8000ef0 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e2a9      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee6:	4ba5      	ldr	r3, [pc, #660]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2d0>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d060      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_OscConfig+0x310>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d116      	bne.n	8002f42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f14:	4b99      	ldr	r3, [pc, #612]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x328>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e286      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b93      	ldr	r3, [pc, #588]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	4990      	ldr	r1, [pc, #576]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f40:	e040      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d023      	beq.n	8002f92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4a:	4b8c      	ldr	r3, [pc, #560]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a8b      	ldr	r2, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fd ffcb 	bl	8000ef0 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7fd ffc7 	bl	8000ef0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e264      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f70:	4b82      	ldr	r3, [pc, #520]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b7f      	ldr	r3, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	497c      	ldr	r1, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	e018      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b7a      	ldr	r3, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a79      	ldr	r2, [pc, #484]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fd ffa7 	bl	8000ef0 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fd ffa3 	bl	8000ef0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e240      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb8:	4b70      	ldr	r3, [pc, #448]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03c      	beq.n	800304a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01c      	beq.n	8003012 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fde:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fd ff82 	bl	8000ef0 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7fd ff7e 	bl	8000ef0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e21b      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003002:	4b5e      	ldr	r3, [pc, #376]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8003004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3ec>
 8003010:	e01b      	b.n	800304a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003012:	4b5a      	ldr	r3, [pc, #360]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fd ff65 	bl	8000ef0 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fd ff61 	bl	8000ef0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1fe      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a6 	beq.w	80031a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800305c:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b44      	ldr	r3, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
 8003074:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_OscConfig+0x57c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d118      	bne.n	80030c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_OscConfig+0x57c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3a      	ldr	r2, [pc, #232]	; (8003180 <HAL_RCC_OscConfig+0x57c>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309c:	f7fd ff28 	bl	8000ef0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fd ff24 	bl	8000ef0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1c1      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_RCC_OscConfig+0x57c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <HAL_RCC_OscConfig+0x4d8>
 80030ca:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_RCC_OscConfig+0x578>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x578>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030da:	e024      	b.n	8003126 <HAL_RCC_OscConfig+0x522>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d110      	bne.n	8003106 <HAL_RCC_OscConfig+0x502>
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x578>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	4a24      	ldr	r2, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x578>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x578>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	4a20      	ldr	r2, [pc, #128]	; (800317c <HAL_RCC_OscConfig+0x578>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003104:	e00f      	b.n	8003126 <HAL_RCC_OscConfig+0x522>
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_RCC_OscConfig+0x578>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	4a17      	ldr	r2, [pc, #92]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800311e:	f023 0304 	bic.w	r3, r3, #4
 8003122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fd fedf 	bl	8000ef0 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fd fedb 	bl	8000ef0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e176      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x578>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0ed      	beq.n	8003136 <HAL_RCC_OscConfig+0x532>
 800315a:	e01a      	b.n	8003192 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fd fec8 	bl	8000ef0 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003162:	e00f      	b.n	8003184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fd fec4 	bl	8000ef0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d906      	bls.n	8003184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e15f      	b.n	800343a <HAL_RCC_OscConfig+0x836>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	4baa      	ldr	r3, [pc, #680]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e8      	bne.n	8003164 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003192:	7ffb      	ldrb	r3, [r7, #31]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4ba5      	ldr	r3, [pc, #660]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	4aa4      	ldr	r2, [pc, #656]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d03c      	beq.n	800322a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031b8:	4b9d      	ldr	r3, [pc, #628]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80031ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031be:	4a9c      	ldr	r2, [pc, #624]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fe92 	bl	8000ef0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d0:	f7fd fe8e 	bl	8000ef0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e12b      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	4b93      	ldr	r3, [pc, #588]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80031e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ef      	beq.n	80031d0 <HAL_RCC_OscConfig+0x5cc>
 80031f0:	e01b      	b.n	800322a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031f2:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80031f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031f8:	4a8d      	ldr	r2, [pc, #564]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd fe75 	bl	8000ef0 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800320a:	f7fd fe71 	bl	8000ef0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e10e      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800321e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ef      	bne.n	800320a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8102 	beq.w	8003438 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	2b02      	cmp	r3, #2
 800323a:	f040 80c5 	bne.w	80033c8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800323e:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0203 	and.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	429a      	cmp	r2, r3
 8003250:	d12c      	bne.n	80032ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	3b01      	subs	r3, #1
 800325e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d123      	bne.n	80032ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d11b      	bne.n	80032ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d113      	bne.n	80032ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	3b01      	subs	r3, #1
 8003292:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d109      	bne.n	80032ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d067      	beq.n	800337c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d062      	beq.n	8003378 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0bb      	b.n	800343a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032c2:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80032c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ce:	f7fd fe0f 	bl	8000ef0 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fd fe0b 	bl	8000ef0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0a8      	b.n	800343a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f4:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <HAL_RCC_OscConfig+0x830>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003304:	3a01      	subs	r2, #1
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800330e:	0212      	lsls	r2, r2, #8
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003316:	0852      	lsrs	r2, r2, #1
 8003318:	3a01      	subs	r2, #1
 800331a:	0552      	lsls	r2, r2, #21
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003322:	0852      	lsrs	r2, r2, #1
 8003324:	3a01      	subs	r2, #1
 8003326:	0652      	lsls	r2, r2, #25
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800332e:	06d2      	lsls	r2, r2, #27
 8003330:	430a      	orrs	r2, r1
 8003332:	493f      	ldr	r1, [pc, #252]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 8003334:	4313      	orrs	r3, r2
 8003336:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003338:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3c      	ldr	r2, [pc, #240]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003344:	4b3a      	ldr	r3, [pc, #232]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a39      	ldr	r2, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003350:	f7fd fdce 	bl	8000ef0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fd fdca 	bl	8000ef0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e067      	b.n	800343a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003376:	e05f      	b.n	8003438 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e05e      	b.n	800343a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d157      	bne.n	8003438 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003388:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800338e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003392:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800339a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033a0:	f7fd fda6 	bl	8000ef0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fda2 	bl	8000ef0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e03f      	b.n	800343a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x7a4>
 80033c6:	e037      	b.n	8003438 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d02d      	beq.n	800342a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033ec:	f023 0303 	bic.w	r3, r3, #3
 80033f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033f2:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 80033f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fd fd75 	bl	8000ef0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fd fd71 	bl	8000ef0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e00e      	b.n	800343a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <HAL_RCC_OscConfig+0x82c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x806>
 8003428:	e006      	b.n	8003438 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e005      	b.n	800343a <HAL_RCC_OscConfig+0x836>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop

08003444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0c8      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d910      	bls.n	8003488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 0207 	bic.w	r2, r3, #7
 800346e:	4961      	ldr	r1, [pc, #388]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0b0      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d04c      	beq.n	800352e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d107      	bne.n	80034ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349c:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d121      	bne.n	80034ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e09e      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d107      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d115      	bne.n	80034ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e092      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034cc:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e086      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e07e      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 0203 	bic.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	493f      	ldr	r1, [pc, #252]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fe:	f7fd fcf7 	bl	8000ef0 <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003504:	e00a      	b.n	800351c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003506:	f7fd fcf3 	bl	8000ef0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e066      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 020c 	and.w	r2, r3, #12
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	429a      	cmp	r2, r3
 800352c:	d1eb      	bne.n	8003506 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	492c      	ldr	r1, [pc, #176]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d210      	bcs.n	800357c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4924      	ldr	r1, [pc, #144]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_ClockConfig+0x1b0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e036      	b.n	80035ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4918      	ldr	r1, [pc, #96]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4910      	ldr	r1, [pc, #64]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ba:	f000 f825 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80035be:	4601      	mov	r1, r0
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_RCC_ClockConfig+0x1b4>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	fa21 f303 	lsr.w	r3, r1, r3
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035da:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd f962 	bl	80008a8 <HAL_InitTick>
 80035e4:	4603      	mov	r3, r0
 80035e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80035e8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40022000 	.word	0x40022000
 80035f8:	40021000 	.word	0x40021000
 80035fc:	0800be24 	.word	0x0800be24
 8003600:	20000000 	.word	0x20000000
 8003604:	20000004 	.word	0x20000004

08003608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d121      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d11e      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800363c:	4b33      	ldr	r3, [pc, #204]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 800364a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e005      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d102      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e004      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d101      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_RCC_GetSysClockFreq+0x110>)
 800368e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d133      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d002      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0xa4>
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ae:	617b      	str	r3, [r7, #20]
      break;
 80036b0:	e005      	b.n	80036be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_GetSysClockFreq+0x110>)
 80036b4:	617b      	str	r3, [r7, #20]
      break;
 80036b6:	e002      	b.n	80036be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	617b      	str	r3, [r7, #20]
      break;
 80036bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	3301      	adds	r3, #1
 80036ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	fb02 f203 	mul.w	r2, r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_RCC_GetSysClockFreq+0x104>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	0e5b      	lsrs	r3, r3, #25
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036fe:	69bb      	ldr	r3, [r7, #24]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3724      	adds	r7, #36	; 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40021000 	.word	0x40021000
 8003710:	0800be3c 	.word	0x0800be3c
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4601      	mov	r1, r0
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_RCC_GetPCLK1Freq+0x28>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000
 800375c:	0800be34 	.word	0x0800be34

08003760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003764:	f7ff ffda 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003768:	4601      	mov	r1, r0
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0adb      	lsrs	r3, r3, #11
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	0800be34 	.word	0x0800be34

0800378c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	220f      	movs	r2, #15
 800379a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	08db      	lsrs	r3, r3, #3
 80037c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_RCC_GetClockConfig+0x60>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40022000 	.word	0x40022000

080037f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003808:	f7ff f988 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 800380c:	6178      	str	r0, [r7, #20]
 800380e:	e014      	b.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003828:	f7ff f978 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 800382c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d10b      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d919      	bls.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2ba0      	cmp	r3, #160	; 0xa0
 800384c:	d902      	bls.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800384e:	2302      	movs	r3, #2
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e013      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003854:	2301      	movs	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e010      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d902      	bls.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003860:	2303      	movs	r3, #3
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e00a      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b80      	cmp	r3, #128	; 0x80
 800386a:	d102      	bne.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386c:	2302      	movs	r3, #2
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	e004      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b70      	cmp	r3, #112	; 0x70
 8003876:	d101      	bne.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003878:	2301      	movs	r3, #1
 800387a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 0207 	bic.w	r2, r3, #7
 8003884:	4909      	ldr	r1, [pc, #36]	; (80038ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40022000 	.word	0x40022000

080038b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b8:	2300      	movs	r3, #0
 80038ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038bc:	2300      	movs	r3, #0
 80038be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d02f      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d4:	d005      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038da:	d015      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80038e0:	e00f      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038e2:	4bac      	ldr	r3, [pc, #688]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4aab      	ldr	r2, [pc, #684]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ee:	e00c      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9dc 	bl	8003cb4 <RCCEx_PLLSAI1_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003900:	e003      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	74fb      	strb	r3, [r7, #19]
      break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390a:	7cfb      	ldrb	r3, [r7, #19]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10b      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003910:	4ba0      	ldr	r3, [pc, #640]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	499d      	ldr	r1, [pc, #628]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003926:	e001      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8099 	beq.w	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800393e:	4b95      	ldr	r3, [pc, #596]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800394e:	2300      	movs	r3, #0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b8f      	ldr	r3, [pc, #572]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	4a8e      	ldr	r2, [pc, #568]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	6593      	str	r3, [r2, #88]	; 0x58
 8003960:	4b8c      	ldr	r3, [pc, #560]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396c:	2301      	movs	r3, #1
 800396e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a88      	ldr	r2, [pc, #544]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397c:	f7fd fab8 	bl	8000ef0 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003982:	e009      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fd fab4 	bl	8000ef0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	74fb      	strb	r3, [r7, #19]
        break;
 8003996:	e005      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003998:	4b7f      	ldr	r3, [pc, #508]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d155      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039aa:	4b7a      	ldr	r3, [pc, #488]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d019      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c6:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	4a6e      	ldr	r2, [pc, #440]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	4b6c      	ldr	r3, [pc, #432]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	4a6a      	ldr	r2, [pc, #424]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039f2:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d016      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fd fa74 	bl	8000ef0 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fa70 	bl	8000ef0 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d902      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	74fb      	strb	r3, [r7, #19]
            break;
 8003a22:	e006      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a24:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ec      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a38:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	4953      	ldr	r1, [pc, #332]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
 8003a54:	e001      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5a:	7c7b      	ldrb	r3, [r7, #17]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b4c      	ldr	r3, [pc, #304]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	4a4b      	ldr	r2, [pc, #300]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a78:	4b46      	ldr	r3, [pc, #280]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4943      	ldr	r1, [pc, #268]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a9a:	4b3e      	ldr	r3, [pc, #248]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f023 020c 	bic.w	r2, r3, #12
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	493a      	ldr	r1, [pc, #232]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	4932      	ldr	r1, [pc, #200]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	4929      	ldr	r1, [pc, #164]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	4921      	ldr	r1, [pc, #132]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4918      	ldr	r1, [pc, #96]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4910      	ldr	r1, [pc, #64]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d02c      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b84:	d10a      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b86:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b90:	60d3      	str	r3, [r2, #12]
 8003b92:	e015      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f881 	bl	8003cb4 <RCCEx_PLLSAI1_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d028      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	492d      	ldr	r1, [pc, #180]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bea:	d106      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf6:	60d3      	str	r3, [r2, #12]
 8003bf8:	e011      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f852 	bl	8003cb4 <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01c      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	4915      	ldr	r1, [pc, #84]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f82f 	bl	8003cb4 <RCCEx_PLLSAI1_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	4904      	ldr	r1, [pc, #16]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cc2:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cce:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0203 	and.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d10d      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d044      	beq.n	8003d84 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	e041      	b.n	8003d84 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d00c      	beq.n	8003d22 <RCCEx_PLLSAI1_Config+0x6e>
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d013      	beq.n	8003d34 <RCCEx_PLLSAI1_Config+0x80>
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d120      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d10:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11d      	bne.n	8003d58 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d20:	e01a      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d32:	e013      	b.n	8003d5c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d34:	4b56      	ldr	r3, [pc, #344]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d50:	e006      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      break;
 8003d56:	e004      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e002      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003d60:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10d      	bne.n	8003d84 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d68:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	4944      	ldr	r1, [pc, #272]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d17c      	bne.n	8003e84 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d96:	f7fd f8ab 	bl	8000ef0 <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d9c:	e009      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d9e:	f7fd f8a7 	bl	8000ef0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	73fb      	strb	r3, [r7, #15]
        break;
 8003db0:	e005      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003db2:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ef      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d15f      	bne.n	8003e84 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d110      	bne.n	8003dec <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003dd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6892      	ldr	r2, [r2, #8]
 8003dda:	0211      	lsls	r1, r2, #8
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68d2      	ldr	r2, [r2, #12]
 8003de0:	06d2      	lsls	r2, r2, #27
 8003de2:	430a      	orrs	r2, r1
 8003de4:	492a      	ldr	r1, [pc, #168]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]
 8003dea:	e027      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d112      	bne.n	8003e18 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6892      	ldr	r2, [r2, #8]
 8003e02:	0211      	lsls	r1, r2, #8
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6912      	ldr	r2, [r2, #16]
 8003e08:	0852      	lsrs	r2, r2, #1
 8003e0a:	3a01      	subs	r2, #1
 8003e0c:	0552      	lsls	r2, r2, #21
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	491f      	ldr	r1, [pc, #124]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	610b      	str	r3, [r1, #16]
 8003e16:	e011      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	0211      	lsls	r1, r2, #8
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6952      	ldr	r2, [r2, #20]
 8003e2e:	0852      	lsrs	r2, r2, #1
 8003e30:	3a01      	subs	r2, #1
 8003e32:	0652      	lsls	r2, r2, #25
 8003e34:	430a      	orrs	r2, r1
 8003e36:	4916      	ldr	r1, [pc, #88]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd f852 	bl	8000ef0 <HAL_GetTick>
 8003e4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e4e:	e009      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e50:	f7fd f84e 	bl	8000ef0 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d902      	bls.n	8003e64 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	73fb      	strb	r3, [r7, #15]
          break;
 8003e62:	e005      	b.n	8003e70 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ef      	beq.n	8003e50 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	4904      	ldr	r1, [pc, #16]	; (8003e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e049      	b.n	8003f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f841 	bl	8003f42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 f9dc 	bl	8004290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d001      	beq.n	8003f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e03b      	b.n	8003fe8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a19      	ldr	r2, [pc, #100]	; (8003ff4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIM_Base_Start_IT+0x4e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIM_Base_Start_IT+0x4e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d115      	bne.n	8003fd2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_TIM_Base_Start_IT+0xa4>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b06      	cmp	r3, #6
 8003fb6:	d015      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0x8c>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d011      	beq.n	8003fe4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	e008      	b.n	8003fe4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e000      	b.n	8003fe6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	00010007 	.word	0x00010007

08004000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0202 	mvn.w	r2, #2
 800402c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f905 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8f7 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f908 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b04      	cmp	r3, #4
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0204 	mvn.w	r2, #4
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8db 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8cd 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8de 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0208 	mvn.w	r2, #8
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2204      	movs	r2, #4
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8b1 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8a3 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8b4 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0210 	mvn.w	r2, #16
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2208      	movs	r2, #8
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f887 	bl	8004252 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f879 	bl	800423e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f88a 	bl	8004266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0201 	mvn.w	r2, #1
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fc fb00 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d107      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8de 	bl	800436c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	d10e      	bne.n	80041de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d107      	bne.n	80041de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f8d1 	bl	8004380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d10e      	bne.n	800420a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d107      	bne.n	800420a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f838 	bl	800427a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b20      	cmp	r3, #32
 8004216:	d10e      	bne.n	8004236 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d107      	bne.n	8004236 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f06f 0220 	mvn.w	r2, #32
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f891 	bl	8004358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a2a      	ldr	r2, [pc, #168]	; (800434c <TIM_Base_SetConfig+0xbc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_Base_SetConfig+0x20>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d108      	bne.n	80042c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a21      	ldr	r2, [pc, #132]	; (800434c <TIM_Base_SetConfig+0xbc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_Base_SetConfig+0x52>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0x52>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_Base_SetConfig+0xc0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0x52>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <TIM_Base_SetConfig+0xc4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <TIM_Base_SetConfig+0xbc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d007      	beq.n	8004330 <TIM_Base_SetConfig+0xa0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <TIM_Base_SetConfig+0xc0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0xa0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <TIM_Base_SetConfig+0xc4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d103      	bne.n	8004338 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	615a      	str	r2, [r3, #20]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400

08004358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e040      	b.n	8004428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc fa22 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f82c 	bl	8004430 <UART_SetConfig>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e022      	b.n	8004428 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa30 	bl	8004850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800440e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fab7 	bl	8004994 <UART_CheckIdleState>
 8004426:	4603      	mov	r3, r0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	4313      	orrs	r3, r2
 8004454:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4bb0      	ldr	r3, [pc, #704]	; (8004720 <UART_SetConfig+0x2f0>)
 800445e:	4013      	ands	r3, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	69f9      	ldr	r1, [r7, #28]
 8004466:	430b      	orrs	r3, r1
 8004468:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4aa6      	ldr	r2, [pc, #664]	; (8004724 <UART_SetConfig+0x2f4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	4313      	orrs	r3, r2
 8004498:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a9d      	ldr	r2, [pc, #628]	; (8004728 <UART_SetConfig+0x2f8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d121      	bne.n	80044fc <UART_SetConfig+0xcc>
 80044b8:	4b9c      	ldr	r3, [pc, #624]	; (800472c <UART_SetConfig+0x2fc>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d816      	bhi.n	80044f4 <UART_SetConfig+0xc4>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x9c>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044e9 	.word	0x080044e9
 80044d4:	080044e3 	.word	0x080044e3
 80044d8:	080044ef 	.word	0x080044ef
 80044dc:	2301      	movs	r3, #1
 80044de:	76fb      	strb	r3, [r7, #27]
 80044e0:	e072      	b.n	80045c8 <UART_SetConfig+0x198>
 80044e2:	2302      	movs	r3, #2
 80044e4:	76fb      	strb	r3, [r7, #27]
 80044e6:	e06f      	b.n	80045c8 <UART_SetConfig+0x198>
 80044e8:	2304      	movs	r3, #4
 80044ea:	76fb      	strb	r3, [r7, #27]
 80044ec:	e06c      	b.n	80045c8 <UART_SetConfig+0x198>
 80044ee:	2308      	movs	r3, #8
 80044f0:	76fb      	strb	r3, [r7, #27]
 80044f2:	e069      	b.n	80045c8 <UART_SetConfig+0x198>
 80044f4:	2310      	movs	r3, #16
 80044f6:	76fb      	strb	r3, [r7, #27]
 80044f8:	bf00      	nop
 80044fa:	e065      	b.n	80045c8 <UART_SetConfig+0x198>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a8b      	ldr	r2, [pc, #556]	; (8004730 <UART_SetConfig+0x300>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d134      	bne.n	8004570 <UART_SetConfig+0x140>
 8004506:	4b89      	ldr	r3, [pc, #548]	; (800472c <UART_SetConfig+0x2fc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d829      	bhi.n	8004568 <UART_SetConfig+0x138>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0xec>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004551 	.word	0x08004551
 8004520:	08004569 	.word	0x08004569
 8004524:	08004569 	.word	0x08004569
 8004528:	08004569 	.word	0x08004569
 800452c:	0800455d 	.word	0x0800455d
 8004530:	08004569 	.word	0x08004569
 8004534:	08004569 	.word	0x08004569
 8004538:	08004569 	.word	0x08004569
 800453c:	08004557 	.word	0x08004557
 8004540:	08004569 	.word	0x08004569
 8004544:	08004569 	.word	0x08004569
 8004548:	08004569 	.word	0x08004569
 800454c:	08004563 	.word	0x08004563
 8004550:	2300      	movs	r3, #0
 8004552:	76fb      	strb	r3, [r7, #27]
 8004554:	e038      	b.n	80045c8 <UART_SetConfig+0x198>
 8004556:	2302      	movs	r3, #2
 8004558:	76fb      	strb	r3, [r7, #27]
 800455a:	e035      	b.n	80045c8 <UART_SetConfig+0x198>
 800455c:	2304      	movs	r3, #4
 800455e:	76fb      	strb	r3, [r7, #27]
 8004560:	e032      	b.n	80045c8 <UART_SetConfig+0x198>
 8004562:	2308      	movs	r3, #8
 8004564:	76fb      	strb	r3, [r7, #27]
 8004566:	e02f      	b.n	80045c8 <UART_SetConfig+0x198>
 8004568:	2310      	movs	r3, #16
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	bf00      	nop
 800456e:	e02b      	b.n	80045c8 <UART_SetConfig+0x198>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6b      	ldr	r2, [pc, #428]	; (8004724 <UART_SetConfig+0x2f4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d124      	bne.n	80045c4 <UART_SetConfig+0x194>
 800457a:	4b6c      	ldr	r3, [pc, #432]	; (800472c <UART_SetConfig+0x2fc>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d012      	beq.n	80045b0 <UART_SetConfig+0x180>
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d802      	bhi.n	8004596 <UART_SetConfig+0x166>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <UART_SetConfig+0x174>
 8004594:	e012      	b.n	80045bc <UART_SetConfig+0x18c>
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459a:	d006      	beq.n	80045aa <UART_SetConfig+0x17a>
 800459c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a0:	d009      	beq.n	80045b6 <UART_SetConfig+0x186>
 80045a2:	e00b      	b.n	80045bc <UART_SetConfig+0x18c>
 80045a4:	2300      	movs	r3, #0
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	e00e      	b.n	80045c8 <UART_SetConfig+0x198>
 80045aa:	2302      	movs	r3, #2
 80045ac:	76fb      	strb	r3, [r7, #27]
 80045ae:	e00b      	b.n	80045c8 <UART_SetConfig+0x198>
 80045b0:	2304      	movs	r3, #4
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	e008      	b.n	80045c8 <UART_SetConfig+0x198>
 80045b6:	2308      	movs	r3, #8
 80045b8:	76fb      	strb	r3, [r7, #27]
 80045ba:	e005      	b.n	80045c8 <UART_SetConfig+0x198>
 80045bc:	2310      	movs	r3, #16
 80045be:	76fb      	strb	r3, [r7, #27]
 80045c0:	bf00      	nop
 80045c2:	e001      	b.n	80045c8 <UART_SetConfig+0x198>
 80045c4:	2310      	movs	r3, #16
 80045c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a55      	ldr	r2, [pc, #340]	; (8004724 <UART_SetConfig+0x2f4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d174      	bne.n	80046bc <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045d2:	7efb      	ldrb	r3, [r7, #27]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d824      	bhi.n	8004622 <UART_SetConfig+0x1f2>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <UART_SetConfig+0x1b0>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004605 	.word	0x08004605
 80045e4:	08004623 	.word	0x08004623
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004613 	.word	0x08004613
 80045f4:	08004623 	.word	0x08004623
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004623 	.word	0x08004623
 8004600:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7ff f896 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004608:	6178      	str	r0, [r7, #20]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b49      	ldr	r3, [pc, #292]	; (8004734 <UART_SetConfig+0x304>)
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fff9 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004616:	6178      	str	r0, [r7, #20]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	617b      	str	r3, [r7, #20]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	76bb      	strb	r3, [r7, #26]
        break;
 800462a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8100 	beq.w	8004834 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	429a      	cmp	r2, r3
 8004642:	d305      	bcc.n	8004650 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	429a      	cmp	r2, r3
 800464e:	d902      	bls.n	8004656 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	76bb      	strb	r3, [r7, #26]
 8004654:	e0ee      	b.n	8004834 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	f04f 0400 	mov.w	r4, #0
 8004666:	0214      	lsls	r4, r2, #8
 8004668:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800466c:	020b      	lsls	r3, r1, #8
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6852      	ldr	r2, [r2, #4]
 8004672:	0852      	lsrs	r2, r2, #1
 8004674:	4611      	mov	r1, r2
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	eb13 0b01 	adds.w	fp, r3, r1
 800467e:	eb44 0c02 	adc.w	ip, r4, r2
 8004682:	4658      	mov	r0, fp
 8004684:	4661      	mov	r1, ip
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f04f 0400 	mov.w	r4, #0
 800468e:	461a      	mov	r2, r3
 8004690:	4623      	mov	r3, r4
 8004692:	f7fb fd9d 	bl	80001d0 <__aeabi_uldivmod>
 8004696:	4603      	mov	r3, r0
 8004698:	460c      	mov	r4, r1
 800469a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a2:	d308      	bcc.n	80046b6 <UART_SetConfig+0x286>
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046aa:	d204      	bcs.n	80046b6 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	60da      	str	r2, [r3, #12]
 80046b4:	e0be      	b.n	8004834 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	76bb      	strb	r3, [r7, #26]
 80046ba:	e0bb      	b.n	8004834 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c4:	d169      	bne.n	800479a <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80046c6:	7efb      	ldrb	r3, [r7, #27]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d835      	bhi.n	8004738 <UART_SetConfig+0x308>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0x2a4>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004701 	.word	0x08004701
 80046dc:	08004709 	.word	0x08004709
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800470f 	.word	0x0800470f
 80046e8:	08004739 	.word	0x08004739
 80046ec:	08004739 	.word	0x08004739
 80046f0:	08004739 	.word	0x08004739
 80046f4:	08004717 	.word	0x08004717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f8:	f7ff f81c 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 80046fc:	6178      	str	r0, [r7, #20]
        break;
 80046fe:	e020      	b.n	8004742 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004700:	f7ff f82e 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8004704:	6178      	str	r0, [r7, #20]
        break;
 8004706:	e01c      	b.n	8004742 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <UART_SetConfig+0x304>)
 800470a:	617b      	str	r3, [r7, #20]
        break;
 800470c:	e019      	b.n	8004742 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7fe ff7b 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004712:	6178      	str	r0, [r7, #20]
        break;
 8004714:	e015      	b.n	8004742 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	617b      	str	r3, [r7, #20]
        break;
 800471c:	e011      	b.n	8004742 <UART_SetConfig+0x312>
 800471e:	bf00      	nop
 8004720:	efff69f3 	.word	0xefff69f3
 8004724:	40008000 	.word	0x40008000
 8004728:	40013800 	.word	0x40013800
 800472c:	40021000 	.word	0x40021000
 8004730:	40004400 	.word	0x40004400
 8004734:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	76bb      	strb	r3, [r7, #26]
        break;
 8004740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d075      	beq.n	8004834 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005a      	lsls	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	441a      	add	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	b29b      	uxth	r3, r3
 800475e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d916      	bls.n	8004794 <UART_SetConfig+0x364>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d212      	bcs.n	8004794 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f023 030f 	bic.w	r3, r3, #15
 8004776:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	b29a      	uxth	r2, r3
 8004784:	89fb      	ldrh	r3, [r7, #14]
 8004786:	4313      	orrs	r3, r2
 8004788:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	89fa      	ldrh	r2, [r7, #14]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e04f      	b.n	8004834 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	76bb      	strb	r3, [r7, #26]
 8004798:	e04c      	b.n	8004834 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 800479a:	7efb      	ldrb	r3, [r7, #27]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d828      	bhi.n	80047f2 <UART_SetConfig+0x3c2>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x378>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe ffb2 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 80047d0:	6178      	str	r0, [r7, #20]
        break;
 80047d2:	e013      	b.n	80047fc <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fe ffc4 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 80047d8:	6178      	str	r0, [r7, #20]
        break;
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <UART_SetConfig+0x41c>)
 80047de:	617b      	str	r3, [r7, #20]
        break;
 80047e0:	e00c      	b.n	80047fc <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe ff11 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80047e6:	6178      	str	r0, [r7, #20]
        break;
 80047e8:	e008      	b.n	80047fc <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	617b      	str	r3, [r7, #20]
        break;
 80047f0:	e004      	b.n	80047fc <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	76bb      	strb	r3, [r7, #26]
        break;
 80047fa:	bf00      	nop
    }

    if (pclk != 0U)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	085a      	lsrs	r2, r3, #1
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	441a      	add	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	b29b      	uxth	r3, r3
 8004816:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d908      	bls.n	8004830 <UART_SetConfig+0x400>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d204      	bcs.n	8004830 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	e001      	b.n	8004834 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004840:	7ebb      	ldrb	r3, [r7, #26]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800484c:	00f42400 	.word	0x00f42400

08004850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494e:	d10a      	bne.n	8004966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af02      	add	r7, sp, #8
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049a2:	f7fc faa5 	bl	8000ef0 <HAL_GetTick>
 80049a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d10e      	bne.n	80049d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f82a 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e020      	b.n	8004a16 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d10e      	bne.n	8004a00 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f814 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e00a      	b.n	8004a16 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	e05d      	b.n	8004aec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a36:	d059      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a38:	f7fc fa5a 	bl	8000ef0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11b      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e042      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02b      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa2:	d123      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004abc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e00f      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d092      	beq.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b14:	b084      	sub	sp, #16
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	f107 0014 	add.w	r0, r7, #20
 8004b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	b004      	add	sp, #16
 8004b34:	4770      	bx	lr

08004b36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b46:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b4a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b6c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	4013      	ands	r3, r2
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	f107 0014 	add.w	r0, r7, #20
 8004bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	b004      	add	sp, #16
 8004bf4:	4770      	bx	lr
	...

08004bf8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b09b      	sub	sp, #108	; 0x6c
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	78db      	ldrb	r3, [r3, #3]
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d81f      	bhi.n	8004c6a <USB_ActivateEndpoint+0x72>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <USB_ActivateEndpoint+0x38>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c73 	.word	0x08004c73
 8004c3c:	08004c4f 	.word	0x08004c4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c4c:	e012      	b.n	8004c74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c5a:	e00b      	b.n	8004c74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c68:	e004      	b.n	8004c74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c70:	e000      	b.n	8004c74 <USB_ActivateEndpoint+0x7c>
      break;
 8004c72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	b21a      	sxth	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	b21b      	sxth	r3, r3
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	b21b      	sxth	r3, r3
 8004cba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	441a      	add	r2, r3
 8004cc8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	7b1b      	ldrb	r3, [r3, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 8149 	bne.w	8004f7c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8084 	beq.w	8004dfc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	4413      	add	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	00da      	lsls	r2, r3, #3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	88db      	ldrh	r3, [r3, #6]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	81fb      	strh	r3, [r7, #14]
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01b      	beq.n	8004d78 <USB_ActivateEndpoint+0x180>
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	81bb      	strh	r3, [r7, #12]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	89bb      	ldrh	r3, [r7, #12]
 8004d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	78db      	ldrb	r3, [r3, #3]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d020      	beq.n	8004dc2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d96:	813b      	strh	r3, [r7, #8]
 8004d98:	893b      	ldrh	r3, [r7, #8]
 8004d9a:	f083 0320 	eor.w	r3, r3, #32
 8004d9e:	813b      	strh	r3, [r7, #8]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	893b      	ldrh	r3, [r7, #8]
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
 8004dc0:	e27f      	b.n	80052c2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd8:	817b      	strh	r3, [r7, #10]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	897b      	ldrh	r3, [r7, #10]
 8004de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]
 8004dfa:	e262      	b.n	80052c2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	4413      	add	r3, r2
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	00da      	lsls	r2, r3, #3
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	4413      	add	r3, r2
 8004e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	88db      	ldrh	r3, [r3, #6]
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	4413      	add	r3, r2
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	00da      	lsls	r2, r3, #3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d112      	bne.n	8004e82 <USB_ActivateEndpoint+0x28a>
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e02f      	b.n	8004ee2 <USB_ActivateEndpoint+0x2ea>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b3e      	cmp	r3, #62	; 0x3e
 8004e88:	d813      	bhi.n	8004eb2 <USB_ActivateEndpoint+0x2ba>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	663b      	str	r3, [r7, #96]	; 0x60
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <USB_ActivateEndpoint+0x2ac>
 8004e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	029b      	lsls	r3, r3, #10
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e017      	b.n	8004ee2 <USB_ActivateEndpoint+0x2ea>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <USB_ActivateEndpoint+0x2d4>
 8004ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	663b      	str	r3, [r7, #96]	; 0x60
 8004ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	029b      	lsls	r3, r3, #10
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	83fb      	strh	r3, [r7, #30]
 8004ef0:	8bfb      	ldrh	r3, [r7, #30]
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01b      	beq.n	8004f32 <USB_ActivateEndpoint+0x33a>
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	83bb      	strh	r3, [r7, #28]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	8bbb      	ldrh	r3, [r7, #28]
 8004f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f48:	837b      	strh	r3, [r7, #26]
 8004f4a:	8b7b      	ldrh	r3, [r7, #26]
 8004f4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f50:	837b      	strh	r3, [r7, #26]
 8004f52:	8b7b      	ldrh	r3, [r7, #26]
 8004f54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f58:	837b      	strh	r3, [r7, #26]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8b7b      	ldrh	r3, [r7, #26]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e1a2      	b.n	80052c2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc8:	4413      	add	r3, r2
 8004fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	00da      	lsls	r2, r3, #3
 8004fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fda:	657b      	str	r3, [r7, #84]	; 0x54
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	891b      	ldrh	r3, [r3, #8]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffc:	4413      	add	r3, r2
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	00da      	lsls	r2, r3, #3
 8005006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005008:	4413      	add	r3, r2
 800500a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	895b      	ldrh	r3, [r3, #10]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	b29b      	uxth	r3, r3
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 8091 	bne.w	800514c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005038:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800503a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <USB_ActivateEndpoint+0x482>
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	877b      	strh	r3, [r7, #58]	; 0x3a
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005076:	b29b      	uxth	r3, r3
 8005078:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	873b      	strh	r3, [r7, #56]	; 0x38
 8005088:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01b      	beq.n	80050ca <USB_ActivateEndpoint+0x4d2>
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510e:	b29b      	uxth	r3, r3
 8005110:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005128:	867b      	strh	r3, [r7, #50]	; 0x32
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]
 800514a:	e0ba      	b.n	80052c2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800515c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01d      	beq.n	80051a4 <USB_ActivateEndpoint+0x5ac>
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01d      	beq.n	80051fc <USB_ActivateEndpoint+0x604>
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d024      	beq.n	800524e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800521e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005222:	f083 0320 	eor.w	r3, r3, #32
 8005226:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
 800524c:	e01d      	b.n	800528a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005264:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005286:	b29b      	uxth	r3, r3
 8005288:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800529c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80052c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	376c      	adds	r7, #108	; 0x6c
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop

080052d4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b08d      	sub	sp, #52	; 0x34
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	7b1b      	ldrb	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 808e 	bne.w	8005404 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d044      	beq.n	800537a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	81bb      	strh	r3, [r7, #12]
 80052fe:	89bb      	ldrh	r3, [r7, #12]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <USB_DeactivateEndpoint+0x6c>
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	817b      	strh	r3, [r7, #10]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800533c:	b29b      	uxth	r3, r3
 800533e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005356:	813b      	strh	r3, [r7, #8]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	893b      	ldrh	r3, [r7, #8]
 8005364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	b29b      	uxth	r3, r3
 8005376:	8013      	strh	r3, [r2, #0]
 8005378:	e192      	b.n	80056a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	827b      	strh	r3, [r7, #18]
 8005388:	8a7b      	ldrh	r3, [r7, #18]
 800538a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01b      	beq.n	80053ca <USB_DeactivateEndpoint+0xf6>
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	823b      	strh	r3, [r7, #16]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	8a3b      	ldrh	r3, [r7, #16]
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e0:	81fb      	strh	r3, [r7, #14]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	89fb      	ldrh	r3, [r7, #14]
 80053ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fe:	b29b      	uxth	r3, r3
 8005400:	8013      	strh	r3, [r2, #0]
 8005402:	e14d      	b.n	80056a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 80a5 	bne.w	8005558 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	843b      	strh	r3, [r7, #32]
 800541c:	8c3b      	ldrh	r3, [r7, #32]
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01b      	beq.n	800545e <USB_DeactivateEndpoint+0x18a>
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	83fb      	strh	r3, [r7, #30]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	8bfb      	ldrh	r3, [r7, #30]
 800544a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	83bb      	strh	r3, [r7, #28]
 800546c:	8bbb      	ldrh	r3, [r7, #28]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01b      	beq.n	80054ae <USB_DeactivateEndpoint+0x1da>
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	837b      	strh	r3, [r7, #26]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	8b7b      	ldrh	r3, [r7, #26]
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	833b      	strh	r3, [r7, #24]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8b3b      	ldrh	r3, [r7, #24]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	82fb      	strh	r3, [r7, #22]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	8afb      	ldrh	r3, [r7, #22]
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005534:	82bb      	strh	r3, [r7, #20]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	441a      	add	r2, r3
 8005540:	8abb      	ldrh	r3, [r7, #20]
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
 8005556:	e0a3      	b.n	80056a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005566:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <USB_DeactivateEndpoint+0x2d4>
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <USB_DeactivateEndpoint+0x324>
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005646:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005664:	b29b      	uxth	r3, r3
 8005666:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3734      	adds	r7, #52	; 0x34
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b0c4      	sub	sp, #272	; 0x110
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	6018      	str	r0, [r3, #0]
 80056b8:	463b      	mov	r3, r7
 80056ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056bc:	463b      	mov	r3, r7
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	f040 8566 	bne.w	8006194 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d905      	bls.n	80056e4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056e2:	e004      	b.n	80056ee <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	7b1b      	ldrb	r3, [r3, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d12c      	bne.n	8005752 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6959      	ldr	r1, [r3, #20]
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	88da      	ldrh	r2, [r3, #6]
 8005704:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005708:	b29b      	uxth	r3, r3
 800570a:	1d38      	adds	r0, r7, #4
 800570c:	6800      	ldr	r0, [r0, #0]
 800570e:	f001 fa58 	bl	8006bc2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005712:	1d3b      	adds	r3, r7, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005720:	b29b      	uxth	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	00da      	lsls	r2, r3, #3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	4413      	add	r3, r2
 8005736:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800573a:	f107 0310 	add.w	r3, r7, #16
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005744:	b29a      	uxth	r2, r3
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	f000 bcec 	b.w	800612a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	78db      	ldrb	r3, [r3, #3]
 8005758:	2b02      	cmp	r3, #2
 800575a:	f040 8356 	bne.w	8005e0a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	463b      	mov	r3, r7
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	f240 82fa 	bls.w	8005d64 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80057b4:	463b      	mov	r3, r7
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057c8:	1ad2      	subs	r2, r2, r3
 80057ca:	463b      	mov	r3, r7
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 815e 	beq.w	8005aa8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ec:	1d3b      	adds	r3, r7, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d164      	bne.n	80058c6 <USB_EPStartXfer+0x218>
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	4413      	add	r3, r2
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00da      	lsls	r2, r3, #3
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	4413      	add	r3, r2
 8005820:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28
 8005826:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800582a:	2b00      	cmp	r3, #0
 800582c:	d112      	bne.n	8005854 <USB_EPStartXfer+0x1a6>
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005838:	b29a      	uxth	r2, r3
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584c:	b29a      	uxth	r2, r3
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e054      	b.n	80058fe <USB_EPStartXfer+0x250>
 8005854:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005858:	2b3e      	cmp	r3, #62	; 0x3e
 800585a:	d817      	bhi.n	800588c <USB_EPStartXfer+0x1de>
 800585c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <USB_EPStartXfer+0x1ce>
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29a      	uxth	r2, r3
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e038      	b.n	80058fe <USB_EPStartXfer+0x250>
 800588c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <USB_EPStartXfer+0x1fe>
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a6:	3b01      	subs	r3, #1
 80058a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e01b      	b.n	80058fe <USB_EPStartXfer+0x250>
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d116      	bne.n	80058fe <USB_EPStartXfer+0x250>
 80058d0:	1d3b      	adds	r3, r7, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058de:	4413      	add	r3, r2
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	00da      	lsls	r2, r3, #3
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	4413      	add	r3, r2
 80058ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
 80058f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	895b      	ldrh	r3, [r3, #10]
 8005904:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6959      	ldr	r1, [r3, #20]
 800590e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005912:	b29b      	uxth	r3, r3
 8005914:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005918:	1d38      	adds	r0, r7, #4
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	f001 f951 	bl	8006bc2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800592a:	441a      	add	r2, r3
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d90e      	bls.n	8005960 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800594c:	463b      	mov	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	621a      	str	r2, [r3, #32]
 800595e:	e008      	b.n	8005972 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d164      	bne.n	8005a46 <USB_EPStartXfer+0x398>
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	00da      	lsls	r2, r3, #3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d112      	bne.n	80059d4 <USB_EPStartXfer+0x326>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e057      	b.n	8005a84 <USB_EPStartXfer+0x3d6>
 80059d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059d8:	2b3e      	cmp	r3, #62	; 0x3e
 80059da:	d817      	bhi.n	8005a0c <USB_EPStartXfer+0x35e>
 80059dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <USB_EPStartXfer+0x34e>
 80059f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059f6:	3301      	adds	r3, #1
 80059f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	029b      	lsls	r3, r3, #10
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	e03b      	b.n	8005a84 <USB_EPStartXfer+0x3d6>
 8005a0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d104      	bne.n	8005a2c <USB_EPStartXfer+0x37e>
 8005a22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a26:	3b01      	subs	r3, #1
 8005a28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e01e      	b.n	8005a84 <USB_EPStartXfer+0x3d6>
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d119      	bne.n	8005a84 <USB_EPStartXfer+0x3d6>
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
 8005a56:	1d3b      	adds	r3, r7, #4
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	4413      	add	r3, r2
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	00da      	lsls	r2, r3, #3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	4413      	add	r3, r2
 8005a74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	891b      	ldrh	r3, [r3, #8]
 8005a8a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6959      	ldr	r1, [r3, #20]
 8005a94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005a9e:	1d38      	adds	r0, r7, #4
 8005aa0:	6800      	ldr	r0, [r0, #0]
 8005aa2:	f001 f88e 	bl	8006bc2 <USB_WritePMA>
 8005aa6:	e340      	b.n	800612a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d164      	bne.n	8005b7c <USB_EPStartXfer+0x4ce>
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	4413      	add	r3, r2
 8005ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aca:	463b      	mov	r3, r7
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	00da      	lsls	r2, r3, #3
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8005adc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d112      	bne.n	8005b0a <USB_EPStartXfer+0x45c>
 8005ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	801a      	strh	r2, [r3, #0]
 8005af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	e057      	b.n	8005bba <USB_EPStartXfer+0x50c>
 8005b0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b10:	d817      	bhi.n	8005b42 <USB_EPStartXfer+0x494>
 8005b12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <USB_EPStartXfer+0x484>
 8005b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	e03b      	b.n	8005bba <USB_EPStartXfer+0x50c>
 8005b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <USB_EPStartXfer+0x4b4>
 8005b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	029b      	lsls	r3, r3, #10
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b78:	801a      	strh	r2, [r3, #0]
 8005b7a:	e01e      	b.n	8005bba <USB_EPStartXfer+0x50c>
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d119      	bne.n	8005bba <USB_EPStartXfer+0x50c>
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9a:	4413      	add	r3, r2
 8005b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	00da      	lsls	r2, r3, #3
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bae:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	891b      	ldrh	r3, [r3, #8]
 8005bc0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6959      	ldr	r1, [r3, #20]
 8005bca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005bd4:	1d38      	adds	r0, r7, #4
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	f000 fff3 	bl	8006bc2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be6:	441a      	add	r2, r3
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d90e      	bls.n	8005c1c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c12:	1ad2      	subs	r2, r2, r3
 8005c14:	463b      	mov	r3, r7
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	621a      	str	r2, [r3, #32]
 8005c1a:	e008      	b.n	8005c2e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	647b      	str	r3, [r7, #68]	; 0x44
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d164      	bne.n	8005d08 <USB_EPStartXfer+0x65a>
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	4413      	add	r3, r2
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	00da      	lsls	r2, r3, #3
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c60:	4413      	add	r3, r2
 8005c62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d112      	bne.n	8005c96 <USB_EPStartXfer+0x5e8>
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e054      	b.n	8005d40 <USB_EPStartXfer+0x692>
 8005c96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9c:	d817      	bhi.n	8005cce <USB_EPStartXfer+0x620>
 8005c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ca8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <USB_EPStartXfer+0x610>
 8005cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cb8:	3301      	adds	r3, #1
 8005cba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e038      	b.n	8005d40 <USB_EPStartXfer+0x692>
 8005cce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <USB_EPStartXfer+0x640>
 8005ce4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	e01b      	b.n	8005d40 <USB_EPStartXfer+0x692>
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d116      	bne.n	8005d40 <USB_EPStartXfer+0x692>
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d20:	4413      	add	r3, r2
 8005d22:	647b      	str	r3, [r7, #68]	; 0x44
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	00da      	lsls	r2, r3, #3
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2e:	4413      	add	r3, r2
 8005d30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d34:	643b      	str	r3, [r7, #64]	; 0x40
 8005d36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d40:	463b      	mov	r3, r7
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	895b      	ldrh	r3, [r3, #10]
 8005d46:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6959      	ldr	r1, [r3, #20]
 8005d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d5a:	1d38      	adds	r0, r7, #4
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	f000 ff30 	bl	8006bc2 <USB_WritePMA>
 8005d62:	e1e2      	b.n	800612a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	663b      	str	r3, [r7, #96]	; 0x60
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc6:	4413      	add	r3, r2
 8005dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dca:	463b      	mov	r3, r7
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00da      	lsls	r2, r3, #3
 8005dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ddc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	891b      	ldrh	r3, [r3, #8]
 8005dec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6959      	ldr	r1, [r3, #20]
 8005df6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005e00:	1d38      	adds	r0, r7, #4
 8005e02:	6800      	ldr	r0, [r0, #0]
 8005e04:	f000 fedd 	bl	8006bc2 <USB_WritePMA>
 8005e08:	e18f      	b.n	800612a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 808f 	beq.w	8005f44 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e26:	1d3b      	adds	r3, r7, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d164      	bne.n	8005f00 <USB_EPStartXfer+0x852>
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e4a:	4413      	add	r3, r2
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	00da      	lsls	r2, r3, #3
 8005e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d112      	bne.n	8005e8e <USB_EPStartXfer+0x7e0>
 8005e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e054      	b.n	8005f38 <USB_EPStartXfer+0x88a>
 8005e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e92:	2b3e      	cmp	r3, #62	; 0x3e
 8005e94:	d817      	bhi.n	8005ec6 <USB_EPStartXfer+0x818>
 8005e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ea0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <USB_EPStartXfer+0x808>
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	029b      	lsls	r3, r3, #10
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	e038      	b.n	8005f38 <USB_EPStartXfer+0x88a>
 8005ec6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <USB_EPStartXfer+0x838>
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	029b      	lsls	r3, r3, #10
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e01b      	b.n	8005f38 <USB_EPStartXfer+0x88a>
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d116      	bne.n	8005f38 <USB_EPStartXfer+0x88a>
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f18:	4413      	add	r3, r2
 8005f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	00da      	lsls	r2, r3, #3
 8005f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f26:	4413      	add	r3, r2
 8005f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f38:	463b      	mov	r3, r7
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	895b      	ldrh	r3, [r3, #10]
 8005f3e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005f42:	e097      	b.n	8006074 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f44:	463b      	mov	r3, r7
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d168      	bne.n	8006020 <USB_EPStartXfer+0x972>
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f66:	4413      	add	r3, r2
 8005f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	00da      	lsls	r2, r3, #3
 8005f74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f78:	4413      	add	r3, r2
 8005f7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d112      	bne.n	8005fae <USB_EPStartXfer+0x900>
 8005f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e05d      	b.n	800606a <USB_EPStartXfer+0x9bc>
 8005fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fb4:	d817      	bhi.n	8005fe6 <USB_EPStartXfer+0x938>
 8005fb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <USB_EPStartXfer+0x928>
 8005fcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	029b      	lsls	r3, r3, #10
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e041      	b.n	800606a <USB_EPStartXfer+0x9bc>
 8005fe6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ff0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <USB_EPStartXfer+0x958>
 8005ffc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006000:	3b01      	subs	r3, #1
 8006002:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800600a:	b29b      	uxth	r3, r3
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	b29b      	uxth	r3, r3
 8006010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006018:	b29a      	uxth	r2, r3
 800601a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e024      	b.n	800606a <USB_EPStartXfer+0x9bc>
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d11f      	bne.n	800606a <USB_EPStartXfer+0x9bc>
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006032:	1d3b      	adds	r3, r7, #4
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006042:	4413      	add	r3, r2
 8006044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	00da      	lsls	r2, r3, #3
 8006050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006054:	4413      	add	r3, r2
 8006056:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800605a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800605e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006068:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	891b      	ldrh	r3, [r3, #8]
 8006070:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6959      	ldr	r1, [r3, #20]
 800607a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800607e:	b29b      	uxth	r3, r3
 8006080:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006084:	1d38      	adds	r0, r7, #4
 8006086:	6800      	ldr	r0, [r0, #0]
 8006088:	f000 fd9b 	bl	8006bc2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d122      	bne.n	80060dc <USB_EPStartXfer+0xa2e>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
 80060da:	e026      	b.n	800612a <USB_EPStartXfer+0xa7c>
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d121      	bne.n	800612a <USB_EPStartXfer+0xa7c>
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	463b      	mov	r3, r7
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006100:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006104:	1d3b      	adds	r3, r7, #4
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f107 020e 	add.w	r2, r7, #14
 8006140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006148:	8013      	strh	r3, [r2, #0]
 800614a:	f107 030e 	add.w	r3, r7, #14
 800614e:	f107 020e 	add.w	r2, r7, #14
 8006152:	8812      	ldrh	r2, [r2, #0]
 8006154:	f082 0210 	eor.w	r2, r2, #16
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	f107 030e 	add.w	r3, r7, #14
 800615e:	f107 020e 	add.w	r2, r7, #14
 8006162:	8812      	ldrh	r2, [r2, #0]
 8006164:	f082 0220 	eor.w	r2, r2, #32
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	f107 030e 	add.w	r3, r7, #14
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]
 8006192:	e3b5      	b.n	8006900 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	7b1b      	ldrb	r3, [r3, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 8090 	bne.w	80062c0 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d90e      	bls.n	80061ce <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80061b0:	463b      	mov	r3, r7
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80061ba:	463b      	mov	r3, r7
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061c4:	1ad2      	subs	r2, r2, r3
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	619a      	str	r2, [r3, #24]
 80061cc:	e008      	b.n	80061e0 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2200      	movs	r2, #0
 80061de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061e0:	1d3b      	adds	r3, r7, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061f8:	4413      	add	r3, r2
 80061fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	00da      	lsls	r2, r3, #3
 8006206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800620a:	4413      	add	r3, r2
 800620c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006214:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006218:	2b00      	cmp	r3, #0
 800621a:	d116      	bne.n	800624a <USB_EPStartXfer+0xb9c>
 800621c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006240:	b29a      	uxth	r2, r3
 8006242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e32c      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
 800624a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800624e:	2b3e      	cmp	r3, #62	; 0x3e
 8006250:	d818      	bhi.n	8006284 <USB_EPStartXfer+0xbd6>
 8006252:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800625c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <USB_EPStartXfer+0xbc4>
 8006268:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800626c:	3301      	adds	r3, #1
 800626e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006272:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006276:	b29b      	uxth	r3, r3
 8006278:	029b      	lsls	r3, r3, #10
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e30f      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
 8006284:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800628e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <USB_EPStartXfer+0xbf6>
 800629a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800629e:	3b01      	subs	r3, #1
 80062a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	029b      	lsls	r3, r3, #10
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e2f1      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	78db      	ldrb	r3, [r3, #3]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	f040 818f 	bne.w	80065ea <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062cc:	463b      	mov	r3, r7
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d175      	bne.n	80063c2 <USB_EPStartXfer+0xd14>
 80062d6:	1d3b      	adds	r3, r7, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062ee:	4413      	add	r3, r2
 80062f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	00da      	lsls	r2, r3, #3
 80062fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006300:	4413      	add	r3, r2
 8006302:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d116      	bne.n	8006342 <USB_EPStartXfer+0xc94>
 8006314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29a      	uxth	r2, r3
 800633a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	e065      	b.n	800640e <USB_EPStartXfer+0xd60>
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b3e      	cmp	r3, #62	; 0x3e
 800634a:	d81a      	bhi.n	8006382 <USB_EPStartXfer+0xcd4>
 800634c:	463b      	mov	r3, r7
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <USB_EPStartXfer+0xcc2>
 8006366:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800636a:	3301      	adds	r3, #1
 800636c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006374:	b29b      	uxth	r3, r3
 8006376:	029b      	lsls	r3, r3, #10
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e045      	b.n	800640e <USB_EPStartXfer+0xd60>
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	2b00      	cmp	r3, #0
 800639a:	d104      	bne.n	80063a6 <USB_EPStartXfer+0xcf8>
 800639c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063a0:	3b01      	subs	r3, #1
 80063a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e025      	b.n	800640e <USB_EPStartXfer+0xd60>
 80063c2:	463b      	mov	r3, r7
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d120      	bne.n	800640e <USB_EPStartXfer+0xd60>
 80063cc:	1d3b      	adds	r3, r7, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063d4:	1d3b      	adds	r3, r7, #4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063dc:	b29b      	uxth	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063e4:	4413      	add	r3, r2
 80063e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	00da      	lsls	r2, r3, #3
 80063f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063f6:	4413      	add	r3, r2
 80063f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d175      	bne.n	800650c <USB_EPStartXfer+0xe5e>
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006430:	b29b      	uxth	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006438:	4413      	add	r3, r2
 800643a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	00da      	lsls	r2, r3, #3
 8006446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800644a:	4413      	add	r3, r2
 800644c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d116      	bne.n	800648c <USB_EPStartXfer+0xdde>
 800645e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800646a:	b29a      	uxth	r2, r3
 800646c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006482:	b29a      	uxth	r2, r3
 8006484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e061      	b.n	8006550 <USB_EPStartXfer+0xea2>
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b3e      	cmp	r3, #62	; 0x3e
 8006494:	d81a      	bhi.n	80064cc <USB_EPStartXfer+0xe1e>
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	085b      	lsrs	r3, r3, #1
 800649e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <USB_EPStartXfer+0xe0c>
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b4:	3301      	adds	r3, #1
 80064b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	b29b      	uxth	r3, r3
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e041      	b.n	8006550 <USB_EPStartXfer+0xea2>
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <USB_EPStartXfer+0xe42>
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006502:	b29a      	uxth	r2, r3
 8006504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e021      	b.n	8006550 <USB_EPStartXfer+0xea2>
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d11c      	bne.n	8006550 <USB_EPStartXfer+0xea2>
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006526:	4413      	add	r3, r2
 8006528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	00da      	lsls	r2, r3, #3
 8006534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006538:	4413      	add	r3, r2
 800653a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800653e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800654e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 81a4 	beq.w	80068a4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800655c:	1d3b      	adds	r3, r7, #4
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006570:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <USB_EPStartXfer+0xeda>
 800657c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10d      	bne.n	80065a4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006588:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800658c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 8187 	bne.w	80068a4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006596:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 8180 	bne.w	80068a4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]
 80065e8:	e15c      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065ea:	463b      	mov	r3, r7
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	78db      	ldrb	r3, [r3, #3]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	f040 8155 	bne.w	80068a0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	463b      	mov	r3, r7
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	d90e      	bls.n	8006624 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8006606:	463b      	mov	r3, r7
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	619a      	str	r2, [r3, #24]
 8006622:	e008      	b.n	8006636 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d16f      	bne.n	8006720 <USB_EPStartXfer+0x1072>
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006648:	1d3b      	adds	r3, r7, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006658:	4413      	add	r3, r2
 800665a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800665e:	463b      	mov	r3, r7
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	00da      	lsls	r2, r3, #3
 8006666:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800666a:	4413      	add	r3, r2
 800666c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006678:	2b00      	cmp	r3, #0
 800667a:	d116      	bne.n	80066aa <USB_EPStartXfer+0xffc>
 800667c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e05f      	b.n	800676a <USB_EPStartXfer+0x10bc>
 80066aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ae:	2b3e      	cmp	r3, #62	; 0x3e
 80066b0:	d818      	bhi.n	80066e4 <USB_EPStartXfer+0x1036>
 80066b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <USB_EPStartXfer+0x1024>
 80066c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066cc:	3301      	adds	r3, #1
 80066ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	029b      	lsls	r3, r3, #10
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e042      	b.n	800676a <USB_EPStartXfer+0x10bc>
 80066e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <USB_EPStartXfer+0x1056>
 80066fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fe:	3b01      	subs	r3, #1
 8006700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006708:	b29b      	uxth	r3, r3
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006716:	b29a      	uxth	r2, r3
 8006718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800671c:	801a      	strh	r2, [r3, #0]
 800671e:	e024      	b.n	800676a <USB_EPStartXfer+0x10bc>
 8006720:	463b      	mov	r3, r7
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d11f      	bne.n	800676a <USB_EPStartXfer+0x10bc>
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006742:	4413      	add	r3, r2
 8006744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	00da      	lsls	r2, r3, #3
 8006750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006754:	4413      	add	r3, r2
 8006756:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800675a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800675e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006762:	b29a      	uxth	r2, r3
 8006764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006772:	463b      	mov	r3, r7
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d16f      	bne.n	800685c <USB_EPStartXfer+0x11ae>
 800677c:	1d3b      	adds	r3, r7, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006784:	1d3b      	adds	r3, r7, #4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678c:	b29b      	uxth	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006794:	4413      	add	r3, r2
 8006796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800679a:	463b      	mov	r3, r7
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	00da      	lsls	r2, r3, #3
 80067a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067a6:	4413      	add	r3, r2
 80067a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d116      	bne.n	80067e6 <USB_EPStartXfer+0x1138>
 80067b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e05e      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
 80067e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ea:	2b3e      	cmp	r3, #62	; 0x3e
 80067ec:	d818      	bhi.n	8006820 <USB_EPStartXfer+0x1172>
 80067ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <USB_EPStartXfer+0x1160>
 8006804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006808:	3301      	adds	r3, #1
 800680a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	b29b      	uxth	r3, r3
 8006814:	029b      	lsls	r3, r3, #10
 8006816:	b29a      	uxth	r2, r3
 8006818:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	e041      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
 8006820:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800682a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <USB_EPStartXfer+0x1192>
 8006836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683a:	3b01      	subs	r3, #1
 800683c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006844:	b29b      	uxth	r3, r3
 8006846:	029b      	lsls	r3, r3, #10
 8006848:	b29b      	uxth	r3, r3
 800684a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006852:	b29a      	uxth	r2, r3
 8006854:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	e023      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d11e      	bne.n	80068a4 <USB_EPStartXfer+0x11f6>
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006876:	4413      	add	r3, r2
 8006878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00da      	lsls	r2, r3, #3
 8006884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006888:	4413      	add	r3, r2
 800688a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800688e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e001      	b.n	80068a4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e02e      	b.n	8006902 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068a4:	1d3b      	adds	r3, r7, #4
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	463b      	mov	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	463b      	mov	r3, r7
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d020      	beq.n	8006960 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006934:	81bb      	strh	r3, [r7, #12]
 8006936:	89bb      	ldrh	r3, [r7, #12]
 8006938:	f083 0310 	eor.w	r3, r3, #16
 800693c:	81bb      	strh	r3, [r7, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	89bb      	ldrh	r3, [r7, #12]
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
 800695e:	e01f      	b.n	80069a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	81fb      	strh	r3, [r7, #14]
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800697e:	81fb      	strh	r3, [r7, #14]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	441a      	add	r2, r3
 800698a:	89fb      	ldrh	r3, [r7, #14]
 800698c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699c:	b29b      	uxth	r3, r3
 800699e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b087      	sub	sp, #28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	7b1b      	ldrb	r3, [r3, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 809d 	bne.w	8006afc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d04c      	beq.n	8006a64 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	823b      	strh	r3, [r7, #16]
 80069d8:	8a3b      	ldrh	r3, [r7, #16]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01b      	beq.n	8006a1a <USB_EPClearStall+0x6c>
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f8:	81fb      	strh	r3, [r7, #14]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	78db      	ldrb	r3, [r3, #3]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d06c      	beq.n	8006afc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a38:	81bb      	strh	r3, [r7, #12]
 8006a3a:	89bb      	ldrh	r3, [r7, #12]
 8006a3c:	f083 0320 	eor.w	r3, r3, #32
 8006a40:	81bb      	strh	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	89bb      	ldrh	r3, [r7, #12]
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]
 8006a62:	e04b      	b.n	8006afc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	82fb      	strh	r3, [r7, #22]
 8006a72:	8afb      	ldrh	r3, [r7, #22]
 8006a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <USB_EPClearStall+0x106>
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	82bb      	strh	r3, [r7, #20]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	441a      	add	r2, r3
 8006a9e:	8abb      	ldrh	r3, [r7, #20]
 8006aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	827b      	strh	r3, [r7, #18]
 8006acc:	8a7b      	ldrh	r3, [r7, #18]
 8006ace:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ad2:	827b      	strh	r3, [r7, #18]
 8006ad4:	8a7b      	ldrh	r3, [r7, #18]
 8006ad6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ada:	827b      	strh	r3, [r7, #18]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	8a7b      	ldrh	r3, [r7, #18]
 8006ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d103      	bne.n	8006b24 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2280      	movs	r2, #128	; 0x80
 8006b20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b08d      	sub	sp, #52	; 0x34
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	461a      	mov	r2, r3
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	80fb      	strh	r3, [r7, #6]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006be8:	88fa      	ldrh	r2, [r7, #6]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf8:	e01b      	b.n	8006c32 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	3301      	adds	r3, #1
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	3302      	adds	r3, #2
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	3301      	adds	r3, #1
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e0      	bne.n	8006bfa <USB_WritePMA+0x38>
  }
}
 8006c38:	bf00      	nop
 8006c3a:	3734      	adds	r7, #52	; 0x34
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b08b      	sub	sp, #44	; 0x2c
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	460b      	mov	r3, r1
 8006c54:	80fb      	strh	r3, [r7, #6]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c5a:	88bb      	ldrh	r3, [r7, #4]
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c6a:	88fa      	ldrh	r2, [r7, #6]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c74:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7a:	e018      	b.n	8006cae <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	3302      	adds	r3, #2
 8006c88:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3301      	adds	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	3b01      	subs	r3, #1
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e3      	bne.n	8006c7c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006cb4:	88bb      	ldrh	r3, [r7, #4]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	701a      	strb	r2, [r3, #0]
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	372c      	adds	r7, #44	; 0x2c
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ce8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cec:	f004 ff60 	bl	800bbb0 <malloc>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d02:	2302      	movs	r3, #2
 8006d04:	e066      	b.n	8006dd4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7c1b      	ldrb	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d119      	bne.n	8006d4a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	2181      	movs	r1, #129	; 0x81
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f004 fd18 	bl	800b754 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d2e:	2202      	movs	r2, #2
 8006d30:	2101      	movs	r1, #1
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f004 fd0e 	bl	800b754 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2210      	movs	r2, #16
 8006d44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d48:	e016      	b.n	8006d78 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	2181      	movs	r1, #129	; 0x81
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f004 fcff 	bl	800b754 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	2202      	movs	r2, #2
 8006d60:	2101      	movs	r1, #1
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f004 fcf6 	bl	800b754 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2210      	movs	r2, #16
 8006d74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d78:	2308      	movs	r3, #8
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	2182      	movs	r1, #130	; 0x82
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f004 fce8 	bl	800b754 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7c1b      	ldrb	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db8:	2101      	movs	r1, #1
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f004 fe46 	bl	800ba4c <USBD_LL_PrepareReceive>
 8006dc0:	e007      	b.n	8006dd2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f004 fe3d 	bl	800ba4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006de8:	2181      	movs	r1, #129	; 0x81
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f004 fcf0 	bl	800b7d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006df6:	2101      	movs	r1, #1
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f004 fce9 	bl	800b7d0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e06:	2182      	movs	r1, #130	; 0x82
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f004 fce1 	bl	800b7d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00e      	beq.n	8006e46 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f004 fec1 	bl	800bbc0 <free>
    pdev->pClassData = NULL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d03a      	beq.n	8006ef0 <USBD_CDC_Setup+0xa0>
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	f040 8097 	bne.w	8006fae <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	88db      	ldrh	r3, [r3, #6]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d029      	beq.n	8006edc <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da11      	bge.n	8006eb6 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006e9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	88d2      	ldrh	r2, [r2, #6]
 8006ea4:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ea6:	6939      	ldr	r1, [r7, #16]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	88db      	ldrh	r3, [r3, #6]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fa5d 	bl	800836e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006eb4:	e082      	b.n	8006fbc <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	785a      	ldrb	r2, [r3, #1]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	88db      	ldrh	r3, [r3, #6]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ecc:	6939      	ldr	r1, [r7, #16]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	88db      	ldrh	r3, [r3, #6]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fa76 	bl	80083c6 <USBD_CtlPrepareRx>
      break;
 8006eda:	e06f      	b.n	8006fbc <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	7850      	ldrb	r0, [r2, #1]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	4798      	blx	r3
      break;
 8006eee:	e065      	b.n	8006fbc <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b0b      	cmp	r3, #11
 8006ef6:	d84f      	bhi.n	8006f98 <USBD_CDC_Setup+0x148>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <USBD_CDC_Setup+0xb0>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f31 	.word	0x08006f31
 8006f04:	08006fa7 	.word	0x08006fa7
 8006f08:	08006f99 	.word	0x08006f99
 8006f0c:	08006f99 	.word	0x08006f99
 8006f10:	08006f99 	.word	0x08006f99
 8006f14:	08006f99 	.word	0x08006f99
 8006f18:	08006f99 	.word	0x08006f99
 8006f1c:	08006f99 	.word	0x08006f99
 8006f20:	08006f99 	.word	0x08006f99
 8006f24:	08006f99 	.word	0x08006f99
 8006f28:	08006f59 	.word	0x08006f59
 8006f2c:	08006f81 	.word	0x08006f81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d107      	bne.n	8006f4a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f3a:	f107 030c 	add.w	r3, r7, #12
 8006f3e:	2202      	movs	r2, #2
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fa13 	bl	800836e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f48:	e030      	b.n	8006fac <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f99d 	bl	800828c <USBD_CtlError>
            ret = USBD_FAIL;
 8006f52:	2303      	movs	r3, #3
 8006f54:	75fb      	strb	r3, [r7, #23]
          break;
 8006f56:	e029      	b.n	8006fac <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d107      	bne.n	8006f72 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f62:	f107 030f 	add.w	r3, r7, #15
 8006f66:	2201      	movs	r2, #1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f9ff 	bl	800836e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f70:	e01c      	b.n	8006fac <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f989 	bl	800828c <USBD_CtlError>
            ret = USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7e:	e015      	b.n	8006fac <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d00f      	beq.n	8006faa <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f97d 	bl	800828c <USBD_CtlError>
            ret = USBD_FAIL;
 8006f92:	2303      	movs	r3, #3
 8006f94:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f96:	e008      	b.n	8006faa <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f976 	bl	800828c <USBD_CtlError>
          ret = USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fa4:	e002      	b.n	8006fac <USBD_CDC_Setup+0x15c>
          break;
 8006fa6:	bf00      	nop
 8006fa8:	e008      	b.n	8006fbc <USBD_CDC_Setup+0x16c>
          break;
 8006faa:	bf00      	nop
      }
      break;
 8006fac:	e006      	b.n	8006fbc <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 f96b 	bl	800828c <USBD_CtlError>
      ret = USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fba:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e04f      	b.n	800708a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	440b      	add	r3, r1
 8007000:	3318      	adds	r3, #24
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d029      	beq.n	800705c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	3318      	adds	r3, #24
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	78f9      	ldrb	r1, [r7, #3]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	460b      	mov	r3, r1
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4403      	add	r3, r0
 8007028:	3338      	adds	r3, #56	; 0x38
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007030:	fb03 f301 	mul.w	r3, r3, r1
 8007034:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007036:	2b00      	cmp	r3, #0
 8007038:	d110      	bne.n	800705c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	3318      	adds	r3, #24
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800704e:	78f9      	ldrb	r1, [r7, #3]
 8007050:	2300      	movs	r3, #0
 8007052:	2200      	movs	r2, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f004 fcc1 	bl	800b9dc <USBD_LL_Transmit>
 800705a:	e015      	b.n	8007088 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e015      	b.n	80070e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f004 fcff 	bl	800babc <USBD_LL_GetRxDataSize>
 80070be:	4602      	mov	r2, r0
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070da:	4611      	mov	r1, r2
 80070dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d015      	beq.n	800712e <USBD_CDC_EP0_RxReady+0x46>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007108:	2bff      	cmp	r3, #255	; 0xff
 800710a:	d010      	beq.n	800712e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800711a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007122:	b292      	uxth	r2, r2
 8007124:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	22ff      	movs	r2, #255	; 0xff
 800712a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2243      	movs	r2, #67	; 0x43
 8007144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007146:	4b03      	ldr	r3, [pc, #12]	; (8007154 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	20000094 	.word	0x20000094

08007158 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2243      	movs	r2, #67	; 0x43
 8007164:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007166:	4b03      	ldr	r3, [pc, #12]	; (8007174 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	20000050 	.word	0x20000050

08007178 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2243      	movs	r2, #67	; 0x43
 8007184:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007186:	4b03      	ldr	r3, [pc, #12]	; (8007194 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	200000d8 	.word	0x200000d8

08007198 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	220a      	movs	r2, #10
 80071a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80071a6:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	2000000c 	.word	0x2000000c

080071b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e004      	b.n	80071d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b087      	sub	sp, #28
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007224:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800724a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007256:	2303      	movs	r3, #3
 8007258:	e016      	b.n	8007288 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7c1b      	ldrb	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800726c:	2101      	movs	r1, #1
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f004 fbec 	bl	800ba4c <USBD_LL_PrepareReceive>
 8007274:	e007      	b.n	8007286 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	2101      	movs	r1, #1
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f004 fbe3 	bl	800ba4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e01f      	b.n	80072e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f004 f9a5 	bl	800b62c <USBD_LL_Init>
 80072e2:	4603      	mov	r3, r0
 80072e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	e016      	b.n	8007336 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00b      	beq.n	8007334 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	f107 020e 	add.w	r2, r7, #14
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	4602      	mov	r2, r0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f004 f9d2 	bl	800b6f0 <USBD_LL_Start>
 800734c:	4603      	mov	r3, r0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d009      	beq.n	800739a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
 8007396:	4603      	mov	r3, r0
 8007398:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	4611      	mov	r1, r2
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	4798      	blx	r3
  }

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 ff16 	bl	8008218 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2b01      	cmp	r3, #1
 800740e:	d00e      	beq.n	800742e <USBD_LL_SetupStage+0x5a>
 8007410:	2b01      	cmp	r3, #1
 8007412:	d302      	bcc.n	800741a <USBD_LL_SetupStage+0x46>
 8007414:	2b02      	cmp	r3, #2
 8007416:	d014      	beq.n	8007442 <USBD_LL_SetupStage+0x6e>
 8007418:	e01d      	b.n	8007456 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9d6 	bl	80077d4 <USBD_StdDevReq>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e020      	b.n	8007470 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa3a 	bl	80078b0 <USBD_StdItfReq>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	e016      	b.n	8007470 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa76 	bl	800793c <USBD_StdEPReq>
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
      break;
 8007454:	e00c      	b.n	8007470 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800745c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007460:	b2db      	uxtb	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f004 f9e9 	bl	800b83c <USBD_LL_StallEP>
 800746a:	4603      	mov	r3, r0
 800746c:	73fb      	strb	r3, [r7, #15]
      break;
 800746e:	bf00      	nop
  }

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b086      	sub	sp, #24
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	460b      	mov	r3, r1
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007488:	7afb      	ldrb	r3, [r7, #11]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d137      	bne.n	80074fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007494:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800749c:	2b03      	cmp	r3, #3
 800749e:	d14a      	bne.n	8007536 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d913      	bls.n	80074d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	1ad2      	subs	r2, r2, r3
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	4293      	cmp	r3, r2
 80074c4:	bf28      	it	cs
 80074c6:	4613      	movcs	r3, r2
 80074c8:	461a      	mov	r2, r3
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 ff97 	bl	8008400 <USBD_CtlContinueRx>
 80074d2:	e030      	b.n	8007536 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d105      	bne.n	80074f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 ff93 	bl	8008422 <USBD_CtlSendStatus>
 80074fc:	e01b      	b.n	8007536 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d013      	beq.n	8007532 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007510:	2b03      	cmp	r3, #3
 8007512:	d10e      	bne.n	8007532 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	7afa      	ldrb	r2, [r7, #11]
 800751e:	4611      	mov	r1, r2
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	4798      	blx	r3
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	e002      	b.n	8007538 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	e000      	b.n	8007538 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	460b      	mov	r3, r1
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d16a      	bne.n	800762a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3314      	adds	r3, #20
 8007558:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007560:	2b02      	cmp	r3, #2
 8007562:	d155      	bne.n	8007610 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	429a      	cmp	r2, r3
 800756e:	d914      	bls.n	800759a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	1ad2      	subs	r2, r2, r3
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	461a      	mov	r2, r3
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 ff0c 	bl	80083a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758c:	2300      	movs	r3, #0
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f004 fa5a 	bl	800ba4c <USBD_LL_PrepareReceive>
 8007598:	e03a      	b.n	8007610 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d11c      	bne.n	80075e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d316      	bcc.n	80075e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075bc:	429a      	cmp	r2, r3
 80075be:	d20f      	bcs.n	80075e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075c0:	2200      	movs	r2, #0
 80075c2:	2100      	movs	r1, #0
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 feed 	bl	80083a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d2:	2300      	movs	r3, #0
 80075d4:	2200      	movs	r2, #0
 80075d6:	2100      	movs	r1, #0
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f004 fa37 	bl	800ba4c <USBD_LL_PrepareReceive>
 80075de:	e017      	b.n	8007610 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d105      	bne.n	8007602 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007602:	2180      	movs	r1, #128	; 0x80
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f004 f919 	bl	800b83c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 ff1c 	bl	8008448 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007616:	2b01      	cmp	r3, #1
 8007618:	d123      	bne.n	8007662 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff fe9b 	bl	8007356 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007628:	e01b      	b.n	8007662 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d013      	beq.n	800765e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800763c:	2b03      	cmp	r3, #3
 800763e:	d10e      	bne.n	800765e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	7afa      	ldrb	r2, [r7, #11]
 800764a:	4611      	mov	r1, r2
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	4798      	blx	r3
 8007650:	4603      	mov	r3, r0
 8007652:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	e002      	b.n	8007664 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800765e:	2303      	movs	r3, #3
 8007660:	e000      	b.n	8007664 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007698:	2b00      	cmp	r3, #0
 800769a:	d009      	beq.n	80076b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6852      	ldr	r2, [r2, #4]
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	4611      	mov	r1, r2
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f004 f84c 	bl	800b754 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2240      	movs	r2, #64	; 0x40
 80076c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076cc:	2340      	movs	r3, #64	; 0x40
 80076ce:	2200      	movs	r2, #0
 80076d0:	2180      	movs	r1, #128	; 0x80
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f004 f83e 	bl	800b754 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2240      	movs	r2, #64	; 0x40
 80076e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	78fa      	ldrb	r2, [r7, #3]
 80076fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2204      	movs	r2, #4
 8007726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007746:	2b04      	cmp	r3, #4
 8007748:	d105      	bne.n	8007756 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007772:	2b03      	cmp	r3, #3
 8007774:	d10b      	bne.n	800778e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	3301      	adds	r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077b6:	8a3b      	ldrh	r3, [r7, #16]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b21a      	sxth	r2, r3
 80077bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b21b      	sxth	r3, r3
 80077c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077c6:	89fb      	ldrh	r3, [r7, #14]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	371c      	adds	r7, #28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d004      	beq.n	80077f8 <USBD_StdDevReq+0x24>
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d002      	beq.n	80077f8 <USBD_StdDevReq+0x24>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <USBD_StdDevReq+0x38>
 80077f6:	e050      	b.n	800789a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
    break;
 800780a:	e04b      	b.n	80078a4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b09      	cmp	r3, #9
 8007812:	d83c      	bhi.n	800788e <USBD_StdDevReq+0xba>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBD_StdDevReq+0x48>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007871 	.word	0x08007871
 8007820:	08007885 	.word	0x08007885
 8007824:	0800788f 	.word	0x0800788f
 8007828:	0800787b 	.word	0x0800787b
 800782c:	0800788f 	.word	0x0800788f
 8007830:	0800784f 	.word	0x0800784f
 8007834:	08007845 	.word	0x08007845
 8007838:	0800788f 	.word	0x0800788f
 800783c:	08007867 	.word	0x08007867
 8007840:	08007859 	.word	0x08007859
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9d0 	bl	8007bec <USBD_GetDescriptor>
      break;
 800784c:	e024      	b.n	8007898 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fb5f 	bl	8007f14 <USBD_SetAddress>
      break;
 8007856:	e01f      	b.n	8007898 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fb9c 	bl	8007f98 <USBD_SetConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
      break;
 8007864:	e018      	b.n	8007898 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc39 	bl	80080e0 <USBD_GetConfig>
      break;
 800786e:	e013      	b.n	8007898 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fc68 	bl	8008148 <USBD_GetStatus>
      break;
 8007878:	e00e      	b.n	8007898 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc96 	bl	80081ae <USBD_SetFeature>
      break;
 8007882:	e009      	b.n	8007898 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fca5 	bl	80081d6 <USBD_ClrFeature>
      break;
 800788c:	e004      	b.n	8007898 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fcfb 	bl	800828c <USBD_CtlError>
      break;
 8007896:	bf00      	nop
    }
    break;
 8007898:	e004      	b.n	80078a4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fcf5 	bl	800828c <USBD_CtlError>
    break;
 80078a2:	bf00      	nop
  }

  return ret;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d003      	beq.n	80078d2 <USBD_StdItfReq+0x22>
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d001      	beq.n	80078d2 <USBD_StdItfReq+0x22>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d12a      	bne.n	8007928 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	3b01      	subs	r3, #1
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d81d      	bhi.n	800791a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	889b      	ldrh	r3, [r3, #4]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d813      	bhi.n	8007910 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d110      	bne.n	8007924 <USBD_StdItfReq+0x74>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10d      	bne.n	8007924 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fd8a 	bl	8008422 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800790e:	e009      	b.n	8007924 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fcba 	bl	800828c <USBD_CtlError>
      break;
 8007918:	e004      	b.n	8007924 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fcb5 	bl	800828c <USBD_CtlError>
      break;
 8007922:	e000      	b.n	8007926 <USBD_StdItfReq+0x76>
      break;
 8007924:	bf00      	nop
    }
    break;
 8007926:	e004      	b.n	8007932 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fcae 	bl	800828c <USBD_CtlError>
    break;
 8007930:	bf00      	nop
  }

  return ret;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007958:	2b20      	cmp	r3, #32
 800795a:	d004      	beq.n	8007966 <USBD_StdEPReq+0x2a>
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d002      	beq.n	8007966 <USBD_StdEPReq+0x2a>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <USBD_StdEPReq+0x3e>
 8007964:	e137      	b.n	8007bd6 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]
    break;
 8007978:	e132      	b.n	8007be0 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d03e      	beq.n	8007a00 <USBD_StdEPReq+0xc4>
 8007982:	2b03      	cmp	r3, #3
 8007984:	d002      	beq.n	800798c <USBD_StdEPReq+0x50>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d079      	beq.n	8007a7e <USBD_StdEPReq+0x142>
 800798a:	e11e      	b.n	8007bca <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007992:	2b02      	cmp	r3, #2
 8007994:	d002      	beq.n	800799c <USBD_StdEPReq+0x60>
 8007996:	2b03      	cmp	r3, #3
 8007998:	d015      	beq.n	80079c6 <USBD_StdEPReq+0x8a>
 800799a:	e02b      	b.n	80079f4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <USBD_StdEPReq+0x80>
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b80      	cmp	r3, #128	; 0x80
 80079a6:	d009      	beq.n	80079bc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f003 ff45 	bl	800b83c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b2:	2180      	movs	r1, #128	; 0x80
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f003 ff41 	bl	800b83c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079ba:	e020      	b.n	80079fe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fc64 	bl	800828c <USBD_CtlError>
        break;
 80079c4:	e01b      	b.n	80079fe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10e      	bne.n	80079ec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <USBD_StdEPReq+0xb0>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b80      	cmp	r3, #128	; 0x80
 80079d8:	d008      	beq.n	80079ec <USBD_StdEPReq+0xb0>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f003 ff28 	bl	800b83c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fd18 	bl	8008422 <USBD_CtlSendStatus>

        break;
 80079f2:	e004      	b.n	80079fe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fc48 	bl	800828c <USBD_CtlError>
        break;
 80079fc:	bf00      	nop
      }
      break;
 80079fe:	e0e9      	b.n	8007bd4 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d002      	beq.n	8007a10 <USBD_StdEPReq+0xd4>
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d015      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a0e:	e02f      	b.n	8007a70 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00c      	beq.n	8007a30 <USBD_StdEPReq+0xf4>
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b80      	cmp	r3, #128	; 0x80
 8007a1a:	d009      	beq.n	8007a30 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f003 ff0b 	bl	800b83c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f003 ff07 	bl	800b83c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a2e:	e025      	b.n	8007a7c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fc2a 	bl	800828c <USBD_CtlError>
        break;
 8007a38:	e020      	b.n	8007a7c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11b      	bne.n	8007a7a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f003 ff29 	bl	800b8a8 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fce3 	bl	8008422 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a6e:	e004      	b.n	8007a7a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fc0a 	bl	800828c <USBD_CtlError>
        break;
 8007a78:	e000      	b.n	8007a7c <USBD_StdEPReq+0x140>
        break;
 8007a7a:	bf00      	nop
      }
      break;
 8007a7c:	e0aa      	b.n	8007bd4 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d002      	beq.n	8007a8e <USBD_StdEPReq+0x152>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d032      	beq.n	8007af2 <USBD_StdEPReq+0x1b6>
 8007a8c:	e097      	b.n	8007bbe <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <USBD_StdEPReq+0x168>
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d004      	beq.n	8007aa4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fbf5 	bl	800828c <USBD_CtlError>
          break;
 8007aa2:	e091      	b.n	8007bc8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da0b      	bge.n	8007ac4 <USBD_StdEPReq+0x188>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	3310      	adds	r3, #16
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	e00b      	b.n	8007adc <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	4413      	add	r3, r2
 8007ada:	3304      	adds	r3, #4
 8007adc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fc3f 	bl	800836e <USBD_CtlSendData>
        break;
 8007af0:	e06a      	b.n	8007bc8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007af2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da11      	bge.n	8007b1e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	440b      	add	r3, r1
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d117      	bne.n	8007b44 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fbb8 	bl	800828c <USBD_CtlError>
            break;
 8007b1c:	e054      	b.n	8007bc8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	f003 020f 	and.w	r2, r3, #15
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fba5 	bl	800828c <USBD_CtlError>
            break;
 8007b42:	e041      	b.n	8007bc8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	da0b      	bge.n	8007b64 <USBD_StdEPReq+0x228>
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3304      	adds	r3, #4
 8007b62:	e00b      	b.n	8007b7c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <USBD_StdEPReq+0x24e>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b80      	cmp	r3, #128	; 0x80
 8007b88:	d103      	bne.n	8007b92 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e00e      	b.n	8007bb0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f003 febc 	bl	800b914 <USBD_LL_IsStallEP>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	e002      	b.n	8007bb0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fbd9 	bl	800836e <USBD_CtlSendData>
          break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb63 	bl	800828c <USBD_CtlError>
        break;
 8007bc6:	bf00      	nop
      }
      break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb5d 	bl	800828c <USBD_CtlError>
      break;
 8007bd2:	bf00      	nop
    }
    break;
 8007bd4:	e004      	b.n	8007be0 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fb57 	bl	800828c <USBD_CtlError>
    break;
 8007bde:	bf00      	nop
  }

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	0a1b      	lsrs	r3, r3, #8
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	2b0e      	cmp	r3, #14
 8007c0e:	f200 8152 	bhi.w	8007eb6 <USBD_GetDescriptor+0x2ca>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <USBD_GetDescriptor+0x2c>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c89 	.word	0x08007c89
 8007c1c:	08007ca1 	.word	0x08007ca1
 8007c20:	08007ce1 	.word	0x08007ce1
 8007c24:	08007eb7 	.word	0x08007eb7
 8007c28:	08007eb7 	.word	0x08007eb7
 8007c2c:	08007e57 	.word	0x08007e57
 8007c30:	08007e83 	.word	0x08007e83
 8007c34:	08007eb7 	.word	0x08007eb7
 8007c38:	08007eb7 	.word	0x08007eb7
 8007c3c:	08007eb7 	.word	0x08007eb7
 8007c40:	08007eb7 	.word	0x08007eb7
 8007c44:	08007eb7 	.word	0x08007eb7
 8007c48:	08007eb7 	.word	0x08007eb7
 8007c4c:	08007eb7 	.word	0x08007eb7
 8007c50:	08007c55 	.word	0x08007c55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007c76:	e126      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb06 	bl	800828c <USBD_CtlError>
      err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
    break;
 8007c86:	e11e      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 0108 	add.w	r1, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
    break;
 8007c9e:	e112      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	7c1b      	ldrb	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10d      	bne.n	8007cc4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	f107 0208 	add.w	r2, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007cc2:	e100      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	f107 0208 	add.w	r2, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	2202      	movs	r2, #2
 8007cdc:	701a      	strb	r2, [r3, #0]
    break;
 8007cde:	e0f2      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	885b      	ldrh	r3, [r3, #2]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	f200 80ac 	bhi.w	8007e44 <USBD_GetDescriptor+0x258>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <USBD_GetDescriptor+0x108>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d0d 	.word	0x08007d0d
 8007cf8:	08007d41 	.word	0x08007d41
 8007cfc:	08007d75 	.word	0x08007d75
 8007d00:	08007da9 	.word	0x08007da9
 8007d04:	08007ddd 	.word	0x08007ddd
 8007d08:	08007e11 	.word	0x08007e11
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	7c12      	ldrb	r2, [r2, #16]
 8007d24:	f107 0108 	add.w	r1, r7, #8
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
 8007d2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d2e:	e091      	b.n	8007e54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 faaa 	bl	800828c <USBD_CtlError>
        err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d3e:	e089      	b.n	8007e54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d62:	e077      	b.n	8007e54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa90 	bl	800828c <USBD_CtlError>
        err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
      break;
 8007d72:	e06f      	b.n	8007e54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d96:	e05d      	b.n	8007e54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa76 	bl	800828c <USBD_CtlError>
        err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
      break;
 8007da6:	e055      	b.n	8007e54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dca:	e043      	b.n	8007e54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa5c 	bl	800828c <USBD_CtlError>
        err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
      break;
 8007dda:	e03b      	b.n	8007e54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dfe:	e029      	b.n	8007e54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa42 	bl	800828c <USBD_CtlError>
        err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e0e:	e021      	b.n	8007e54 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e32:	e00f      	b.n	8007e54 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa28 	bl	800828c <USBD_CtlError>
        err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
      break;
 8007e42:	e007      	b.n	8007e54 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa20 	bl	800828c <USBD_CtlError>
      err++;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e52:	bf00      	nop
    }
    break;
 8007e54:	e037      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7c1b      	ldrb	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e66:	f107 0208 	add.w	r2, r7, #8
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4798      	blx	r3
 8007e6e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e70:	e029      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa09 	bl	800828c <USBD_CtlError>
      err++;
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	72fb      	strb	r3, [r7, #11]
    break;
 8007e80:	e021      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7c1b      	ldrb	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10d      	bne.n	8007ea6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	f107 0208 	add.w	r2, r7, #8
 8007e96:	4610      	mov	r0, r2
 8007e98:	4798      	blx	r3
 8007e9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ea4:	e00f      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9ef 	bl	800828c <USBD_CtlError>
      err++;
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	72fb      	strb	r3, [r7, #11]
    break;
 8007eb4:	e007      	b.n	8007ec6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f9e7 	bl	800828c <USBD_CtlError>
    err++;
 8007ebe:	7afb      	ldrb	r3, [r7, #11]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	72fb      	strb	r3, [r7, #11]
    break;
 8007ec4:	bf00      	nop
  }

  if (err != 0U)
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d11e      	bne.n	8007f0a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	88db      	ldrh	r3, [r3, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d016      	beq.n	8007f02 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007ed4:	893b      	ldrh	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88da      	ldrh	r2, [r3, #6]
 8007ede:	893b      	ldrh	r3, [r7, #8]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bf28      	it	cs
 8007ee4:	4613      	movcs	r3, r2
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007eea:	893b      	ldrh	r3, [r7, #8]
 8007eec:	461a      	mov	r2, r3
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa3c 	bl	800836e <USBD_CtlSendData>
 8007ef6:	e009      	b.n	8007f0c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9c6 	bl	800828c <USBD_CtlError>
 8007f00:	e004      	b.n	8007f0c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa8d 	bl	8008422 <USBD_CtlSendStatus>
 8007f08:	e000      	b.n	8007f0c <USBD_GetDescriptor+0x320>
    return;
 8007f0a:	bf00      	nop
    }
  }
}
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	889b      	ldrh	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d130      	bne.n	8007f88 <USBD_SetAddress+0x74>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88db      	ldrh	r3, [r3, #6]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d12c      	bne.n	8007f88 <USBD_SetAddress+0x74>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	2b7f      	cmp	r3, #127	; 0x7f
 8007f34:	d828      	bhi.n	8007f88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	885b      	ldrh	r3, [r3, #2]
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d104      	bne.n	8007f56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f99c 	bl	800828c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f54:	e01c      	b.n	8007f90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f003 fd04 	bl	800b970 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa5a 	bl	8008422 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d004      	beq.n	8007f7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7c:	e008      	b.n	8007f90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f86:	e003      	b.n	8007f90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f97e 	bl	800828c <USBD_CtlError>
  }
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	4b4b      	ldr	r3, [pc, #300]	; (80080dc <USBD_SetConfig+0x144>)
 8007fae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fb0:	4b4a      	ldr	r3, [pc, #296]	; (80080dc <USBD_SetConfig+0x144>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d905      	bls.n	8007fc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f966 	bl	800828c <USBD_CtlError>
    return USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e087      	b.n	80080d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d002      	beq.n	8007fd4 <USBD_SetConfig+0x3c>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d025      	beq.n	800801e <USBD_SetConfig+0x86>
 8007fd2:	e071      	b.n	80080b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007fd4:	4b41      	ldr	r3, [pc, #260]	; (80080dc <USBD_SetConfig+0x144>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01c      	beq.n	8008016 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007fdc:	4b3f      	ldr	r3, [pc, #252]	; (80080dc <USBD_SetConfig+0x144>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fe6:	4b3d      	ldr	r3, [pc, #244]	; (80080dc <USBD_SetConfig+0x144>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff f9bd 	bl	800736c <USBD_SetClassConfig>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f944 	bl	800828c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008004:	e065      	b.n	80080d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa0b 	bl	8008422 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2203      	movs	r2, #3
 8008010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008014:	e05d      	b.n	80080d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa03 	bl	8008422 <USBD_CtlSendStatus>
    break;
 800801c:	e059      	b.n	80080d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800801e:	4b2f      	ldr	r3, [pc, #188]	; (80080dc <USBD_SetConfig+0x144>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d112      	bne.n	800804c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800802e:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <USBD_SetConfig+0x144>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008038:	4b28      	ldr	r3, [pc, #160]	; (80080dc <USBD_SetConfig+0x144>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff f9b0 	bl	80073a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f9ec 	bl	8008422 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800804a:	e042      	b.n	80080d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800804c:	4b23      	ldr	r3, [pc, #140]	; (80080dc <USBD_SetConfig+0x144>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	429a      	cmp	r2, r3
 8008058:	d02a      	beq.n	80080b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff f99e 	bl	80073a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008068:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <USBD_SetConfig+0x144>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008072:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <USBD_SetConfig+0x144>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f977 	bl	800736c <USBD_SetClassConfig>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f8fe 	bl	800828c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff f983 	bl	80073a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80080a6:	e014      	b.n	80080d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f9ba 	bl	8008422 <USBD_CtlSendStatus>
    break;
 80080ae:	e010      	b.n	80080d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f9b6 	bl	8008422 <USBD_CtlSendStatus>
    break;
 80080b6:	e00c      	b.n	80080d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f8e6 	bl	800828c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <USBD_SetConfig+0x144>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff f96c 	bl	80073a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	bf00      	nop
  }

  return ret;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	2000023a 	.word	0x2000023a

080080e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	88db      	ldrh	r3, [r3, #6]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d004      	beq.n	80080fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8c9 	bl	800828c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080fa:	e021      	b.n	8008140 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008102:	2b01      	cmp	r3, #1
 8008104:	db17      	blt.n	8008136 <USBD_GetConfig+0x56>
 8008106:	2b02      	cmp	r3, #2
 8008108:	dd02      	ble.n	8008110 <USBD_GetConfig+0x30>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d00b      	beq.n	8008126 <USBD_GetConfig+0x46>
 800810e:	e012      	b.n	8008136 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3308      	adds	r3, #8
 800811a:	2201      	movs	r2, #1
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f925 	bl	800836e <USBD_CtlSendData>
      break;
 8008124:	e00c      	b.n	8008140 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	2201      	movs	r2, #1
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f91d 	bl	800836e <USBD_CtlSendData>
      break;
 8008134:	e004      	b.n	8008140 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f8a7 	bl	800828c <USBD_CtlError>
      break;
 800813e:	bf00      	nop
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008158:	3b01      	subs	r3, #1
 800815a:	2b02      	cmp	r3, #2
 800815c:	d81e      	bhi.n	800819c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	88db      	ldrh	r3, [r3, #6]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d004      	beq.n	8008170 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f88f 	bl	800828c <USBD_CtlError>
      break;
 800816e:	e01a      	b.n	80081a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f043 0202 	orr.w	r2, r3, #2
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	330c      	adds	r3, #12
 8008190:	2202      	movs	r2, #2
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8ea 	bl	800836e <USBD_CtlSendData>
    break;
 800819a:	e004      	b.n	80081a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f874 	bl	800828c <USBD_CtlError>
    break;
 80081a4:	bf00      	nop
  }
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d106      	bne.n	80081ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f92a 	bl	8008422 <USBD_CtlSendStatus>
  }
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d80b      	bhi.n	8008204 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	885b      	ldrh	r3, [r3, #2]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d10c      	bne.n	800820e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f910 	bl	8008422 <USBD_CtlSendStatus>
      }
      break;
 8008202:	e004      	b.n	800820e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f840 	bl	800828c <USBD_CtlError>
      break;
 800820c:	e000      	b.n	8008210 <USBD_ClrFeature+0x3a>
      break;
 800820e:	bf00      	nop
  }
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	781a      	ldrb	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff faa8 	bl	8007798 <SWAPBYTE>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3301      	adds	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7ff fa9b 	bl	8007798 <SWAPBYTE>
 8008262:	4603      	mov	r3, r0
 8008264:	461a      	mov	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3301      	adds	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7ff fa8e 	bl	8007798 <SWAPBYTE>
 800827c:	4603      	mov	r3, r0
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	80da      	strh	r2, [r3, #6]
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008296:	2180      	movs	r1, #128	; 0x80
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f003 facf 	bl	800b83c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f003 facb 	bl	800b83c <USBD_LL_StallEP>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b086      	sub	sp, #24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d036      	beq.n	8008332 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082c8:	6938      	ldr	r0, [r7, #16]
 80082ca:	f000 f836 	bl	800833a <USBD_GetLen>
 80082ce:	4603      	mov	r3, r0
 80082d0:	3301      	adds	r3, #1
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	7812      	ldrb	r2, [r2, #0]
 80082e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	3301      	adds	r3, #1
 80082ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	4413      	add	r3, r2
 80082f4:	2203      	movs	r2, #3
 80082f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	3301      	adds	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082fe:	e013      	b.n	8008328 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	4413      	add	r3, r2
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	3301      	adds	r3, #1
 8008310:	613b      	str	r3, [r7, #16]
    idx++;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	3301      	adds	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	2200      	movs	r2, #0
 8008320:	701a      	strb	r2, [r3, #0]
    idx++;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	3301      	adds	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e7      	bne.n	8008300 <USBD_GetString+0x52>
 8008330:	e000      	b.n	8008334 <USBD_GetString+0x86>
    return;
 8008332:	bf00      	nop
  }
}
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800834a:	e005      	b.n	8008358 <USBD_GetLen+0x1e>
  {
    len++;
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	3301      	adds	r3, #1
 8008350:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3301      	adds	r3, #1
 8008356:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f5      	bne.n	800834c <USBD_GetLen+0x12>
  }

  return len;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2202      	movs	r2, #2
 800837e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	2100      	movs	r1, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f003 fb21 	bl	800b9dc <USBD_LL_Transmit>

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	2100      	movs	r1, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f003 fb10 	bl	800b9dc <USBD_LL_Transmit>

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2203      	movs	r2, #3
 80083d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f003 fb2b 	bl	800ba4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	2100      	movs	r1, #0
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f003 fb1a 	bl	800ba4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2204      	movs	r2, #4
 800842e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008432:	2300      	movs	r3, #0
 8008434:	2200      	movs	r2, #0
 8008436:	2100      	movs	r1, #0
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f003 facf 	bl	800b9dc <USBD_LL_Transmit>

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2205      	movs	r2, #5
 8008454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f003 faf4 	bl	800ba4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800846e:	b480      	push	{r7}
 8008470:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008472:	bf00      	nop
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008482:	f3ef 8305 	mrs	r3, IPSR
 8008486:	60bb      	str	r3, [r7, #8]
  return(result);
 8008488:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10f      	bne.n	80084ae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800848e:	f3ef 8310 	mrs	r3, PRIMASK
 8008492:	607b      	str	r3, [r7, #4]
  return(result);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800849a:	f3ef 8311 	mrs	r3, BASEPRI
 800849e:	603b      	str	r3, [r7, #0]
  return(result);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <osKernelInitialize+0x3a>
 80084a6:	4b0e      	ldr	r3, [pc, #56]	; (80084e0 <osKernelInitialize+0x64>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d103      	bne.n	80084b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80084ae:	f06f 0305 	mvn.w	r3, #5
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e00c      	b.n	80084d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084b6:	4b0a      	ldr	r3, [pc, #40]	; (80084e0 <osKernelInitialize+0x64>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084be:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <osKernelInitialize+0x64>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	e002      	b.n	80084d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80084ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80084d0:	68fb      	ldr	r3, [r7, #12]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	2000023c 	.word	0x2000023c

080084e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ea:	f3ef 8305 	mrs	r3, IPSR
 80084ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80084f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10f      	bne.n	8008516 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f6:	f3ef 8310 	mrs	r3, PRIMASK
 80084fa:	607b      	str	r3, [r7, #4]
  return(result);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008502:	f3ef 8311 	mrs	r3, BASEPRI
 8008506:	603b      	str	r3, [r7, #0]
  return(result);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d007      	beq.n	800851e <osKernelStart+0x3a>
 800850e:	4b0f      	ldr	r3, [pc, #60]	; (800854c <osKernelStart+0x68>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d103      	bne.n	800851e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008516:	f06f 0305 	mvn.w	r3, #5
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e010      	b.n	8008540 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <osKernelStart+0x68>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d109      	bne.n	800853a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008526:	f7ff ffa2 	bl	800846e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800852a:	4b08      	ldr	r3, [pc, #32]	; (800854c <osKernelStart+0x68>)
 800852c:	2202      	movs	r2, #2
 800852e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008530:	f001 f870 	bl	8009614 <vTaskStartScheduler>
      stat = osOK;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e002      	b.n	8008540 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800853e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	2000023c 	.word	0x2000023c

08008550 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b090      	sub	sp, #64	; 0x40
 8008554:	af04      	add	r7, sp, #16
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008560:	f3ef 8305 	mrs	r3, IPSR
 8008564:	61fb      	str	r3, [r7, #28]
  return(result);
 8008566:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 808f 	bne.w	800868c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800856e:	f3ef 8310 	mrs	r3, PRIMASK
 8008572:	61bb      	str	r3, [r7, #24]
  return(result);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800857a:	f3ef 8311 	mrs	r3, BASEPRI
 800857e:	617b      	str	r3, [r7, #20]
  return(result);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <osThreadNew+0x3e>
 8008586:	4b44      	ldr	r3, [pc, #272]	; (8008698 <osThreadNew+0x148>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b02      	cmp	r3, #2
 800858c:	d07e      	beq.n	800868c <osThreadNew+0x13c>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d07b      	beq.n	800868c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008598:	2318      	movs	r3, #24
 800859a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80085a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d045      	beq.n	8008638 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <osThreadNew+0x6a>
        name = attr->name;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <osThreadNew+0x90>
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2b38      	cmp	r3, #56	; 0x38
 80085d2:	d805      	bhi.n	80085e0 <osThreadNew+0x90>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <osThreadNew+0x94>
        return (NULL);
 80085e0:	2300      	movs	r3, #0
 80085e2:	e054      	b.n	800868e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	089b      	lsrs	r3, r3, #2
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <osThreadNew+0xca>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b5b      	cmp	r3, #91	; 0x5b
 8008602:	d90a      	bls.n	800861a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <osThreadNew+0xca>
        mem = 1;
 8008614:	2301      	movs	r3, #1
 8008616:	623b      	str	r3, [r7, #32]
 8008618:	e010      	b.n	800863c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10c      	bne.n	800863c <osThreadNew+0xec>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d108      	bne.n	800863c <osThreadNew+0xec>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d104      	bne.n	800863c <osThreadNew+0xec>
          mem = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	623b      	str	r3, [r7, #32]
 8008636:	e001      	b.n	800863c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d110      	bne.n	8008664 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800864a:	9202      	str	r2, [sp, #8]
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fe09 	bl	8009270 <xTaskCreateStatic>
 800865e:	4603      	mov	r3, r0
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	e013      	b.n	800868c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d110      	bne.n	800868c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	b29a      	uxth	r2, r3
 800866e:	f107 0310 	add.w	r3, r7, #16
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fe51 	bl	8009324 <xTaskCreate>
 8008682:	4603      	mov	r3, r0
 8008684:	2b01      	cmp	r3, #1
 8008686:	d001      	beq.n	800868c <osThreadNew+0x13c>
          hTask = NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800868c:	693b      	ldr	r3, [r7, #16]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3730      	adds	r7, #48	; 0x30
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	2000023c 	.word	0x2000023c

0800869c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a4:	f3ef 8305 	mrs	r3, IPSR
 80086a8:	613b      	str	r3, [r7, #16]
  return(result);
 80086aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10f      	bne.n	80086d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b0:	f3ef 8310 	mrs	r3, PRIMASK
 80086b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d105      	bne.n	80086c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086bc:	f3ef 8311 	mrs	r3, BASEPRI
 80086c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <osDelay+0x3c>
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <osDelay+0x58>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d103      	bne.n	80086d8 <osDelay+0x3c>
    stat = osErrorISR;
 80086d0:	f06f 0305 	mvn.w	r3, #5
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	e007      	b.n	80086e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 ff62 	bl	80095ac <vTaskDelay>
    }
  }

  return (stat);
 80086e8:	697b      	ldr	r3, [r7, #20]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	2000023c 	.word	0x2000023c

080086f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4a07      	ldr	r2, [pc, #28]	; (8008724 <vApplicationGetIdleTaskMemory+0x2c>)
 8008708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4a06      	ldr	r2, [pc, #24]	; (8008728 <vApplicationGetIdleTaskMemory+0x30>)
 800870e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2280      	movs	r2, #128	; 0x80
 8008714:	601a      	str	r2, [r3, #0]
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000240 	.word	0x20000240
 8008728:	2000029c 	.word	0x2000029c

0800872c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4a07      	ldr	r2, [pc, #28]	; (8008758 <vApplicationGetTimerTaskMemory+0x2c>)
 800873c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4a06      	ldr	r2, [pc, #24]	; (800875c <vApplicationGetTimerTaskMemory+0x30>)
 8008742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800874a:	601a      	str	r2, [r3, #0]
}
 800874c:	bf00      	nop
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	2000049c 	.word	0x2000049c
 800875c:	200004f8 	.word	0x200004f8

08008760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f103 0208 	add.w	r2, r3, #8
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f103 0208 	add.w	r2, r3, #8
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f103 0208 	add.w	r2, r3, #8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087ba:	b480      	push	{r7}
 80087bc:	b085      	sub	sp, #20
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	601a      	str	r2, [r3, #0]
}
 80087f6:	bf00      	nop
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008818:	d103      	bne.n	8008822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	e00c      	b.n	800883c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3308      	adds	r3, #8
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	e002      	b.n	8008830 <vListInsert+0x2e>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	429a      	cmp	r2, r3
 800883a:	d2f6      	bcs.n	800882a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6892      	ldr	r2, [r2, #8]
 800888a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6852      	ldr	r2, [r2, #4]
 8008894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	429a      	cmp	r2, r3
 800889e:	d103      	bne.n	80088a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	e7fe      	b.n	80088ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80088f0:	f002 f814 	bl	800a91c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008920:	3b01      	subs	r3, #1
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	441a      	add	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	22ff      	movs	r2, #255	; 0xff
 8008934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	22ff      	movs	r2, #255	; 0xff
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d114      	bne.n	8008970 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01a      	beq.n	8008984 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3310      	adds	r3, #16
 8008952:	4618      	mov	r0, r3
 8008954:	f001 f8de 	bl	8009b14 <xTaskRemoveFromEventList>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d012      	beq.n	8008984 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <xQueueGenericReset+0xcc>)
 8008960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	e009      	b.n	8008984 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3310      	adds	r3, #16
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fef3 	bl	8008760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3324      	adds	r3, #36	; 0x24
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff feee 	bl	8008760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008984:	f001 fff8 	bl	800a978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008988:	2301      	movs	r3, #1
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08e      	sub	sp, #56	; 0x38
 800899c:	af02      	add	r7, sp, #8
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <xQueueGenericCreateStatic+0x28>
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80089be:	e7fe      	b.n	80089be <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <xQueueGenericCreateStatic+0x42>
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
 80089d8:	e7fe      	b.n	80089d8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <xQueueGenericCreateStatic+0x4e>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <xQueueGenericCreateStatic+0x52>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <xQueueGenericCreateStatic+0x54>
 80089ea:	2300      	movs	r3, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d109      	bne.n	8008a04 <xQueueGenericCreateStatic+0x6c>
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	623b      	str	r3, [r7, #32]
 8008a02:	e7fe      	b.n	8008a02 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <xQueueGenericCreateStatic+0x78>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <xQueueGenericCreateStatic+0x7c>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <xQueueGenericCreateStatic+0x7e>
 8008a14:	2300      	movs	r3, #0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <xQueueGenericCreateStatic+0x96>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	e7fe      	b.n	8008a2c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a2e:	2350      	movs	r3, #80	; 0x50
 8008a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b50      	cmp	r3, #80	; 0x50
 8008a36:	d009      	beq.n	8008a4c <xQueueGenericCreateStatic+0xb4>
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	61bb      	str	r3, [r7, #24]
 8008a4a:	e7fe      	b.n	8008a4a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00d      	beq.n	8008a74 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a60:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f805 	bl	8008a7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3730      	adds	r7, #48	; 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	e002      	b.n	8008aa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aac:	2101      	movs	r1, #1
 8008aae:	69b8      	ldr	r0, [r7, #24]
 8008ab0:	f7ff ff0a 	bl	80088c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08e      	sub	sp, #56	; 0x38
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <xQueueGenericSend+0x30>
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008af2:	e7fe      	b.n	8008af2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d103      	bne.n	8008b02 <xQueueGenericSend+0x3e>
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <xQueueGenericSend+0x42>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e000      	b.n	8008b08 <xQueueGenericSend+0x44>
 8008b06:	2300      	movs	r3, #0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <xQueueGenericSend+0x5c>
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1e:	e7fe      	b.n	8008b1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d103      	bne.n	8008b2e <xQueueGenericSend+0x6a>
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <xQueueGenericSend+0x6e>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <xQueueGenericSend+0x70>
 8008b32:	2300      	movs	r3, #0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d109      	bne.n	8008b4c <xQueueGenericSend+0x88>
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	623b      	str	r3, [r7, #32]
 8008b4a:	e7fe      	b.n	8008b4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b4c:	f001 f998 	bl	8009e80 <xTaskGetSchedulerState>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <xQueueGenericSend+0x98>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <xQueueGenericSend+0x9c>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e000      	b.n	8008b62 <xQueueGenericSend+0x9e>
 8008b60:	2300      	movs	r3, #0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <xQueueGenericSend+0xb6>
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	e7fe      	b.n	8008b78 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b7a:	f001 fecf 	bl	800a91c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d302      	bcc.n	8008b90 <xQueueGenericSend+0xcc>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d129      	bne.n	8008be4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	68b9      	ldr	r1, [r7, #8]
 8008b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b96:	f000 f9ff 	bl	8008f98 <prvCopyDataToQueue>
 8008b9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d010      	beq.n	8008bc6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	3324      	adds	r3, #36	; 0x24
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 ffb3 	bl	8009b14 <xTaskRemoveFromEventList>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d013      	beq.n	8008bdc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bb4:	4b3f      	ldr	r3, [pc, #252]	; (8008cb4 <xQueueGenericSend+0x1f0>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	e00a      	b.n	8008bdc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d007      	beq.n	8008bdc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bcc:	4b39      	ldr	r3, [pc, #228]	; (8008cb4 <xQueueGenericSend+0x1f0>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bdc:	f001 fecc 	bl	800a978 <vPortExitCritical>
				return pdPASS;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e063      	b.n	8008cac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bea:	f001 fec5 	bl	800a978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e05c      	b.n	8008cac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bf8:	f107 0314 	add.w	r3, r7, #20
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 ffeb 	bl	8009bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c02:	2301      	movs	r3, #1
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c06:	f001 feb7 	bl	800a978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c0a:	f000 fd67 	bl	80096dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c0e:	f001 fe85 	bl	800a91c <vPortEnterCritical>
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c1e:	d103      	bne.n	8008c28 <xQueueGenericSend+0x164>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c2e:	b25b      	sxtb	r3, r3
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c34:	d103      	bne.n	8008c3e <xQueueGenericSend+0x17a>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c3e:	f001 fe9b 	bl	800a978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c42:	1d3a      	adds	r2, r7, #4
 8008c44:	f107 0314 	add.w	r3, r7, #20
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 ffda 	bl	8009c04 <xTaskCheckForTimeOut>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d124      	bne.n	8008ca0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c58:	f000 fa96 	bl	8009188 <prvIsQueueFull>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d018      	beq.n	8008c94 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	3310      	adds	r3, #16
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 ff04 	bl	8009a78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c72:	f000 fa21 	bl	80090b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c76:	f000 fd3f 	bl	80096f8 <xTaskResumeAll>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f47f af7c 	bne.w	8008b7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008c82:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <xQueueGenericSend+0x1f0>)
 8008c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	e772      	b.n	8008b7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c96:	f000 fa0f 	bl	80090b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c9a:	f000 fd2d 	bl	80096f8 <xTaskResumeAll>
 8008c9e:	e76c      	b.n	8008b7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ca2:	f000 fa09 	bl	80090b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ca6:	f000 fd27 	bl	80096f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008caa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3738      	adds	r7, #56	; 0x38
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08e      	sub	sp, #56	; 0x38
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d109      	bne.n	8008ce4 <xQueueGenericSendFromISR+0x2c>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce2:	e7fe      	b.n	8008ce2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <xQueueGenericSendFromISR+0x3a>
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <xQueueGenericSendFromISR+0x3e>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueGenericSendFromISR+0x40>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d109      	bne.n	8008d10 <xQueueGenericSendFromISR+0x58>
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	623b      	str	r3, [r7, #32]
 8008d0e:	e7fe      	b.n	8008d0e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d103      	bne.n	8008d1e <xQueueGenericSendFromISR+0x66>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <xQueueGenericSendFromISR+0x6a>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <xQueueGenericSendFromISR+0x6c>
 8008d22:	2300      	movs	r3, #0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <xQueueGenericSendFromISR+0x84>
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	e7fe      	b.n	8008d3a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d3c:	f001 feca 	bl	800aad4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d40:	f3ef 8211 	mrs	r2, BASEPRI
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	61ba      	str	r2, [r7, #24]
 8008d56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d302      	bcc.n	8008d6e <xQueueGenericSendFromISR+0xb6>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d12c      	bne.n	8008dc8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7e:	f000 f90b 	bl	8008f98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8a:	d112      	bne.n	8008db2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d016      	beq.n	8008dc2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	3324      	adds	r3, #36	; 0x24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 febb 	bl	8009b14 <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e007      	b.n	8008dc2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008db2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008db6:	3301      	adds	r3, #1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	b25a      	sxtb	r2, r3
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008dc6:	e001      	b.n	8008dcc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3738      	adds	r7, #56	; 0x38
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08c      	sub	sp, #48	; 0x30
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d109      	bne.n	8008e0e <xQueueReceive+0x2e>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	623b      	str	r3, [r7, #32]
 8008e0c:	e7fe      	b.n	8008e0c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d103      	bne.n	8008e1c <xQueueReceive+0x3c>
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <xQueueReceive+0x40>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e000      	b.n	8008e22 <xQueueReceive+0x42>
 8008e20:	2300      	movs	r3, #0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d109      	bne.n	8008e3a <xQueueReceive+0x5a>
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	e7fe      	b.n	8008e38 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e3a:	f001 f821 	bl	8009e80 <xTaskGetSchedulerState>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <xQueueReceive+0x6a>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <xQueueReceive+0x6e>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <xQueueReceive+0x70>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d109      	bne.n	8008e68 <xQueueReceive+0x88>
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	61bb      	str	r3, [r7, #24]
 8008e66:	e7fe      	b.n	8008e66 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e68:	f001 fd58 	bl	800a91c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01f      	beq.n	8008eb8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7c:	f000 f8f6 	bl	800906c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	1e5a      	subs	r2, r3, #1
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00f      	beq.n	8008eb0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	3310      	adds	r3, #16
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fe3d 	bl	8009b14 <xTaskRemoveFromEventList>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d007      	beq.n	8008eb0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ea0:	4b3c      	ldr	r3, [pc, #240]	; (8008f94 <xQueueReceive+0x1b4>)
 8008ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eb0:	f001 fd62 	bl	800a978 <vPortExitCritical>
				return pdPASS;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e069      	b.n	8008f8c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ebe:	f001 fd5b 	bl	800a978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e062      	b.n	8008f8c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ecc:	f107 0310 	add.w	r3, r7, #16
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fe81 	bl	8009bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eda:	f001 fd4d 	bl	800a978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ede:	f000 fbfd 	bl	80096dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee2:	f001 fd1b 	bl	800a91c <vPortEnterCritical>
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef2:	d103      	bne.n	8008efc <xQueueReceive+0x11c>
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f08:	d103      	bne.n	8008f12 <xQueueReceive+0x132>
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f12:	f001 fd31 	bl	800a978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f16:	1d3a      	adds	r2, r7, #4
 8008f18:	f107 0310 	add.w	r3, r7, #16
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fe70 	bl	8009c04 <xTaskCheckForTimeOut>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d123      	bne.n	8008f72 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f2c:	f000 f916 	bl	800915c <prvIsQueueEmpty>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d017      	beq.n	8008f66 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	3324      	adds	r3, #36	; 0x24
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fd9a 	bl	8009a78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f46:	f000 f8b7 	bl	80090b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f4a:	f000 fbd5 	bl	80096f8 <xTaskResumeAll>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d189      	bne.n	8008e68 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008f54:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <xQueueReceive+0x1b4>)
 8008f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5a:	601a      	str	r2, [r3, #0]
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	e780      	b.n	8008e68 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f68:	f000 f8a6 	bl	80090b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f6c:	f000 fbc4 	bl	80096f8 <xTaskResumeAll>
 8008f70:	e77a      	b.n	8008e68 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f74:	f000 f8a0 	bl	80090b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f78:	f000 fbbe 	bl	80096f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7e:	f000 f8ed 	bl	800915c <prvIsQueueEmpty>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f43f af6f 	beq.w	8008e68 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3730      	adds	r7, #48	; 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	e000ed04 	.word	0xe000ed04

08008f98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10d      	bne.n	8008fd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d14d      	bne.n	800905a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 ff7a 	bl	8009ebc <xTaskPriorityDisinherit>
 8008fc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	609a      	str	r2, [r3, #8]
 8008fd0:	e043      	b.n	800905a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d119      	bne.n	800900c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6858      	ldr	r0, [r3, #4]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	f002 fdf4 	bl	800bbd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	441a      	add	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d32b      	bcc.n	800905a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]
 800900a:	e026      	b.n	800905a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68d8      	ldr	r0, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	461a      	mov	r2, r3
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	f002 fdda 	bl	800bbd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	425b      	negs	r3, r3
 8009026:	441a      	add	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d207      	bcs.n	8009048 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	425b      	negs	r3, r3
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d105      	bne.n	800905a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3b01      	subs	r3, #1
 8009058:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009062:	697b      	ldr	r3, [r7, #20]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d018      	beq.n	80090b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	441a      	add	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	d303      	bcc.n	80090a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68d9      	ldr	r1, [r3, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a8:	461a      	mov	r2, r3
 80090aa:	6838      	ldr	r0, [r7, #0]
 80090ac:	f002 fd90 	bl	800bbd0 <memcpy>
	}
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090c0:	f001 fc2c 	bl	800a91c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090cc:	e011      	b.n	80090f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d012      	beq.n	80090fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3324      	adds	r3, #36	; 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fd1a 	bl	8009b14 <xTaskRemoveFromEventList>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090e6:	f000 fded 	bl	8009cc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dce9      	bgt.n	80090ce <prvUnlockQueue+0x16>
 80090fa:	e000      	b.n	80090fe <prvUnlockQueue+0x46>
					break;
 80090fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	22ff      	movs	r2, #255	; 0xff
 8009102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009106:	f001 fc37 	bl	800a978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800910a:	f001 fc07 	bl	800a91c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009114:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009116:	e011      	b.n	800913c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d012      	beq.n	8009146 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3310      	adds	r3, #16
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fcf5 	bl	8009b14 <xTaskRemoveFromEventList>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009130:	f000 fdc8 	bl	8009cc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	3b01      	subs	r3, #1
 8009138:	b2db      	uxtb	r3, r3
 800913a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800913c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009140:	2b00      	cmp	r3, #0
 8009142:	dce9      	bgt.n	8009118 <prvUnlockQueue+0x60>
 8009144:	e000      	b.n	8009148 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009146:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	22ff      	movs	r2, #255	; 0xff
 800914c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009150:	f001 fc12 	bl	800a978 <vPortExitCritical>
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009164:	f001 fbda 	bl	800a91c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e001      	b.n	800917a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800917a:	f001 fbfd 	bl	800a978 <vPortExitCritical>

	return xReturn;
 800917e:	68fb      	ldr	r3, [r7, #12]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009190:	f001 fbc4 	bl	800a91c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919c:	429a      	cmp	r2, r3
 800919e:	d102      	bne.n	80091a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091a0:	2301      	movs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e001      	b.n	80091aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091aa:	f001 fbe5 	bl	800a978 <vPortExitCritical>

	return xReturn;
 80091ae:	68fb      	ldr	r3, [r7, #12]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	e014      	b.n	80091f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091c8:	4a0e      	ldr	r2, [pc, #56]	; (8009204 <vQueueAddToRegistry+0x4c>)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10b      	bne.n	80091ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091d4:	490b      	ldr	r1, [pc, #44]	; (8009204 <vQueueAddToRegistry+0x4c>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091de:	4a09      	ldr	r2, [pc, #36]	; (8009204 <vQueueAddToRegistry+0x4c>)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091ea:	e005      	b.n	80091f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	3301      	adds	r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	d9e7      	bls.n	80091c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091f8:	bf00      	nop
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20001c1c 	.word	0x20001c1c

08009208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009218:	f001 fb80 	bl	800a91c <vPortEnterCritical>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009222:	b25b      	sxtb	r3, r3
 8009224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009228:	d103      	bne.n	8009232 <vQueueWaitForMessageRestricted+0x2a>
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009238:	b25b      	sxtb	r3, r3
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923e:	d103      	bne.n	8009248 <vQueueWaitForMessageRestricted+0x40>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009248:	f001 fb96 	bl	800a978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	3324      	adds	r3, #36	; 0x24
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fc2f 	bl	8009ac0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009262:	6978      	ldr	r0, [r7, #20]
 8009264:	f7ff ff28 	bl	80090b8 <prvUnlockQueue>
	}
 8009268:	bf00      	nop
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08e      	sub	sp, #56	; 0x38
 8009274:	af04      	add	r7, sp, #16
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <xTaskCreateStatic+0x28>
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	623b      	str	r3, [r7, #32]
 8009296:	e7fe      	b.n	8009296 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	2b00      	cmp	r3, #0
 800929c:	d109      	bne.n	80092b2 <xTaskCreateStatic+0x42>
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	61fb      	str	r3, [r7, #28]
 80092b0:	e7fe      	b.n	80092b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092b2:	235c      	movs	r3, #92	; 0x5c
 80092b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2b5c      	cmp	r3, #92	; 0x5c
 80092ba:	d009      	beq.n	80092d0 <xTaskCreateStatic+0x60>
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	61bb      	str	r3, [r7, #24]
 80092ce:	e7fe      	b.n	80092ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01e      	beq.n	8009316 <xTaskCreateStatic+0xa6>
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01b      	beq.n	8009316 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092f0:	2300      	movs	r3, #0
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	9302      	str	r3, [sp, #8]
 80092f8:	f107 0314 	add.w	r3, r7, #20
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f850 	bl	80093ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800930e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009310:	f000 f8dc 	bl	80094cc <prvAddNewTaskToReadyList>
 8009314:	e001      	b.n	800931a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800931a:	697b      	ldr	r3, [r7, #20]
	}
 800931c:	4618      	mov	r0, r3
 800931e:	3728      	adds	r7, #40	; 0x28
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08c      	sub	sp, #48	; 0x30
 8009328:	af04      	add	r7, sp, #16
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4618      	mov	r0, r3
 800933a:	f001 fc09 	bl	800ab50 <pvPortMalloc>
 800933e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00e      	beq.n	8009364 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009346:	205c      	movs	r0, #92	; 0x5c
 8009348:	f001 fc02 	bl	800ab50 <pvPortMalloc>
 800934c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	631a      	str	r2, [r3, #48]	; 0x30
 800935a:	e005      	b.n	8009368 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800935c:	6978      	ldr	r0, [r7, #20]
 800935e:	f001 fcb9 	bl	800acd4 <vPortFree>
 8009362:	e001      	b.n	8009368 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d017      	beq.n	800939e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009376:	88fa      	ldrh	r2, [r7, #6]
 8009378:	2300      	movs	r3, #0
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	9302      	str	r3, [sp, #8]
 8009380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 f80e 	bl	80093ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009392:	69f8      	ldr	r0, [r7, #28]
 8009394:	f000 f89a 	bl	80094cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009398:	2301      	movs	r3, #1
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e002      	b.n	80093a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800939e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093a4:	69bb      	ldr	r3, [r7, #24]
	}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	461a      	mov	r2, r3
 80093c6:	21a5      	movs	r1, #165	; 0xa5
 80093c8:	f002 fc0d 	bl	800bbe6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093d6:	3b01      	subs	r3, #1
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	f023 0307 	bic.w	r3, r3, #7
 80093e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <prvInitialiseNewTask+0x56>
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	617b      	str	r3, [r7, #20]
 8009402:	e7fe      	b.n	8009402 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d01f      	beq.n	800944a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800940a:	2300      	movs	r3, #0
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	e012      	b.n	8009436 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4413      	add	r3, r2
 8009416:	7819      	ldrb	r1, [r3, #0]
 8009418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	4413      	add	r3, r2
 800941e:	3334      	adds	r3, #52	; 0x34
 8009420:	460a      	mov	r2, r1
 8009422:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	4413      	add	r3, r2
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d006      	beq.n	800943e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	3301      	adds	r3, #1
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2b0f      	cmp	r3, #15
 800943a:	d9e9      	bls.n	8009410 <prvInitialiseNewTask+0x62>
 800943c:	e000      	b.n	8009440 <prvInitialiseNewTask+0x92>
			{
				break;
 800943e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009448:	e003      	b.n	8009452 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	2b37      	cmp	r3, #55	; 0x37
 8009456:	d901      	bls.n	800945c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009458:	2337      	movs	r3, #55	; 0x37
 800945a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009460:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	2200      	movs	r2, #0
 800946c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	3304      	adds	r3, #4
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff f994 	bl	80087a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	3318      	adds	r3, #24
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff f98f 	bl	80087a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009486:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009496:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	2200      	movs	r2, #0
 800949c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	68f9      	ldr	r1, [r7, #12]
 80094aa:	69b8      	ldr	r0, [r7, #24]
 80094ac:	f001 f90c 	bl	800a6c8 <pxPortInitialiseStack>
 80094b0:	4602      	mov	r2, r0
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094c2:	bf00      	nop
 80094c4:	3720      	adds	r7, #32
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094d4:	f001 fa22 	bl	800a91c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094d8:	4b2d      	ldr	r3, [pc, #180]	; (8009590 <prvAddNewTaskToReadyList+0xc4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3301      	adds	r3, #1
 80094de:	4a2c      	ldr	r2, [pc, #176]	; (8009590 <prvAddNewTaskToReadyList+0xc4>)
 80094e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094e2:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <prvAddNewTaskToReadyList+0xc8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d109      	bne.n	80094fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094ea:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <prvAddNewTaskToReadyList+0xc8>)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvAddNewTaskToReadyList+0xc4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d110      	bne.n	800951a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094f8:	f000 fc08 	bl	8009d0c <prvInitialiseTaskLists>
 80094fc:	e00d      	b.n	800951a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094fe:	4b26      	ldr	r3, [pc, #152]	; (8009598 <prvAddNewTaskToReadyList+0xcc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d109      	bne.n	800951a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009506:	4b23      	ldr	r3, [pc, #140]	; (8009594 <prvAddNewTaskToReadyList+0xc8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	429a      	cmp	r2, r3
 8009512:	d802      	bhi.n	800951a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009514:	4a1f      	ldr	r2, [pc, #124]	; (8009594 <prvAddNewTaskToReadyList+0xc8>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800951a:	4b20      	ldr	r3, [pc, #128]	; (800959c <prvAddNewTaskToReadyList+0xd0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3301      	adds	r3, #1
 8009520:	4a1e      	ldr	r2, [pc, #120]	; (800959c <prvAddNewTaskToReadyList+0xd0>)
 8009522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009524:	4b1d      	ldr	r3, [pc, #116]	; (800959c <prvAddNewTaskToReadyList+0xd0>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009530:	4b1b      	ldr	r3, [pc, #108]	; (80095a0 <prvAddNewTaskToReadyList+0xd4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	429a      	cmp	r2, r3
 8009536:	d903      	bls.n	8009540 <prvAddNewTaskToReadyList+0x74>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	4a18      	ldr	r2, [pc, #96]	; (80095a0 <prvAddNewTaskToReadyList+0xd4>)
 800953e:	6013      	str	r3, [r2, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <prvAddNewTaskToReadyList+0xd8>)
 800954e:	441a      	add	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f7ff f92f 	bl	80087ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800955c:	f001 fa0c 	bl	800a978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009560:	4b0d      	ldr	r3, [pc, #52]	; (8009598 <prvAddNewTaskToReadyList+0xcc>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00e      	beq.n	8009586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <prvAddNewTaskToReadyList+0xc8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	429a      	cmp	r2, r3
 8009574:	d207      	bcs.n	8009586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009576:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <prvAddNewTaskToReadyList+0xdc>)
 8009578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000dcc 	.word	0x20000dcc
 8009594:	200008f8 	.word	0x200008f8
 8009598:	20000dd8 	.word	0x20000dd8
 800959c:	20000de8 	.word	0x20000de8
 80095a0:	20000dd4 	.word	0x20000dd4
 80095a4:	200008fc 	.word	0x200008fc
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d016      	beq.n	80095ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <vTaskDelay+0x60>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d009      	beq.n	80095da <vTaskDelay+0x2e>
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60bb      	str	r3, [r7, #8]
 80095d8:	e7fe      	b.n	80095d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80095da:	f000 f87f 	bl	80096dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095de:	2100      	movs	r1, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fcd7 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095e6:	f000 f887 	bl	80096f8 <xTaskResumeAll>
 80095ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d107      	bne.n	8009602 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80095f2:	4b07      	ldr	r3, [pc, #28]	; (8009610 <vTaskDelay+0x64>)
 80095f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20000df4 	.word	0x20000df4
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009622:	463a      	mov	r2, r7
 8009624:	1d39      	adds	r1, r7, #4
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff f864 	bl	80086f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	9202      	str	r2, [sp, #8]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	460a      	mov	r2, r1
 8009642:	4920      	ldr	r1, [pc, #128]	; (80096c4 <vTaskStartScheduler+0xb0>)
 8009644:	4820      	ldr	r0, [pc, #128]	; (80096c8 <vTaskStartScheduler+0xb4>)
 8009646:	f7ff fe13 	bl	8009270 <xTaskCreateStatic>
 800964a:	4602      	mov	r2, r0
 800964c:	4b1f      	ldr	r3, [pc, #124]	; (80096cc <vTaskStartScheduler+0xb8>)
 800964e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009650:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <vTaskStartScheduler+0xb8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009658:	2301      	movs	r3, #1
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e001      	b.n	8009662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d102      	bne.n	800966e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009668:	f000 fce8 	bl	800a03c <xTimerCreateTimerTask>
 800966c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d115      	bne.n	80096a0 <vTaskStartScheduler+0x8c>
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009686:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <vTaskStartScheduler+0xbc>)
 8009688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800968c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800968e:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <vTaskStartScheduler+0xc0>)
 8009690:	2201      	movs	r2, #1
 8009692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009694:	4b10      	ldr	r3, [pc, #64]	; (80096d8 <vTaskStartScheduler+0xc4>)
 8009696:	2200      	movs	r2, #0
 8009698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800969a:	f001 f8a1 	bl	800a7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800969e:	e00d      	b.n	80096bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096a6:	d109      	bne.n	80096bc <vTaskStartScheduler+0xa8>
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	e7fe      	b.n	80096ba <vTaskStartScheduler+0xa6>
}
 80096bc:	bf00      	nop
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	0800bda0 	.word	0x0800bda0
 80096c8:	08009cdd 	.word	0x08009cdd
 80096cc:	20000df0 	.word	0x20000df0
 80096d0:	20000dec 	.word	0x20000dec
 80096d4:	20000dd8 	.word	0x20000dd8
 80096d8:	20000dd0 	.word	0x20000dd0

080096dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <vTaskSuspendAll+0x18>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	4a03      	ldr	r2, [pc, #12]	; (80096f4 <vTaskSuspendAll+0x18>)
 80096e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80096ea:	bf00      	nop
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	20000df4 	.word	0x20000df4

080096f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009706:	4b41      	ldr	r3, [pc, #260]	; (800980c <xTaskResumeAll+0x114>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <xTaskResumeAll+0x2a>
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	e7fe      	b.n	8009720 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009722:	f001 f8fb 	bl	800a91c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009726:	4b39      	ldr	r3, [pc, #228]	; (800980c <xTaskResumeAll+0x114>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3b01      	subs	r3, #1
 800972c:	4a37      	ldr	r2, [pc, #220]	; (800980c <xTaskResumeAll+0x114>)
 800972e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009730:	4b36      	ldr	r3, [pc, #216]	; (800980c <xTaskResumeAll+0x114>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d162      	bne.n	80097fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009738:	4b35      	ldr	r3, [pc, #212]	; (8009810 <xTaskResumeAll+0x118>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d05e      	beq.n	80097fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009740:	e02f      	b.n	80097a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009742:	4b34      	ldr	r3, [pc, #208]	; (8009814 <xTaskResumeAll+0x11c>)
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3318      	adds	r3, #24
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff f890 	bl	8008874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff f88b 	bl	8008874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	4b2d      	ldr	r3, [pc, #180]	; (8009818 <xTaskResumeAll+0x120>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d903      	bls.n	8009772 <xTaskResumeAll+0x7a>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	4a2a      	ldr	r2, [pc, #168]	; (8009818 <xTaskResumeAll+0x120>)
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4a27      	ldr	r2, [pc, #156]	; (800981c <xTaskResumeAll+0x124>)
 8009780:	441a      	add	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7ff f816 	bl	80087ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009792:	4b23      	ldr	r3, [pc, #140]	; (8009820 <xTaskResumeAll+0x128>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	429a      	cmp	r2, r3
 800979a:	d302      	bcc.n	80097a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800979c:	4b21      	ldr	r3, [pc, #132]	; (8009824 <xTaskResumeAll+0x12c>)
 800979e:	2201      	movs	r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097a2:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <xTaskResumeAll+0x11c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1cb      	bne.n	8009742 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097b0:	f000 fb46 	bl	8009e40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80097b4:	4b1c      	ldr	r3, [pc, #112]	; (8009828 <xTaskResumeAll+0x130>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d010      	beq.n	80097e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097c0:	f000 f846 	bl	8009850 <xTaskIncrementTick>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80097ca:	4b16      	ldr	r3, [pc, #88]	; (8009824 <xTaskResumeAll+0x12c>)
 80097cc:	2201      	movs	r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f1      	bne.n	80097c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80097dc:	4b12      	ldr	r3, [pc, #72]	; (8009828 <xTaskResumeAll+0x130>)
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097e2:	4b10      	ldr	r3, [pc, #64]	; (8009824 <xTaskResumeAll+0x12c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097ea:	2301      	movs	r3, #1
 80097ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097ee:	4b0f      	ldr	r3, [pc, #60]	; (800982c <xTaskResumeAll+0x134>)
 80097f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097fe:	f001 f8bb 	bl	800a978 <vPortExitCritical>

	return xAlreadyYielded;
 8009802:	68bb      	ldr	r3, [r7, #8]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20000df4 	.word	0x20000df4
 8009810:	20000dcc 	.word	0x20000dcc
 8009814:	20000d8c 	.word	0x20000d8c
 8009818:	20000dd4 	.word	0x20000dd4
 800981c:	200008fc 	.word	0x200008fc
 8009820:	200008f8 	.word	0x200008f8
 8009824:	20000de0 	.word	0x20000de0
 8009828:	20000ddc 	.word	0x20000ddc
 800982c:	e000ed04 	.word	0xe000ed04

08009830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <xTaskGetTickCount+0x1c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800983c:	687b      	ldr	r3, [r7, #4]
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20000dd0 	.word	0x20000dd0

08009850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800985a:	4b4e      	ldr	r3, [pc, #312]	; (8009994 <xTaskIncrementTick+0x144>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f040 8088 	bne.w	8009974 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009864:	4b4c      	ldr	r3, [pc, #304]	; (8009998 <xTaskIncrementTick+0x148>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3301      	adds	r3, #1
 800986a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800986c:	4a4a      	ldr	r2, [pc, #296]	; (8009998 <xTaskIncrementTick+0x148>)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d11f      	bne.n	80098b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009878:	4b48      	ldr	r3, [pc, #288]	; (800999c <xTaskIncrementTick+0x14c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <xTaskIncrementTick+0x46>
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	603b      	str	r3, [r7, #0]
 8009894:	e7fe      	b.n	8009894 <xTaskIncrementTick+0x44>
 8009896:	4b41      	ldr	r3, [pc, #260]	; (800999c <xTaskIncrementTick+0x14c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	4b40      	ldr	r3, [pc, #256]	; (80099a0 <xTaskIncrementTick+0x150>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a3e      	ldr	r2, [pc, #248]	; (800999c <xTaskIncrementTick+0x14c>)
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	4a3e      	ldr	r2, [pc, #248]	; (80099a0 <xTaskIncrementTick+0x150>)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	4b3e      	ldr	r3, [pc, #248]	; (80099a4 <xTaskIncrementTick+0x154>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3301      	adds	r3, #1
 80098b0:	4a3c      	ldr	r2, [pc, #240]	; (80099a4 <xTaskIncrementTick+0x154>)
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	f000 fac4 	bl	8009e40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098b8:	4b3b      	ldr	r3, [pc, #236]	; (80099a8 <xTaskIncrementTick+0x158>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d349      	bcc.n	8009956 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098c2:	4b36      	ldr	r3, [pc, #216]	; (800999c <xTaskIncrementTick+0x14c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d104      	bne.n	80098d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098cc:	4b36      	ldr	r3, [pc, #216]	; (80099a8 <xTaskIncrementTick+0x158>)
 80098ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098d2:	601a      	str	r2, [r3, #0]
					break;
 80098d4:	e03f      	b.n	8009956 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d6:	4b31      	ldr	r3, [pc, #196]	; (800999c <xTaskIncrementTick+0x14c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d203      	bcs.n	80098f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098ee:	4a2e      	ldr	r2, [pc, #184]	; (80099a8 <xTaskIncrementTick+0x158>)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098f4:	e02f      	b.n	8009956 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe ffba 	bl	8008874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009904:	2b00      	cmp	r3, #0
 8009906:	d004      	beq.n	8009912 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	3318      	adds	r3, #24
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe ffb1 	bl	8008874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4b25      	ldr	r3, [pc, #148]	; (80099ac <xTaskIncrementTick+0x15c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d903      	bls.n	8009926 <xTaskIncrementTick+0xd6>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	4a22      	ldr	r2, [pc, #136]	; (80099ac <xTaskIncrementTick+0x15c>)
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992a:	4613      	mov	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <xTaskIncrementTick+0x160>)
 8009934:	441a      	add	r2, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	3304      	adds	r3, #4
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f7fe ff3c 	bl	80087ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009946:	4b1b      	ldr	r3, [pc, #108]	; (80099b4 <xTaskIncrementTick+0x164>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	429a      	cmp	r2, r3
 800994e:	d3b8      	bcc.n	80098c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009954:	e7b5      	b.n	80098c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009956:	4b17      	ldr	r3, [pc, #92]	; (80099b4 <xTaskIncrementTick+0x164>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995c:	4914      	ldr	r1, [pc, #80]	; (80099b0 <xTaskIncrementTick+0x160>)
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d907      	bls.n	800997e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800996e:	2301      	movs	r3, #1
 8009970:	617b      	str	r3, [r7, #20]
 8009972:	e004      	b.n	800997e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009974:	4b10      	ldr	r3, [pc, #64]	; (80099b8 <xTaskIncrementTick+0x168>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	4a0f      	ldr	r2, [pc, #60]	; (80099b8 <xTaskIncrementTick+0x168>)
 800997c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800997e:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <xTaskIncrementTick+0x16c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009986:	2301      	movs	r3, #1
 8009988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800998a:	697b      	ldr	r3, [r7, #20]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000df4 	.word	0x20000df4
 8009998:	20000dd0 	.word	0x20000dd0
 800999c:	20000d84 	.word	0x20000d84
 80099a0:	20000d88 	.word	0x20000d88
 80099a4:	20000de4 	.word	0x20000de4
 80099a8:	20000dec 	.word	0x20000dec
 80099ac:	20000dd4 	.word	0x20000dd4
 80099b0:	200008fc 	.word	0x200008fc
 80099b4:	200008f8 	.word	0x200008f8
 80099b8:	20000ddc 	.word	0x20000ddc
 80099bc:	20000de0 	.word	0x20000de0

080099c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099c6:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <vTaskSwitchContext+0xa4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099ce:	4b26      	ldr	r3, [pc, #152]	; (8009a68 <vTaskSwitchContext+0xa8>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099d4:	e040      	b.n	8009a58 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80099d6:	4b24      	ldr	r3, [pc, #144]	; (8009a68 <vTaskSwitchContext+0xa8>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099dc:	4b23      	ldr	r3, [pc, #140]	; (8009a6c <vTaskSwitchContext+0xac>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	60fb      	str	r3, [r7, #12]
 80099e2:	e00f      	b.n	8009a04 <vTaskSwitchContext+0x44>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <vTaskSwitchContext+0x3e>
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	e7fe      	b.n	80099fc <vTaskSwitchContext+0x3c>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	491a      	ldr	r1, [pc, #104]	; (8009a70 <vTaskSwitchContext+0xb0>)
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0e5      	beq.n	80099e4 <vTaskSwitchContext+0x24>
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4a13      	ldr	r2, [pc, #76]	; (8009a70 <vTaskSwitchContext+0xb0>)
 8009a24:	4413      	add	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d104      	bne.n	8009a48 <vTaskSwitchContext+0x88>
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	605a      	str	r2, [r3, #4]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	4a09      	ldr	r2, [pc, #36]	; (8009a74 <vTaskSwitchContext+0xb4>)
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	4a06      	ldr	r2, [pc, #24]	; (8009a6c <vTaskSwitchContext+0xac>)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6013      	str	r3, [r2, #0]
}
 8009a58:	bf00      	nop
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	20000df4 	.word	0x20000df4
 8009a68:	20000de0 	.word	0x20000de0
 8009a6c:	20000dd4 	.word	0x20000dd4
 8009a70:	200008fc 	.word	0x200008fc
 8009a74:	200008f8 	.word	0x200008f8

08009a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <vTaskPlaceOnEventList+0x24>
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	60fb      	str	r3, [r7, #12]
 8009a9a:	e7fe      	b.n	8009a9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a9c:	4b07      	ldr	r3, [pc, #28]	; (8009abc <vTaskPlaceOnEventList+0x44>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3318      	adds	r3, #24
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7fe feac 	bl	8008802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aaa:	2101      	movs	r1, #1
 8009aac:	6838      	ldr	r0, [r7, #0]
 8009aae:	f000 fa71 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	200008f8 	.word	0x200008f8

08009ac0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <vTaskPlaceOnEventListRestricted+0x26>
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	e7fe      	b.n	8009ae4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <vTaskPlaceOnEventListRestricted+0x50>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3318      	adds	r3, #24
 8009aec:	4619      	mov	r1, r3
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7fe fe63 	bl	80087ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009afe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	68b8      	ldr	r0, [r7, #8]
 8009b04:	f000 fa46 	bl	8009f94 <prvAddCurrentTaskToDelayedList>
	}
 8009b08:	bf00      	nop
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	200008f8 	.word	0x200008f8

08009b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <xTaskRemoveFromEventList+0x2a>
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	e7fe      	b.n	8009b3c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3318      	adds	r3, #24
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fe96 	bl	8008874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b48:	4b1d      	ldr	r3, [pc, #116]	; (8009bc0 <xTaskRemoveFromEventList+0xac>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d11d      	bne.n	8009b8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fe8d 	bl	8008874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5e:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <xTaskRemoveFromEventList+0xb0>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d903      	bls.n	8009b6e <xTaskRemoveFromEventList+0x5a>
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <xTaskRemoveFromEventList+0xb0>)
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4a13      	ldr	r2, [pc, #76]	; (8009bc8 <xTaskRemoveFromEventList+0xb4>)
 8009b7c:	441a      	add	r2, r3
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f7fe fe18 	bl	80087ba <vListInsertEnd>
 8009b8a:	e005      	b.n	8009b98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	3318      	adds	r3, #24
 8009b90:	4619      	mov	r1, r3
 8009b92:	480e      	ldr	r0, [pc, #56]	; (8009bcc <xTaskRemoveFromEventList+0xb8>)
 8009b94:	f7fe fe11 	bl	80087ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <xTaskRemoveFromEventList+0xbc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d905      	bls.n	8009bb2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <xTaskRemoveFromEventList+0xc0>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e001      	b.n	8009bb6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bb6:	697b      	ldr	r3, [r7, #20]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000df4 	.word	0x20000df4
 8009bc4:	20000dd4 	.word	0x20000dd4
 8009bc8:	200008fc 	.word	0x200008fc
 8009bcc:	20000d8c 	.word	0x20000d8c
 8009bd0:	200008f8 	.word	0x200008f8
 8009bd4:	20000de0 	.word	0x20000de0

08009bd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009be0:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <vTaskInternalSetTimeOutState+0x24>)
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009be8:	4b05      	ldr	r3, [pc, #20]	; (8009c00 <vTaskInternalSetTimeOutState+0x28>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	605a      	str	r2, [r3, #4]
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	20000de4 	.word	0x20000de4
 8009c00:	20000dd0 	.word	0x20000dd0

08009c04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d109      	bne.n	8009c28 <xTaskCheckForTimeOut+0x24>
 8009c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	e7fe      	b.n	8009c26 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <xTaskCheckForTimeOut+0x3e>
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e7fe      	b.n	8009c40 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009c42:	f000 fe6b 	bl	800a91c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c46:	4b1d      	ldr	r3, [pc, #116]	; (8009cbc <xTaskCheckForTimeOut+0xb8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	69ba      	ldr	r2, [r7, #24]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5e:	d102      	bne.n	8009c66 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	e023      	b.n	8009cae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <xTaskCheckForTimeOut+0xbc>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d007      	beq.n	8009c82 <xTaskCheckForTimeOut+0x7e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	69ba      	ldr	r2, [r7, #24]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d302      	bcc.n	8009c82 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	61fb      	str	r3, [r7, #28]
 8009c80:	e015      	b.n	8009cae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d20b      	bcs.n	8009ca4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	1ad2      	subs	r2, r2, r3
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff ff9d 	bl	8009bd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61fb      	str	r3, [r7, #28]
 8009ca2:	e004      	b.n	8009cae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009caa:	2301      	movs	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cae:	f000 fe63 	bl	800a978 <vPortExitCritical>

	return xReturn;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	20000dd0 	.word	0x20000dd0
 8009cc0:	20000de4 	.word	0x20000de4

08009cc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cc8:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <vTaskMissedYield+0x14>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
}
 8009cce:	bf00      	nop
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	20000de0 	.word	0x20000de0

08009cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ce4:	f000 f852 	bl	8009d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <prvIdleTask+0x28>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d9f9      	bls.n	8009ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009cf0:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <prvIdleTask+0x2c>)
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d00:	e7f0      	b.n	8009ce4 <prvIdleTask+0x8>
 8009d02:	bf00      	nop
 8009d04:	200008fc 	.word	0x200008fc
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d12:	2300      	movs	r3, #0
 8009d14:	607b      	str	r3, [r7, #4]
 8009d16:	e00c      	b.n	8009d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4a12      	ldr	r2, [pc, #72]	; (8009d6c <prvInitialiseTaskLists+0x60>)
 8009d24:	4413      	add	r3, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fd1a 	bl	8008760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	607b      	str	r3, [r7, #4]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b37      	cmp	r3, #55	; 0x37
 8009d36:	d9ef      	bls.n	8009d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d38:	480d      	ldr	r0, [pc, #52]	; (8009d70 <prvInitialiseTaskLists+0x64>)
 8009d3a:	f7fe fd11 	bl	8008760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d3e:	480d      	ldr	r0, [pc, #52]	; (8009d74 <prvInitialiseTaskLists+0x68>)
 8009d40:	f7fe fd0e 	bl	8008760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d44:	480c      	ldr	r0, [pc, #48]	; (8009d78 <prvInitialiseTaskLists+0x6c>)
 8009d46:	f7fe fd0b 	bl	8008760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d4a:	480c      	ldr	r0, [pc, #48]	; (8009d7c <prvInitialiseTaskLists+0x70>)
 8009d4c:	f7fe fd08 	bl	8008760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d50:	480b      	ldr	r0, [pc, #44]	; (8009d80 <prvInitialiseTaskLists+0x74>)
 8009d52:	f7fe fd05 	bl	8008760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <prvInitialiseTaskLists+0x78>)
 8009d58:	4a05      	ldr	r2, [pc, #20]	; (8009d70 <prvInitialiseTaskLists+0x64>)
 8009d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <prvInitialiseTaskLists+0x7c>)
 8009d5e:	4a05      	ldr	r2, [pc, #20]	; (8009d74 <prvInitialiseTaskLists+0x68>)
 8009d60:	601a      	str	r2, [r3, #0]
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	200008fc 	.word	0x200008fc
 8009d70:	20000d5c 	.word	0x20000d5c
 8009d74:	20000d70 	.word	0x20000d70
 8009d78:	20000d8c 	.word	0x20000d8c
 8009d7c:	20000da0 	.word	0x20000da0
 8009d80:	20000db8 	.word	0x20000db8
 8009d84:	20000d84 	.word	0x20000d84
 8009d88:	20000d88 	.word	0x20000d88

08009d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d92:	e019      	b.n	8009dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d94:	f000 fdc2 	bl	800a91c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <prvCheckTasksWaitingTermination+0x4c>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe fd65 	bl	8008874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009daa:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <prvCheckTasksWaitingTermination+0x50>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <prvCheckTasksWaitingTermination+0x50>)
 8009db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009db4:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <prvCheckTasksWaitingTermination+0x54>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <prvCheckTasksWaitingTermination+0x54>)
 8009dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dbe:	f000 fddb 	bl	800a978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f80e 	bl	8009de4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dc8:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <prvCheckTasksWaitingTermination+0x54>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e1      	bne.n	8009d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20000da0 	.word	0x20000da0
 8009ddc:	20000dcc 	.word	0x20000dcc
 8009de0:	20000db4 	.word	0x20000db4

08009de4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d108      	bne.n	8009e08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 ff6a 	bl	800acd4 <vPortFree>
				vPortFree( pxTCB );
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 ff67 	bl	800acd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e06:	e017      	b.n	8009e38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d103      	bne.n	8009e1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 ff5e 	bl	800acd4 <vPortFree>
	}
 8009e18:	e00e      	b.n	8009e38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d009      	beq.n	8009e38 <prvDeleteTCB+0x54>
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	e7fe      	b.n	8009e36 <prvDeleteTCB+0x52>
	}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvResetNextTaskUnblockTime+0x38>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <prvResetNextTaskUnblockTime+0x3c>)
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e58:	e008      	b.n	8009e6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5a:	4b07      	ldr	r3, [pc, #28]	; (8009e78 <prvResetNextTaskUnblockTime+0x38>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <prvResetNextTaskUnblockTime+0x3c>)
 8009e6a:	6013      	str	r3, [r2, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	20000d84 	.word	0x20000d84
 8009e7c:	20000dec 	.word	0x20000dec

08009e80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <xTaskGetSchedulerState+0x34>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	607b      	str	r3, [r7, #4]
 8009e92:	e008      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e94:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <xTaskGetSchedulerState+0x38>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	e001      	b.n	8009ea6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ea6:	687b      	ldr	r3, [r7, #4]
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20000dd8 	.word	0x20000dd8
 8009eb8:	20000df4 	.word	0x20000df4

08009ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d054      	beq.n	8009f7c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ed2:	4b2d      	ldr	r3, [pc, #180]	; (8009f88 <xTaskPriorityDisinherit+0xcc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d009      	beq.n	8009ef0 <xTaskPriorityDisinherit+0x34>
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e7fe      	b.n	8009eee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <xTaskPriorityDisinherit+0x50>
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60bb      	str	r3, [r7, #8]
 8009f0a:	e7fe      	b.n	8009f0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f10:	1e5a      	subs	r2, r3, #1
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d02c      	beq.n	8009f7c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d128      	bne.n	8009f7c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fca0 	bl	8008874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	4b0f      	ldr	r3, [pc, #60]	; (8009f8c <xTaskPriorityDisinherit+0xd0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d903      	bls.n	8009f5c <xTaskPriorityDisinherit+0xa0>
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <xTaskPriorityDisinherit+0xd0>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4a09      	ldr	r2, [pc, #36]	; (8009f90 <xTaskPriorityDisinherit+0xd4>)
 8009f6a:	441a      	add	r2, r3
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fe fc21 	bl	80087ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f7c:	697b      	ldr	r3, [r7, #20]
	}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200008f8 	.word	0x200008f8
 8009f8c:	20000dd4 	.word	0x20000dd4
 8009f90:	200008fc 	.word	0x200008fc

08009f94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f9e:	4b21      	ldr	r3, [pc, #132]	; (800a024 <prvAddCurrentTaskToDelayedList+0x90>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fa4:	4b20      	ldr	r3, [pc, #128]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fc62 	bl	8008874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb6:	d10a      	bne.n	8009fce <prvAddCurrentTaskToDelayedList+0x3a>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4819      	ldr	r0, [pc, #100]	; (800a02c <prvAddCurrentTaskToDelayedList+0x98>)
 8009fc8:	f7fe fbf7 	bl	80087ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009fcc:	e026      	b.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d209      	bcs.n	8009ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fe6:	4b12      	ldr	r3, [pc, #72]	; (800a030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f7fe fc05 	bl	8008802 <vListInsert>
}
 8009ff8:	e010      	b.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffa:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <prvAddCurrentTaskToDelayedList+0x94>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fe fbfb 	bl	8008802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a00c:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	d202      	bcs.n	800a01c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a016:	4a08      	ldr	r2, [pc, #32]	; (800a038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6013      	str	r3, [r2, #0]
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20000dd0 	.word	0x20000dd0
 800a028:	200008f8 	.word	0x200008f8
 800a02c:	20000db8 	.word	0x20000db8
 800a030:	20000d88 	.word	0x20000d88
 800a034:	20000d84 	.word	0x20000d84
 800a038:	20000dec 	.word	0x20000dec

0800a03c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a046:	f000 faff 	bl	800a648 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a04a:	4b1c      	ldr	r3, [pc, #112]	; (800a0bc <xTimerCreateTimerTask+0x80>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d021      	beq.n	800a096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a05a:	1d3a      	adds	r2, r7, #4
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe fb61 	bl	800872c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a06a:	6879      	ldr	r1, [r7, #4]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	9202      	str	r2, [sp, #8]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	2302      	movs	r3, #2
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	460a      	mov	r2, r1
 800a07c:	4910      	ldr	r1, [pc, #64]	; (800a0c0 <xTimerCreateTimerTask+0x84>)
 800a07e:	4811      	ldr	r0, [pc, #68]	; (800a0c4 <xTimerCreateTimerTask+0x88>)
 800a080:	f7ff f8f6 	bl	8009270 <xTaskCreateStatic>
 800a084:	4602      	mov	r2, r0
 800a086:	4b10      	ldr	r3, [pc, #64]	; (800a0c8 <xTimerCreateTimerTask+0x8c>)
 800a088:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a08a:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <xTimerCreateTimerTask+0x8c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a092:	2301      	movs	r3, #1
 800a094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d109      	bne.n	800a0b0 <xTimerCreateTimerTask+0x74>
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	613b      	str	r3, [r7, #16]
 800a0ae:	e7fe      	b.n	800a0ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a0b0:	697b      	ldr	r3, [r7, #20]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000e28 	.word	0x20000e28
 800a0c0:	0800bda8 	.word	0x0800bda8
 800a0c4:	0800a1fd 	.word	0x0800a1fd
 800a0c8:	20000e2c 	.word	0x20000e2c

0800a0cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d109      	bne.n	800a0f8 <xTimerGenericCommand+0x2c>
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	623b      	str	r3, [r7, #32]
 800a0f6:	e7fe      	b.n	800a0f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0f8:	4b19      	ldr	r3, [pc, #100]	; (800a160 <xTimerGenericCommand+0x94>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d02a      	beq.n	800a156 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b05      	cmp	r3, #5
 800a110:	dc18      	bgt.n	800a144 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a112:	f7ff feb5 	bl	8009e80 <xTaskGetSchedulerState>
 800a116:	4603      	mov	r3, r0
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d109      	bne.n	800a130 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a11c:	4b10      	ldr	r3, [pc, #64]	; (800a160 <xTimerGenericCommand+0x94>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	f107 0110 	add.w	r1, r7, #16
 800a124:	2300      	movs	r3, #0
 800a126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a128:	f7fe fccc 	bl	8008ac4 <xQueueGenericSend>
 800a12c:	6278      	str	r0, [r7, #36]	; 0x24
 800a12e:	e012      	b.n	800a156 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a130:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <xTimerGenericCommand+0x94>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	f107 0110 	add.w	r1, r7, #16
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	f7fe fcc2 	bl	8008ac4 <xQueueGenericSend>
 800a140:	6278      	str	r0, [r7, #36]	; 0x24
 800a142:	e008      	b.n	800a156 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a144:	4b06      	ldr	r3, [pc, #24]	; (800a160 <xTimerGenericCommand+0x94>)
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	f107 0110 	add.w	r1, r7, #16
 800a14c:	2300      	movs	r3, #0
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	f7fe fdb2 	bl	8008cb8 <xQueueGenericSendFromISR>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3728      	adds	r7, #40	; 0x28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000e28 	.word	0x20000e28

0800a164 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b088      	sub	sp, #32
 800a168:	af02      	add	r7, sp, #8
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16e:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <prvProcessExpiredTimer+0x94>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	3304      	adds	r3, #4
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fb79 	bl	8008874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d021      	beq.n	800a1d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	18d1      	adds	r1, r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	6978      	ldr	r0, [r7, #20]
 800a19e:	f000 f8d1 	bl	800a344 <prvInsertTimerInActiveList>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01e      	beq.n	800a1e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6978      	ldr	r0, [r7, #20]
 800a1b4:	f7ff ff8a 	bl	800a0cc <xTimerGenericCommand>
 800a1b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d112      	bne.n	800a1e6 <prvProcessExpiredTimer+0x82>
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	e7fe      	b.n	800a1d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	4798      	blx	r3
}
 800a1ee:	bf00      	nop
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000e20 	.word	0x20000e20

0800a1fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a204:	f107 0308 	add.w	r3, r7, #8
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f857 	bl	800a2bc <prvGetNextExpireTime>
 800a20e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f803 	bl	800a220 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a21a:	f000 f8d5 	bl	800a3c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a21e:	e7f1      	b.n	800a204 <prvTimerTask+0x8>

0800a220 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a22a:	f7ff fa57 	bl	80096dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a22e:	f107 0308 	add.w	r3, r7, #8
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f866 	bl	800a304 <prvSampleTimeNow>
 800a238:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d130      	bne.n	800a2a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <prvProcessTimerOrBlockTask+0x3c>
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d806      	bhi.n	800a25c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a24e:	f7ff fa53 	bl	80096f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff ff85 	bl	800a164 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a25a:	e024      	b.n	800a2a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d008      	beq.n	800a274 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a262:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <prvProcessTimerOrBlockTask+0x90>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <prvProcessTimerOrBlockTask+0x50>
 800a26c:	2301      	movs	r3, #1
 800a26e:	e000      	b.n	800a272 <prvProcessTimerOrBlockTask+0x52>
 800a270:	2300      	movs	r3, #0
 800a272:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a274:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <prvProcessTimerOrBlockTask+0x94>)
 800a276:	6818      	ldr	r0, [r3, #0]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4619      	mov	r1, r3
 800a282:	f7fe ffc1 	bl	8009208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a286:	f7ff fa37 	bl	80096f8 <xTaskResumeAll>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a290:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <prvProcessTimerOrBlockTask+0x98>)
 800a292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
}
 800a2a0:	e001      	b.n	800a2a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2a2:	f7ff fa29 	bl	80096f8 <xTaskResumeAll>
}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000e24 	.word	0x20000e24
 800a2b4:	20000e28 	.word	0x20000e28
 800a2b8:	e000ed04 	.word	0xe000ed04

0800a2bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <prvGetNextExpireTime+0x44>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <prvGetNextExpireTime+0x16>
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	e000      	b.n	800a2d4 <prvGetNextExpireTime+0x18>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d105      	bne.n	800a2ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <prvGetNextExpireTime+0x44>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	e001      	b.n	800a2f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20000e20 	.word	0x20000e20

0800a304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a30c:	f7ff fa90 	bl	8009830 <xTaskGetTickCount>
 800a310:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a312:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <prvSampleTimeNow+0x3c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d205      	bcs.n	800a328 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a31c:	f000 f930 	bl	800a580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	e002      	b.n	800a32e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <prvSampleTimeNow+0x3c>)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a334:	68fb      	ldr	r3, [r7, #12]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000e30 	.word	0x20000e30

0800a344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a352:	2300      	movs	r3, #0
 800a354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	429a      	cmp	r2, r3
 800a368:	d812      	bhi.n	800a390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	1ad2      	subs	r2, r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	429a      	cmp	r2, r3
 800a376:	d302      	bcc.n	800a37e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a378:	2301      	movs	r3, #1
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	e01b      	b.n	800a3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <prvInsertTimerInActiveList+0x7c>)
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3304      	adds	r3, #4
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f7fe fa3a 	bl	8008802 <vListInsert>
 800a38e:	e012      	b.n	800a3b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d206      	bcs.n	800a3a6 <prvInsertTimerInActiveList+0x62>
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d302      	bcc.n	800a3a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
 800a3a4:	e007      	b.n	800a3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <prvInsertTimerInActiveList+0x80>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	f7fe fa26 	bl	8008802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a3b6:	697b      	ldr	r3, [r7, #20]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20000e24 	.word	0x20000e24
 800a3c4:	20000e20 	.word	0x20000e20

0800a3c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08e      	sub	sp, #56	; 0x38
 800a3cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3ce:	e0c6      	b.n	800a55e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da17      	bge.n	800a406 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a3d6:	1d3b      	adds	r3, r7, #4
 800a3d8:	3304      	adds	r3, #4
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <prvProcessReceivedCommands+0x2e>
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	61fb      	str	r3, [r7, #28]
 800a3f4:	e7fe      	b.n	800a3f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fc:	6850      	ldr	r0, [r2, #4]
 800a3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a400:	6892      	ldr	r2, [r2, #8]
 800a402:	4611      	mov	r1, r2
 800a404:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f2c0 80a7 	blt.w	800a55c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d004      	beq.n	800a424 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	3304      	adds	r3, #4
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fa28 	bl	8008874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a424:	463b      	mov	r3, r7
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff ff6c 	bl	800a304 <prvSampleTimeNow>
 800a42c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b09      	cmp	r3, #9
 800a432:	f200 8094 	bhi.w	800a55e <prvProcessReceivedCommands+0x196>
 800a436:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <prvProcessReceivedCommands+0x74>)
 800a438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43c:	0800a465 	.word	0x0800a465
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a465 	.word	0x0800a465
 800a448:	0800a4d7 	.word	0x0800a4d7
 800a44c:	0800a4eb 	.word	0x0800a4eb
 800a450:	0800a533 	.word	0x0800a533
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a465 	.word	0x0800a465
 800a45c:	0800a4d7 	.word	0x0800a4d7
 800a460:	0800a4eb 	.word	0x0800a4eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	18d1      	adds	r1, r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a484:	f7ff ff5e 	bl	800a344 <prvInsertTimerInActiveList>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d067      	beq.n	800a55e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a494:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d05c      	beq.n	800a55e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	f7ff fe09 	bl	800a0cc <xTimerGenericCommand>
 800a4ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d14d      	bne.n	800a55e <prvProcessReceivedCommands+0x196>
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	61bb      	str	r3, [r7, #24]
 800a4d4:	e7fe      	b.n	800a4d4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4dc:	f023 0301 	bic.w	r3, r3, #1
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4e8:	e039      	b.n	800a55e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4f0:	f043 0301 	orr.w	r3, r3, #1
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d109      	bne.n	800a51e <prvProcessReceivedCommands+0x156>
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	617b      	str	r3, [r7, #20]
 800a51c:	e7fe      	b.n	800a51c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	699a      	ldr	r2, [r3, #24]
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	18d1      	adds	r1, r2, r3
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52c:	f7ff ff0a 	bl	800a344 <prvInsertTimerInActiveList>
					break;
 800a530:	e015      	b.n	800a55e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a542:	f000 fbc7 	bl	800acd4 <vPortFree>
 800a546:	e00a      	b.n	800a55e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a55a:	e000      	b.n	800a55e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a55c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a55e:	4b07      	ldr	r3, [pc, #28]	; (800a57c <prvProcessReceivedCommands+0x1b4>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	1d39      	adds	r1, r7, #4
 800a564:	2200      	movs	r2, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fc3a 	bl	8008de0 <xQueueReceive>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f47f af2e 	bne.w	800a3d0 <prvProcessReceivedCommands+0x8>
	}
}
 800a574:	bf00      	nop
 800a576:	3730      	adds	r7, #48	; 0x30
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000e28 	.word	0x20000e28

0800a580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a586:	e047      	b.n	800a618 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a588:	4b2d      	ldr	r3, [pc, #180]	; (800a640 <prvSwitchTimerLists+0xc0>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a592:	4b2b      	ldr	r3, [pc, #172]	; (800a640 <prvSwitchTimerLists+0xc0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe f967 	bl	8008874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d02d      	beq.n	800a618 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d90e      	bls.n	800a5ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5da:	4b19      	ldr	r3, [pc, #100]	; (800a640 <prvSwitchTimerLists+0xc0>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	f7fe f90c 	bl	8008802 <vListInsert>
 800a5ea:	e015      	b.n	800a618 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff fd68 	bl	800a0cc <xTimerGenericCommand>
 800a5fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d109      	bne.n	800a618 <prvSwitchTimerLists+0x98>
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	603b      	str	r3, [r7, #0]
 800a616:	e7fe      	b.n	800a616 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a618:	4b09      	ldr	r3, [pc, #36]	; (800a640 <prvSwitchTimerLists+0xc0>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1b2      	bne.n	800a588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a622:	4b07      	ldr	r3, [pc, #28]	; (800a640 <prvSwitchTimerLists+0xc0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a628:	4b06      	ldr	r3, [pc, #24]	; (800a644 <prvSwitchTimerLists+0xc4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a04      	ldr	r2, [pc, #16]	; (800a640 <prvSwitchTimerLists+0xc0>)
 800a62e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a630:	4a04      	ldr	r2, [pc, #16]	; (800a644 <prvSwitchTimerLists+0xc4>)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	6013      	str	r3, [r2, #0]
}
 800a636:	bf00      	nop
 800a638:	3718      	adds	r7, #24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000e20 	.word	0x20000e20
 800a644:	20000e24 	.word	0x20000e24

0800a648 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a64e:	f000 f965 	bl	800a91c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a652:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <prvCheckForValidListAndQueue+0x60>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d120      	bne.n	800a69c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a65a:	4814      	ldr	r0, [pc, #80]	; (800a6ac <prvCheckForValidListAndQueue+0x64>)
 800a65c:	f7fe f880 	bl	8008760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a660:	4813      	ldr	r0, [pc, #76]	; (800a6b0 <prvCheckForValidListAndQueue+0x68>)
 800a662:	f7fe f87d 	bl	8008760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a666:	4b13      	ldr	r3, [pc, #76]	; (800a6b4 <prvCheckForValidListAndQueue+0x6c>)
 800a668:	4a10      	ldr	r2, [pc, #64]	; (800a6ac <prvCheckForValidListAndQueue+0x64>)
 800a66a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a66c:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <prvCheckForValidListAndQueue+0x70>)
 800a66e:	4a10      	ldr	r2, [pc, #64]	; (800a6b0 <prvCheckForValidListAndQueue+0x68>)
 800a670:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a672:	2300      	movs	r3, #0
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	4b11      	ldr	r3, [pc, #68]	; (800a6bc <prvCheckForValidListAndQueue+0x74>)
 800a678:	4a11      	ldr	r2, [pc, #68]	; (800a6c0 <prvCheckForValidListAndQueue+0x78>)
 800a67a:	2110      	movs	r1, #16
 800a67c:	200a      	movs	r0, #10
 800a67e:	f7fe f98b 	bl	8008998 <xQueueGenericCreateStatic>
 800a682:	4602      	mov	r2, r0
 800a684:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <prvCheckForValidListAndQueue+0x60>)
 800a686:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a688:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <prvCheckForValidListAndQueue+0x60>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <prvCheckForValidListAndQueue+0x60>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	490b      	ldr	r1, [pc, #44]	; (800a6c4 <prvCheckForValidListAndQueue+0x7c>)
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fd8e 	bl	80091b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a69c:	f000 f96c 	bl	800a978 <vPortExitCritical>
}
 800a6a0:	bf00      	nop
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000e28 	.word	0x20000e28
 800a6ac:	20000df8 	.word	0x20000df8
 800a6b0:	20000e0c 	.word	0x20000e0c
 800a6b4:	20000e20 	.word	0x20000e20
 800a6b8:	20000e24 	.word	0x20000e24
 800a6bc:	20000ed4 	.word	0x20000ed4
 800a6c0:	20000e34 	.word	0x20000e34
 800a6c4:	0800bdb0 	.word	0x0800bdb0

0800a6c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3b04      	subs	r3, #4
 800a6d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3b04      	subs	r3, #4
 800a6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f023 0201 	bic.w	r2, r3, #1
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6f8:	4a0c      	ldr	r2, [pc, #48]	; (800a72c <pxPortInitialiseStack+0x64>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3b14      	subs	r3, #20
 800a702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3b04      	subs	r3, #4
 800a70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f06f 0202 	mvn.w	r2, #2
 800a716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3b20      	subs	r3, #32
 800a71c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a71e:	68fb      	ldr	r3, [r7, #12]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	0800a731 	.word	0x0800a731

0800a730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a73a:	4b11      	ldr	r3, [pc, #68]	; (800a780 <prvTaskExitError+0x50>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a742:	d009      	beq.n	800a758 <prvTaskExitError+0x28>
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e7fe      	b.n	800a756 <prvTaskExitError+0x26>
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a76a:	bf00      	nop
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0fc      	beq.n	800a76c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a772:	bf00      	nop
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	2000011c 	.word	0x2000011c
	...

0800a790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <pxCurrentTCBConst2>)
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	6808      	ldr	r0, [r1, #0]
 800a796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	f380 8809 	msr	PSP, r0
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8811 	msr	BASEPRI, r0
 800a7aa:	4770      	bx	lr
 800a7ac:	f3af 8000 	nop.w

0800a7b0 <pxCurrentTCBConst2>:
 800a7b0:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7b4:	bf00      	nop
 800a7b6:	bf00      	nop

0800a7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7b8:	4808      	ldr	r0, [pc, #32]	; (800a7dc <prvPortStartFirstTask+0x24>)
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f380 8808 	msr	MSP, r0
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8814 	msr	CONTROL, r0
 800a7ca:	b662      	cpsie	i
 800a7cc:	b661      	cpsie	f
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	df00      	svc	0
 800a7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7da:	bf00      	nop
 800a7dc:	e000ed08 	.word	0xe000ed08

0800a7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7e6:	4b44      	ldr	r3, [pc, #272]	; (800a8f8 <xPortStartScheduler+0x118>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a44      	ldr	r2, [pc, #272]	; (800a8fc <xPortStartScheduler+0x11c>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d109      	bne.n	800a804 <xPortStartScheduler+0x24>
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	e7fe      	b.n	800a802 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a804:	4b3c      	ldr	r3, [pc, #240]	; (800a8f8 <xPortStartScheduler+0x118>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a3d      	ldr	r2, [pc, #244]	; (800a900 <xPortStartScheduler+0x120>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d109      	bne.n	800a822 <xPortStartScheduler+0x42>
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	e7fe      	b.n	800a820 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a822:	4b38      	ldr	r3, [pc, #224]	; (800a904 <xPortStartScheduler+0x124>)
 800a824:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	22ff      	movs	r2, #255	; 0xff
 800a832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a844:	b2da      	uxtb	r2, r3
 800a846:	4b30      	ldr	r3, [pc, #192]	; (800a908 <xPortStartScheduler+0x128>)
 800a848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a84a:	4b30      	ldr	r3, [pc, #192]	; (800a90c <xPortStartScheduler+0x12c>)
 800a84c:	2207      	movs	r2, #7
 800a84e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a850:	e009      	b.n	800a866 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a852:	4b2e      	ldr	r3, [pc, #184]	; (800a90c <xPortStartScheduler+0x12c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3b01      	subs	r3, #1
 800a858:	4a2c      	ldr	r2, [pc, #176]	; (800a90c <xPortStartScheduler+0x12c>)
 800a85a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	b2db      	uxtb	r3, r3
 800a864:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86e:	2b80      	cmp	r3, #128	; 0x80
 800a870:	d0ef      	beq.n	800a852 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a872:	4b26      	ldr	r3, [pc, #152]	; (800a90c <xPortStartScheduler+0x12c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f1c3 0307 	rsb	r3, r3, #7
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d009      	beq.n	800a892 <xPortStartScheduler+0xb2>
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	60bb      	str	r3, [r7, #8]
 800a890:	e7fe      	b.n	800a890 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a892:	4b1e      	ldr	r3, [pc, #120]	; (800a90c <xPortStartScheduler+0x12c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	021b      	lsls	r3, r3, #8
 800a898:	4a1c      	ldr	r2, [pc, #112]	; (800a90c <xPortStartScheduler+0x12c>)
 800a89a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a89c:	4b1b      	ldr	r3, [pc, #108]	; (800a90c <xPortStartScheduler+0x12c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8a4:	4a19      	ldr	r2, [pc, #100]	; (800a90c <xPortStartScheduler+0x12c>)
 800a8a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8b0:	4b17      	ldr	r3, [pc, #92]	; (800a910 <xPortStartScheduler+0x130>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a16      	ldr	r2, [pc, #88]	; (800a910 <xPortStartScheduler+0x130>)
 800a8b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8bc:	4b14      	ldr	r3, [pc, #80]	; (800a910 <xPortStartScheduler+0x130>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a13      	ldr	r2, [pc, #76]	; (800a910 <xPortStartScheduler+0x130>)
 800a8c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8c8:	f000 f8d6 	bl	800aa78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8cc:	4b11      	ldr	r3, [pc, #68]	; (800a914 <xPortStartScheduler+0x134>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8d2:	f000 f8f5 	bl	800aac0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8d6:	4b10      	ldr	r3, [pc, #64]	; (800a918 <xPortStartScheduler+0x138>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a0f      	ldr	r2, [pc, #60]	; (800a918 <xPortStartScheduler+0x138>)
 800a8dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8e2:	f7ff ff69 	bl	800a7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8e6:	f7ff f86b 	bl	80099c0 <vTaskSwitchContext>
	prvTaskExitError();
 800a8ea:	f7ff ff21 	bl	800a730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed00 	.word	0xe000ed00
 800a8fc:	410fc271 	.word	0x410fc271
 800a900:	410fc270 	.word	0x410fc270
 800a904:	e000e400 	.word	0xe000e400
 800a908:	20000f24 	.word	0x20000f24
 800a90c:	20000f28 	.word	0x20000f28
 800a910:	e000ed20 	.word	0xe000ed20
 800a914:	2000011c 	.word	0x2000011c
 800a918:	e000ef34 	.word	0xe000ef34

0800a91c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a934:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <vPortEnterCritical+0x54>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	4a0d      	ldr	r2, [pc, #52]	; (800a970 <vPortEnterCritical+0x54>)
 800a93c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <vPortEnterCritical+0x54>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d10e      	bne.n	800a964 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a946:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <vPortEnterCritical+0x58>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d009      	beq.n	800a964 <vPortEnterCritical+0x48>
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	e7fe      	b.n	800a962 <vPortEnterCritical+0x46>
	}
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	2000011c 	.word	0x2000011c
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <vPortExitCritical+0x4c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d109      	bne.n	800a99a <vPortExitCritical+0x22>
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	607b      	str	r3, [r7, #4]
 800a998:	e7fe      	b.n	800a998 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a99a:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <vPortExitCritical+0x4c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <vPortExitCritical+0x4c>)
 800a9a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9a4:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <vPortExitCritical+0x4c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d104      	bne.n	800a9b6 <vPortExitCritical+0x3e>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9b6:	bf00      	nop
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	2000011c 	.word	0x2000011c
	...

0800a9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9d0:	f3ef 8009 	mrs	r0, PSP
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <pxCurrentTCBConst>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f01e 0f10 	tst.w	lr, #16
 800a9e0:	bf08      	it	eq
 800a9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9f4:	f380 8811 	msr	BASEPRI, r0
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f7fe ffde 	bl	80099c0 <vTaskSwitchContext>
 800aa04:	f04f 0000 	mov.w	r0, #0
 800aa08:	f380 8811 	msr	BASEPRI, r0
 800aa0c:	bc09      	pop	{r0, r3}
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f01e 0f10 	tst.w	lr, #16
 800aa1a:	bf08      	it	eq
 800aa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa20:	f380 8809 	msr	PSP, r0
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst>:
 800aa30:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa50:	f7fe fefe 	bl	8009850 <xTaskIncrementTick>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa5a:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <SysTick_Handler+0x3c>)
 800aa5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	2300      	movs	r3, #0
 800aa64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa78:	b480      	push	{r7}
 800aa7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa7c:	4b0b      	ldr	r3, [pc, #44]	; (800aaac <vPortSetupTimerInterrupt+0x34>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa82:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <vPortSetupTimerInterrupt+0x38>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa88:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <vPortSetupTimerInterrupt+0x3c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a0a      	ldr	r2, [pc, #40]	; (800aab8 <vPortSetupTimerInterrupt+0x40>)
 800aa8e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa92:	099b      	lsrs	r3, r3, #6
 800aa94:	4a09      	ldr	r2, [pc, #36]	; (800aabc <vPortSetupTimerInterrupt+0x44>)
 800aa96:	3b01      	subs	r3, #1
 800aa98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa9a:	4b04      	ldr	r3, [pc, #16]	; (800aaac <vPortSetupTimerInterrupt+0x34>)
 800aa9c:	2207      	movs	r2, #7
 800aa9e:	601a      	str	r2, [r3, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	e000e010 	.word	0xe000e010
 800aab0:	e000e018 	.word	0xe000e018
 800aab4:	20000000 	.word	0x20000000
 800aab8:	10624dd3 	.word	0x10624dd3
 800aabc:	e000e014 	.word	0xe000e014

0800aac0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aac0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aad0 <vPortEnableVFP+0x10>
 800aac4:	6801      	ldr	r1, [r0, #0]
 800aac6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaca:	6001      	str	r1, [r0, #0]
 800aacc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aace:	bf00      	nop
 800aad0:	e000ed88 	.word	0xe000ed88

0800aad4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aada:	f3ef 8305 	mrs	r3, IPSR
 800aade:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b0f      	cmp	r3, #15
 800aae4:	d913      	bls.n	800ab0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aae6:	4a16      	ldr	r2, [pc, #88]	; (800ab40 <vPortValidateInterruptPriority+0x6c>)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aaf0:	4b14      	ldr	r3, [pc, #80]	; (800ab44 <vPortValidateInterruptPriority+0x70>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	7afa      	ldrb	r2, [r7, #11]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d209      	bcs.n	800ab0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	607b      	str	r3, [r7, #4]
 800ab0c:	e7fe      	b.n	800ab0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <vPortValidateInterruptPriority+0x74>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab16:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <vPortValidateInterruptPriority+0x78>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d909      	bls.n	800ab32 <vPortValidateInterruptPriority+0x5e>
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	e7fe      	b.n	800ab30 <vPortValidateInterruptPriority+0x5c>
	}
 800ab32:	bf00      	nop
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	e000e3f0 	.word	0xe000e3f0
 800ab44:	20000f24 	.word	0x20000f24
 800ab48:	e000ed0c 	.word	0xe000ed0c
 800ab4c:	20000f28 	.word	0x20000f28

0800ab50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08a      	sub	sp, #40	; 0x28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab5c:	f7fe fdbe 	bl	80096dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab60:	4b57      	ldr	r3, [pc, #348]	; (800acc0 <pvPortMalloc+0x170>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab68:	f000 f90c 	bl	800ad84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab6c:	4b55      	ldr	r3, [pc, #340]	; (800acc4 <pvPortMalloc+0x174>)
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4013      	ands	r3, r2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 808c 	bne.w	800ac92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01c      	beq.n	800abba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ab80:	2208      	movs	r2, #8
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4413      	add	r3, r2
 800ab86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d013      	beq.n	800abba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f023 0307 	bic.w	r3, r3, #7
 800ab98:	3308      	adds	r3, #8
 800ab9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f003 0307 	and.w	r3, r3, #7
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d009      	beq.n	800abba <pvPortMalloc+0x6a>
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	e7fe      	b.n	800abb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d068      	beq.n	800ac92 <pvPortMalloc+0x142>
 800abc0:	4b41      	ldr	r3, [pc, #260]	; (800acc8 <pvPortMalloc+0x178>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d863      	bhi.n	800ac92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abca:	4b40      	ldr	r3, [pc, #256]	; (800accc <pvPortMalloc+0x17c>)
 800abcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abce:	4b3f      	ldr	r3, [pc, #252]	; (800accc <pvPortMalloc+0x17c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abd4:	e004      	b.n	800abe0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d903      	bls.n	800abf2 <pvPortMalloc+0xa2>
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f1      	bne.n	800abd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abf2:	4b33      	ldr	r3, [pc, #204]	; (800acc0 <pvPortMalloc+0x170>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d04a      	beq.n	800ac92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2208      	movs	r2, #8
 800ac02:	4413      	add	r3, r2
 800ac04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	2308      	movs	r3, #8
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d91e      	bls.n	800ac5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d009      	beq.n	800ac44 <pvPortMalloc+0xf4>
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	613b      	str	r3, [r7, #16]
 800ac42:	e7fe      	b.n	800ac42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac56:	69b8      	ldr	r0, [r7, #24]
 800ac58:	f000 f8f6 	bl	800ae48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac5c:	4b1a      	ldr	r3, [pc, #104]	; (800acc8 <pvPortMalloc+0x178>)
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <pvPortMalloc+0x178>)
 800ac68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac6a:	4b17      	ldr	r3, [pc, #92]	; (800acc8 <pvPortMalloc+0x178>)
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b18      	ldr	r3, [pc, #96]	; (800acd0 <pvPortMalloc+0x180>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d203      	bcs.n	800ac7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac76:	4b14      	ldr	r3, [pc, #80]	; (800acc8 <pvPortMalloc+0x178>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a15      	ldr	r2, [pc, #84]	; (800acd0 <pvPortMalloc+0x180>)
 800ac7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	4b10      	ldr	r3, [pc, #64]	; (800acc4 <pvPortMalloc+0x174>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	431a      	orrs	r2, r3
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac92:	f7fe fd31 	bl	80096f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	f003 0307 	and.w	r3, r3, #7
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d009      	beq.n	800acb4 <pvPortMalloc+0x164>
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	e7fe      	b.n	800acb2 <pvPortMalloc+0x162>
	return pvReturn;
 800acb4:	69fb      	ldr	r3, [r7, #28]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3728      	adds	r7, #40	; 0x28
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20001aec 	.word	0x20001aec
 800acc4:	20001af8 	.word	0x20001af8
 800acc8:	20001af0 	.word	0x20001af0
 800accc:	20001ae4 	.word	0x20001ae4
 800acd0:	20001af4 	.word	0x20001af4

0800acd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d046      	beq.n	800ad74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ace6:	2308      	movs	r3, #8
 800ace8:	425b      	negs	r3, r3
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	4413      	add	r3, r2
 800acee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	4b20      	ldr	r3, [pc, #128]	; (800ad7c <vPortFree+0xa8>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4013      	ands	r3, r2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d109      	bne.n	800ad16 <vPortFree+0x42>
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	e7fe      	b.n	800ad14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <vPortFree+0x5e>
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	60bb      	str	r3, [r7, #8]
 800ad30:	e7fe      	b.n	800ad30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <vPortFree+0xa8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d019      	beq.n	800ad74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d115      	bne.n	800ad74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <vPortFree+0xa8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	43db      	mvns	r3, r3
 800ad52:	401a      	ands	r2, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad58:	f7fe fcc0 	bl	80096dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <vPortFree+0xac>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	4a06      	ldr	r2, [pc, #24]	; (800ad80 <vPortFree+0xac>)
 800ad68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad6a:	6938      	ldr	r0, [r7, #16]
 800ad6c:	f000 f86c 	bl	800ae48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad70:	f7fe fcc2 	bl	80096f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad74:	bf00      	nop
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20001af8 	.word	0x20001af8
 800ad80:	20001af0 	.word	0x20001af0

0800ad84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ad8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad90:	4b27      	ldr	r3, [pc, #156]	; (800ae30 <prvHeapInit+0xac>)
 800ad92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00c      	beq.n	800adb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3307      	adds	r3, #7
 800ada2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0307 	bic.w	r3, r3, #7
 800adaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	4a1f      	ldr	r2, [pc, #124]	; (800ae30 <prvHeapInit+0xac>)
 800adb4:	4413      	add	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adbc:	4a1d      	ldr	r2, [pc, #116]	; (800ae34 <prvHeapInit+0xb0>)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adc2:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <prvHeapInit+0xb0>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	4413      	add	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800add0:	2208      	movs	r2, #8
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	1a9b      	subs	r3, r3, r2
 800add6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0307 	bic.w	r3, r3, #7
 800adde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4a15      	ldr	r2, [pc, #84]	; (800ae38 <prvHeapInit+0xb4>)
 800ade4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ade6:	4b14      	ldr	r3, [pc, #80]	; (800ae38 <prvHeapInit+0xb4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2200      	movs	r2, #0
 800adec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adee:	4b12      	ldr	r3, [pc, #72]	; (800ae38 <prvHeapInit+0xb4>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae04:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <prvHeapInit+0xb4>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	4a0a      	ldr	r2, [pc, #40]	; (800ae3c <prvHeapInit+0xb8>)
 800ae12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4a09      	ldr	r2, [pc, #36]	; (800ae40 <prvHeapInit+0xbc>)
 800ae1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <prvHeapInit+0xc0>)
 800ae1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae22:	601a      	str	r2, [r3, #0]
}
 800ae24:	bf00      	nop
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	20000f2c 	.word	0x20000f2c
 800ae34:	20001ae4 	.word	0x20001ae4
 800ae38:	20001aec 	.word	0x20001aec
 800ae3c:	20001af4 	.word	0x20001af4
 800ae40:	20001af0 	.word	0x20001af0
 800ae44:	20001af8 	.word	0x20001af8

0800ae48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae50:	4b28      	ldr	r3, [pc, #160]	; (800aef4 <prvInsertBlockIntoFreeList+0xac>)
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	e002      	b.n	800ae5c <prvInsertBlockIntoFreeList+0x14>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d8f7      	bhi.n	800ae56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	4413      	add	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d108      	bne.n	800ae8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	441a      	add	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	441a      	add	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d118      	bne.n	800aed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	4b15      	ldr	r3, [pc, #84]	; (800aef8 <prvInsertBlockIntoFreeList+0xb0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d00d      	beq.n	800aec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	e008      	b.n	800aed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aec6:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <prvInsertBlockIntoFreeList+0xb0>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e003      	b.n	800aed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d002      	beq.n	800aee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	20001ae4 	.word	0x20001ae4
 800aef8:	20001aec 	.word	0x20001aec

0800aefc <usb_check_buffer>:
void usb_write(uint8_t *buffer, size_t len)
{
    CDC_Transmit_FS(buffer, len);
}
uint8_t usb_check_buffer(void)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
    uint8_t bytes_in_buffer = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	71fb      	strb	r3, [r7, #7]
    // When the head and tail of the circular buffer are at different point we have data
    if((cdc_rx_head != cdc_rx_tail))
 800af06:	4b11      	ldr	r3, [pc, #68]	; (800af4c <usb_check_buffer+0x50>)
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	4b11      	ldr	r3, [pc, #68]	; (800af50 <usb_check_buffer+0x54>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d014      	beq.n	800af3c <usb_check_buffer+0x40>
    {
        // Handle data wraps across the buffer end boundary
        if( cdc_rx_head < cdc_rx_tail)
 800af12:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <usb_check_buffer+0x50>)
 800af14:	781a      	ldrb	r2, [r3, #0]
 800af16:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <usb_check_buffer+0x54>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d208      	bcs.n	800af30 <usb_check_buffer+0x34>
        {
            bytes_in_buffer = cdc_rx_head + (CIRCULAR_BUFFER_SIZE - cdc_rx_tail);
 800af1e:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <usb_check_buffer+0x50>)
 800af20:	781a      	ldrb	r2, [r3, #0]
 800af22:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <usb_check_buffer+0x54>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	3340      	adds	r3, #64	; 0x40
 800af2c:	71fb      	strb	r3, [r7, #7]
 800af2e:	e005      	b.n	800af3c <usb_check_buffer+0x40>
        }
        else
        {
            bytes_in_buffer = cdc_rx_head - cdc_rx_tail;
 800af30:	4b06      	ldr	r3, [pc, #24]	; (800af4c <usb_check_buffer+0x50>)
 800af32:	781a      	ldrb	r2, [r3, #0]
 800af34:	4b06      	ldr	r3, [pc, #24]	; (800af50 <usb_check_buffer+0x54>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	71fb      	strb	r3, [r7, #7]
        }
    }
    return bytes_in_buffer;
 800af3c:	79fb      	ldrb	r3, [r7, #7]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	370c      	adds	r7, #12
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	20001b3c 	.word	0x20001b3c
 800af50:	20001b3d 	.word	0x20001b3d

0800af54 <usb_get_byte>:

uint8_t usb_get_byte(void)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
    uint8_t usb_byte =  cdc_rx_buffer[cdc_rx_tail++]; //this can take tail out of range
 800af5a:	4b0c      	ldr	r3, [pc, #48]	; (800af8c <usb_get_byte+0x38>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	1c5a      	adds	r2, r3, #1
 800af60:	b2d1      	uxtb	r1, r2
 800af62:	4a0a      	ldr	r2, [pc, #40]	; (800af8c <usb_get_byte+0x38>)
 800af64:	7011      	strb	r1, [r2, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	4b09      	ldr	r3, [pc, #36]	; (800af90 <usb_get_byte+0x3c>)
 800af6a:	5c9b      	ldrb	r3, [r3, r2]
 800af6c:	71fb      	strb	r3, [r7, #7]
    if (cdc_rx_tail == CIRCULAR_BUFFER_SIZE)
 800af6e:	4b07      	ldr	r3, [pc, #28]	; (800af8c <usb_get_byte+0x38>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b40      	cmp	r3, #64	; 0x40
 800af74:	d102      	bne.n	800af7c <usb_get_byte+0x28>
    {
    	cdc_rx_tail = 0;
 800af76:	4b05      	ldr	r3, [pc, #20]	; (800af8c <usb_get_byte+0x38>)
 800af78:	2200      	movs	r2, #0
 800af7a:	701a      	strb	r2, [r3, #0]
    }
    return usb_byte;
 800af7c:	79fb      	ldrb	r3, [r7, #7]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20001b3d 	.word	0x20001b3d
 800af90:	20001afc 	.word	0x20001afc

0800af94 <usb_receive_data>:

void usb_receive_data( uint8_t *data_in, size_t len)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
    for( size_t i = 0; i < len; i++)
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	e029      	b.n	800aff8 <usb_receive_data+0x64>
    {
        // copy from the CDC buffer to the circular buffer
        cdc_rx_buffer[cdc_rx_head++] = data_in[i];
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	441a      	add	r2, r3
 800afaa:	4b18      	ldr	r3, [pc, #96]	; (800b00c <usb_receive_data+0x78>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	b2c8      	uxtb	r0, r1
 800afb2:	4916      	ldr	r1, [pc, #88]	; (800b00c <usb_receive_data+0x78>)
 800afb4:	7008      	strb	r0, [r1, #0]
 800afb6:	4619      	mov	r1, r3
 800afb8:	7812      	ldrb	r2, [r2, #0]
 800afba:	4b15      	ldr	r3, [pc, #84]	; (800b010 <usb_receive_data+0x7c>)
 800afbc:	545a      	strb	r2, [r3, r1]
        if (cdc_rx_head == CIRCULAR_BUFFER_SIZE)
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <usb_receive_data+0x78>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	d102      	bne.n	800afcc <usb_receive_data+0x38>
        {
        	cdc_rx_head = 0;
 800afc6:	4b11      	ldr	r3, [pc, #68]	; (800b00c <usb_receive_data+0x78>)
 800afc8:	2200      	movs	r2, #0
 800afca:	701a      	strb	r2, [r3, #0]
        }
        //if buffer head catches the tail, move the tail so we keep the most data
        if (cdc_rx_tail == cdc_rx_head)
 800afcc:	4b11      	ldr	r3, [pc, #68]	; (800b014 <usb_receive_data+0x80>)
 800afce:	781a      	ldrb	r2, [r3, #0]
 800afd0:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <usb_receive_data+0x78>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d10c      	bne.n	800aff2 <usb_receive_data+0x5e>
        {
        	cdc_rx_tail++;
 800afd8:	4b0e      	ldr	r3, [pc, #56]	; (800b014 <usb_receive_data+0x80>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	3301      	adds	r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <usb_receive_data+0x80>)
 800afe2:	701a      	strb	r2, [r3, #0]
        	if (cdc_rx_tail == CIRCULAR_BUFFER_SIZE)
 800afe4:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <usb_receive_data+0x80>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	2b40      	cmp	r3, #64	; 0x40
 800afea:	d102      	bne.n	800aff2 <usb_receive_data+0x5e>
        	{
        		cdc_rx_tail = 0;
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <usb_receive_data+0x80>)
 800afee:	2200      	movs	r2, #0
 800aff0:	701a      	strb	r2, [r3, #0]
    for( size_t i = 0; i < len; i++)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	d3d1      	bcc.n	800afa4 <usb_receive_data+0x10>
        	}
        }
    }
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	20001b3c 	.word	0x20001b3c
 800b010:	20001afc 	.word	0x20001afc
 800b014:	20001b3d 	.word	0x20001b3d

0800b018 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b01c:	2200      	movs	r2, #0
 800b01e:	4912      	ldr	r1, [pc, #72]	; (800b068 <MX_USB_DEVICE_Init+0x50>)
 800b020:	4812      	ldr	r0, [pc, #72]	; (800b06c <MX_USB_DEVICE_Init+0x54>)
 800b022:	f7fc f935 	bl	8007290 <USBD_Init>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b02c:	f7f5 fbbc 	bl	80007a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b030:	490f      	ldr	r1, [pc, #60]	; (800b070 <MX_USB_DEVICE_Init+0x58>)
 800b032:	480e      	ldr	r0, [pc, #56]	; (800b06c <MX_USB_DEVICE_Init+0x54>)
 800b034:	f7fc f95c 	bl	80072f0 <USBD_RegisterClass>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b03e:	f7f5 fbb3 	bl	80007a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b042:	490c      	ldr	r1, [pc, #48]	; (800b074 <MX_USB_DEVICE_Init+0x5c>)
 800b044:	4809      	ldr	r0, [pc, #36]	; (800b06c <MX_USB_DEVICE_Init+0x54>)
 800b046:	f7fc f8b7 	bl	80071b8 <USBD_CDC_RegisterInterface>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b050:	f7f5 fbaa 	bl	80007a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b054:	4805      	ldr	r0, [pc, #20]	; (800b06c <MX_USB_DEVICE_Init+0x54>)
 800b056:	f7fc f972 	bl	800733e <USBD_Start>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b060:	f7f5 fba2 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b064:	bf00      	nop
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000134 	.word	0x20000134
 800b06c:	20001c5c 	.word	0x20001c5c
 800b070:	20000018 	.word	0x20000018
 800b074:	20000120 	.word	0x20000120

0800b078 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b07c:	2200      	movs	r2, #0
 800b07e:	4905      	ldr	r1, [pc, #20]	; (800b094 <CDC_Init_FS+0x1c>)
 800b080:	4805      	ldr	r0, [pc, #20]	; (800b098 <CDC_Init_FS+0x20>)
 800b082:	f7fc f8ae 	bl	80071e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b086:	4905      	ldr	r1, [pc, #20]	; (800b09c <CDC_Init_FS+0x24>)
 800b088:	4803      	ldr	r0, [pc, #12]	; (800b098 <CDC_Init_FS+0x20>)
 800b08a:	f7fc f8c3 	bl	8007214 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b08e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b090:	4618      	mov	r0, r3
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20002314 	.word	0x20002314
 800b098:	20001c5c 	.word	0x20001c5c
 800b09c:	20001f2c 	.word	0x20001f2c

0800b0a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	6039      	str	r1, [r7, #0]
 800b0ba:	71fb      	strb	r3, [r7, #7]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	2b23      	cmp	r3, #35	; 0x23
 800b0c4:	f200 808c 	bhi.w	800b1e0 <CDC_Control_FS+0x130>
 800b0c8:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <CDC_Control_FS+0x20>)
 800b0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ce:	bf00      	nop
 800b0d0:	0800b1e1 	.word	0x0800b1e1
 800b0d4:	0800b1e1 	.word	0x0800b1e1
 800b0d8:	0800b1e1 	.word	0x0800b1e1
 800b0dc:	0800b1e1 	.word	0x0800b1e1
 800b0e0:	0800b1e1 	.word	0x0800b1e1
 800b0e4:	0800b1e1 	.word	0x0800b1e1
 800b0e8:	0800b1e1 	.word	0x0800b1e1
 800b0ec:	0800b1e1 	.word	0x0800b1e1
 800b0f0:	0800b1e1 	.word	0x0800b1e1
 800b0f4:	0800b1e1 	.word	0x0800b1e1
 800b0f8:	0800b1e1 	.word	0x0800b1e1
 800b0fc:	0800b1e1 	.word	0x0800b1e1
 800b100:	0800b1e1 	.word	0x0800b1e1
 800b104:	0800b1e1 	.word	0x0800b1e1
 800b108:	0800b1e1 	.word	0x0800b1e1
 800b10c:	0800b1e1 	.word	0x0800b1e1
 800b110:	0800b1e1 	.word	0x0800b1e1
 800b114:	0800b1e1 	.word	0x0800b1e1
 800b118:	0800b1e1 	.word	0x0800b1e1
 800b11c:	0800b1e1 	.word	0x0800b1e1
 800b120:	0800b1e1 	.word	0x0800b1e1
 800b124:	0800b1e1 	.word	0x0800b1e1
 800b128:	0800b1e1 	.word	0x0800b1e1
 800b12c:	0800b1e1 	.word	0x0800b1e1
 800b130:	0800b1e1 	.word	0x0800b1e1
 800b134:	0800b1e1 	.word	0x0800b1e1
 800b138:	0800b1e1 	.word	0x0800b1e1
 800b13c:	0800b1e1 	.word	0x0800b1e1
 800b140:	0800b1e1 	.word	0x0800b1e1
 800b144:	0800b1e1 	.word	0x0800b1e1
 800b148:	0800b1e1 	.word	0x0800b1e1
 800b14c:	0800b1e1 	.word	0x0800b1e1
 800b150:	0800b161 	.word	0x0800b161
 800b154:	0800b19b 	.word	0x0800b19b
 800b158:	0800b1e1 	.word	0x0800b1e1
 800b15c:	0800b1e1 	.word	0x0800b1e1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	4b22      	ldr	r3, [pc, #136]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b166:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	785a      	ldrb	r2, [r3, #1]
 800b16c:	4b20      	ldr	r3, [pc, #128]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b16e:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	789a      	ldrb	r2, [r3, #2]
 800b174:	4b1e      	ldr	r3, [pc, #120]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b176:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	78da      	ldrb	r2, [r3, #3]
 800b17c:	4b1c      	ldr	r3, [pc, #112]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b17e:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	791a      	ldrb	r2, [r3, #4]
 800b184:	4b1a      	ldr	r3, [pc, #104]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b186:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	795a      	ldrb	r2, [r3, #5]
 800b18c:	4b18      	ldr	r3, [pc, #96]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b18e:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	799a      	ldrb	r2, [r3, #6]
 800b194:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b196:	719a      	strb	r2, [r3, #6]
    break;
 800b198:	e023      	b.n	800b1e2 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 800b19a:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b19c:	781a      	ldrb	r2, [r3, #0]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	4a12      	ldr	r2, [pc, #72]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b1a8:	7852      	ldrb	r2, [r2, #1]
 800b1aa:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buf[2];
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	3302      	adds	r3, #2
 800b1b0:	4a0f      	ldr	r2, [pc, #60]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b1b2:	7892      	ldrb	r2, [r2, #2]
 800b1b4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buf[3];
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	3303      	adds	r3, #3
 800b1ba:	4a0d      	ldr	r2, [pc, #52]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b1bc:	78d2      	ldrb	r2, [r2, #3]
 800b1be:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buf[4];
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4a0a      	ldr	r2, [pc, #40]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b1c6:	7912      	ldrb	r2, [r2, #4]
 800b1c8:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buf[5];
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	3305      	adds	r3, #5
 800b1ce:	4a08      	ldr	r2, [pc, #32]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b1d0:	7952      	ldrb	r2, [r2, #5]
 800b1d2:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buf[6];
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	3306      	adds	r3, #6
 800b1d8:	4a05      	ldr	r2, [pc, #20]	; (800b1f0 <CDC_Control_FS+0x140>)
 800b1da:	7992      	ldrb	r2, [r2, #6]
 800b1dc:	701a      	strb	r2, [r3, #0]
    break;
 800b1de:	e000      	b.n	800b1e2 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1e0:	bf00      	nop
  }

  return (USBD_OK);
 800b1e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr
 800b1f0:	200026fc 	.word	0x200026fc

0800b1f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usb_receive_data( Buf, *Len);  // insert the data into our circular buffer
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff fec5 	bl	800af94 <usb_receive_data>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	4805      	ldr	r0, [pc, #20]	; (800b224 <CDC_Receive_FS+0x30>)
 800b20e:	f7fc f801 	bl	8007214 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b212:	4804      	ldr	r0, [pc, #16]	; (800b224 <CDC_Receive_FS+0x30>)
 800b214:	f7fc f812 	bl	800723c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20001c5c 	.word	0x20001c5c

0800b228 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	4613      	mov	r3, r2
 800b234:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b23a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	6039      	str	r1, [r7, #0]
 800b256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	2212      	movs	r2, #18
 800b25c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b25e:	4b03      	ldr	r3, [pc, #12]	; (800b26c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b260:	4618      	mov	r0, r3
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	20000154 	.word	0x20000154

0800b270 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	6039      	str	r1, [r7, #0]
 800b27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2204      	movs	r2, #4
 800b280:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b282:	4b03      	ldr	r3, [pc, #12]	; (800b290 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	20000174 	.word	0x20000174

0800b294 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	4603      	mov	r3, r0
 800b29c:	6039      	str	r1, [r7, #0]
 800b29e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2a0:	79fb      	ldrb	r3, [r7, #7]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d105      	bne.n	800b2b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	4907      	ldr	r1, [pc, #28]	; (800b2c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2aa:	4808      	ldr	r0, [pc, #32]	; (800b2cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b2ac:	f7fc ffff 	bl	80082ae <USBD_GetString>
 800b2b0:	e004      	b.n	800b2bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	4904      	ldr	r1, [pc, #16]	; (800b2c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2b6:	4805      	ldr	r0, [pc, #20]	; (800b2cc <USBD_FS_ProductStrDescriptor+0x38>)
 800b2b8:	f7fc fff9 	bl	80082ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2bc:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20002704 	.word	0x20002704
 800b2cc:	0800bdb8 	.word	0x0800bdb8

0800b2d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	6039      	str	r1, [r7, #0]
 800b2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	4904      	ldr	r1, [pc, #16]	; (800b2f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2e0:	4804      	ldr	r0, [pc, #16]	; (800b2f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2e2:	f7fc ffe4 	bl	80082ae <USBD_GetString>
  return USBD_StrDesc;
 800b2e6:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20002704 	.word	0x20002704
 800b2f4:	0800bdd0 	.word	0x0800bdd0

0800b2f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	221a      	movs	r2, #26
 800b308:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b30a:	f000 f855 	bl	800b3b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b30e:	4b02      	ldr	r3, [pc, #8]	; (800b318 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b310:	4618      	mov	r0, r3
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000178 	.word	0x20000178

0800b31c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d105      	bne.n	800b33a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	4907      	ldr	r1, [pc, #28]	; (800b350 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b332:	4808      	ldr	r0, [pc, #32]	; (800b354 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b334:	f7fc ffbb 	bl	80082ae <USBD_GetString>
 800b338:	e004      	b.n	800b344 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	4904      	ldr	r1, [pc, #16]	; (800b350 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b33e:	4805      	ldr	r0, [pc, #20]	; (800b354 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b340:	f7fc ffb5 	bl	80082ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b344:	4b02      	ldr	r3, [pc, #8]	; (800b350 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20002704 	.word	0x20002704
 800b354:	0800bde4 	.word	0x0800bde4

0800b358 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	4907      	ldr	r1, [pc, #28]	; (800b38c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b36e:	4808      	ldr	r0, [pc, #32]	; (800b390 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b370:	f7fc ff9d 	bl	80082ae <USBD_GetString>
 800b374:	e004      	b.n	800b380 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	4904      	ldr	r1, [pc, #16]	; (800b38c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b37a:	4805      	ldr	r0, [pc, #20]	; (800b390 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b37c:	f7fc ff97 	bl	80082ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20002704 	.word	0x20002704
 800b390:	0800bdf0 	.word	0x0800bdf0

0800b394 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	220c      	movs	r2, #12
 800b3a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b3a6:	4b03      	ldr	r3, [pc, #12]	; (800b3b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	20000168 	.word	0x20000168

0800b3b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3be:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <Get_SerialNum+0x44>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3c4:	4b0e      	ldr	r3, [pc, #56]	; (800b400 <Get_SerialNum+0x48>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <Get_SerialNum+0x4c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3de:	2208      	movs	r2, #8
 800b3e0:	4909      	ldr	r1, [pc, #36]	; (800b408 <Get_SerialNum+0x50>)
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f814 	bl	800b410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3e8:	2204      	movs	r2, #4
 800b3ea:	4908      	ldr	r1, [pc, #32]	; (800b40c <Get_SerialNum+0x54>)
 800b3ec:	68b8      	ldr	r0, [r7, #8]
 800b3ee:	f000 f80f 	bl	800b410 <IntToUnicode>
  }
}
 800b3f2:	bf00      	nop
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	1fff7590 	.word	0x1fff7590
 800b400:	1fff7594 	.word	0x1fff7594
 800b404:	1fff7598 	.word	0x1fff7598
 800b408:	2000017a 	.word	0x2000017a
 800b40c:	2000018a 	.word	0x2000018a

0800b410 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4613      	mov	r3, r2
 800b41c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b422:	2300      	movs	r3, #0
 800b424:	75fb      	strb	r3, [r7, #23]
 800b426:	e027      	b.n	800b478 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	0f1b      	lsrs	r3, r3, #28
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	d80b      	bhi.n	800b448 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	0f1b      	lsrs	r3, r3, #28
 800b434:	b2da      	uxtb	r2, r3
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	4619      	mov	r1, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	440b      	add	r3, r1
 800b440:	3230      	adds	r2, #48	; 0x30
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	e00a      	b.n	800b45e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	0f1b      	lsrs	r3, r3, #28
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	4619      	mov	r1, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	440b      	add	r3, r1
 800b458:	3237      	adds	r2, #55	; 0x37
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	3301      	adds	r3, #1
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	4413      	add	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	3301      	adds	r3, #1
 800b476:	75fb      	strb	r3, [r7, #23]
 800b478:	7dfa      	ldrb	r2, [r7, #23]
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d3d3      	bcc.n	800b428 <IntToUnicode+0x18>
  }
}
 800b480:	bf00      	nop
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a0d      	ldr	r2, [pc, #52]	; (800b4d0 <HAL_PCD_MspInit+0x44>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d113      	bne.n	800b4c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b49e:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <HAL_PCD_MspInit+0x48>)
 800b4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a2:	4a0c      	ldr	r2, [pc, #48]	; (800b4d4 <HAL_PCD_MspInit+0x48>)
 800b4a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b4aa:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <HAL_PCD_MspInit+0x48>)
 800b4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 5, 0);
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2105      	movs	r1, #5
 800b4ba:	2043      	movs	r0, #67	; 0x43
 800b4bc:	f7f5 fddc 	bl	8001078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b4c0:	2043      	movs	r0, #67	; 0x43
 800b4c2:	f7f5 fdf5 	bl	80010b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4c6:	bf00      	nop
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40006800 	.word	0x40006800
 800b4d4:	40021000 	.word	0x40021000

0800b4d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f7fb ff70 	bl	80073d4 <USBD_LL_SetupStage>
}
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	460b      	mov	r3, r1
 800b506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b50e:	78fa      	ldrb	r2, [r7, #3]
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	4613      	mov	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	00db      	lsls	r3, r3, #3
 800b51a:	440b      	add	r3, r1
 800b51c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	4619      	mov	r1, r3
 800b526:	f7fb ffa8 	bl	800747a <USBD_LL_DataOutStage>
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	4613      	mov	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	440b      	add	r3, r1
 800b552:	333c      	adds	r3, #60	; 0x3c
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	4619      	mov	r1, r3
 800b55a:	f7fb fff1 	bl	8007540 <USBD_LL_DataInStage>
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b574:	4618      	mov	r0, r3
 800b576:	f7fc f8f5 	bl	8007764 <USBD_LL_SOF>
}
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b58a:	2301      	movs	r3, #1
 800b58c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d001      	beq.n	800b59a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b596:	f7f5 f907 	bl	80007a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b5a0:	7bfa      	ldrb	r2, [r7, #15]
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fc f8a2 	bl	80076ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fc f85b 	bl	800766c <USBD_LL_Reset>
}
 800b5b6:	bf00      	nop
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
	...

0800b5c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fc f89d 	bl	800770e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d005      	beq.n	800b5e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5dc:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <HAL_PCD_SuspendCallback+0x30>)
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	4a03      	ldr	r2, [pc, #12]	; (800b5f0 <HAL_PCD_SuspendCallback+0x30>)
 800b5e2:	f043 0306 	orr.w	r3, r3, #6
 800b5e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b5e8:	bf00      	nop
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	e000ed00 	.word	0xe000ed00

0800b5f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d007      	beq.n	800b614 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b604:	4b08      	ldr	r3, [pc, #32]	; (800b628 <HAL_PCD_ResumeCallback+0x34>)
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	4a07      	ldr	r2, [pc, #28]	; (800b628 <HAL_PCD_ResumeCallback+0x34>)
 800b60a:	f023 0306 	bic.w	r3, r3, #6
 800b60e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b610:	f000 fa9e 	bl	800bb50 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fc f88c 	bl	8007738 <USBD_LL_Resume>
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	e000ed00 	.word	0xe000ed00

0800b62c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b634:	f7f7 fad6 	bl	8002be4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b638:	4a2b      	ldr	r2, [pc, #172]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a29      	ldr	r2, [pc, #164]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b644:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b648:	4b27      	ldr	r3, [pc, #156]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b64a:	4a28      	ldr	r2, [pc, #160]	; (800b6ec <USBD_LL_Init+0xc0>)
 800b64c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b64e:	4b26      	ldr	r3, [pc, #152]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b650:	2208      	movs	r2, #8
 800b652:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b654:	4b24      	ldr	r3, [pc, #144]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b656:	2202      	movs	r2, #2
 800b658:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b65c:	2202      	movs	r2, #2
 800b65e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b660:	4b21      	ldr	r3, [pc, #132]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b662:	2200      	movs	r2, #0
 800b664:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b666:	4b20      	ldr	r3, [pc, #128]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b668:	2200      	movs	r2, #0
 800b66a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b66c:	4b1e      	ldr	r3, [pc, #120]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b66e:	2200      	movs	r2, #0
 800b670:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b672:	4b1d      	ldr	r3, [pc, #116]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b674:	2200      	movs	r2, #0
 800b676:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b678:	481b      	ldr	r0, [pc, #108]	; (800b6e8 <USBD_LL_Init+0xbc>)
 800b67a:	f7f5 fea9 	bl	80013d0 <HAL_PCD_Init>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b684:	f7f5 f890 	bl	80007a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b68e:	2318      	movs	r3, #24
 800b690:	2200      	movs	r2, #0
 800b692:	2100      	movs	r1, #0
 800b694:	f7f7 f9c4 	bl	8002a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b69e:	2358      	movs	r3, #88	; 0x58
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2180      	movs	r1, #128	; 0x80
 800b6a4:	f7f7 f9bc 	bl	8002a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6ae:	23c0      	movs	r3, #192	; 0xc0
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2181      	movs	r1, #129	; 0x81
 800b6b4:	f7f7 f9b4 	bl	8002a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6be:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	f7f7 f9ab 	bl	8002a20 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2182      	movs	r1, #130	; 0x82
 800b6d8:	f7f7 f9a2 	bl	8002a20 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20002904 	.word	0x20002904
 800b6ec:	40006800 	.word	0x40006800

0800b6f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b706:	4618      	mov	r0, r3
 800b708:	f7f5 ff74 	bl	80015f4 <HAL_PCD_Start>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b710:	7bbb      	ldrb	r3, [r7, #14]
 800b712:	2b03      	cmp	r3, #3
 800b714:	d816      	bhi.n	800b744 <USBD_LL_Start+0x54>
 800b716:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <USBD_LL_Start+0x2c>)
 800b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71c:	0800b72d 	.word	0x0800b72d
 800b720:	0800b733 	.word	0x0800b733
 800b724:	0800b739 	.word	0x0800b739
 800b728:	0800b73f 	.word	0x0800b73f
    case HAL_OK :
      usb_status = USBD_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
    break;
 800b730:	e00b      	b.n	800b74a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b732:	2303      	movs	r3, #3
 800b734:	73fb      	strb	r3, [r7, #15]
    break;
 800b736:	e008      	b.n	800b74a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b738:	2301      	movs	r3, #1
 800b73a:	73fb      	strb	r3, [r7, #15]
    break;
 800b73c:	e005      	b.n	800b74a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b73e:	2303      	movs	r3, #3
 800b740:	73fb      	strb	r3, [r7, #15]
    break;
 800b742:	e002      	b.n	800b74a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b744:	2303      	movs	r3, #3
 800b746:	73fb      	strb	r3, [r7, #15]
    break;
 800b748:	bf00      	nop
  }
  return usb_status;
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	4608      	mov	r0, r1
 800b75e:	4611      	mov	r1, r2
 800b760:	461a      	mov	r2, r3
 800b762:	4603      	mov	r3, r0
 800b764:	70fb      	strb	r3, [r7, #3]
 800b766:	460b      	mov	r3, r1
 800b768:	70bb      	strb	r3, [r7, #2]
 800b76a:	4613      	mov	r3, r2
 800b76c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b77c:	78bb      	ldrb	r3, [r7, #2]
 800b77e:	883a      	ldrh	r2, [r7, #0]
 800b780:	78f9      	ldrb	r1, [r7, #3]
 800b782:	f7f6 f8cc 	bl	800191e <HAL_PCD_EP_Open>
 800b786:	4603      	mov	r3, r0
 800b788:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d817      	bhi.n	800b7c0 <USBD_LL_OpenEP+0x6c>
 800b790:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <USBD_LL_OpenEP+0x44>)
 800b792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b796:	bf00      	nop
 800b798:	0800b7a9 	.word	0x0800b7a9
 800b79c:	0800b7af 	.word	0x0800b7af
 800b7a0:	0800b7b5 	.word	0x0800b7b5
 800b7a4:	0800b7bb 	.word	0x0800b7bb
    case HAL_OK :
      usb_status = USBD_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ac:	e00b      	b.n	800b7c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b2:	e008      	b.n	800b7c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b8:	e005      	b.n	800b7c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b7be:	e002      	b.n	800b7c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c4:	bf00      	nop
  }
  return usb_status;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7ea:	78fa      	ldrb	r2, [r7, #3]
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7f6 f8fb 	bl	80019ea <HAL_PCD_EP_Close>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d816      	bhi.n	800b82c <USBD_LL_CloseEP+0x5c>
 800b7fe:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <USBD_LL_CloseEP+0x34>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b815 	.word	0x0800b815
 800b808:	0800b81b 	.word	0x0800b81b
 800b80c:	0800b821 	.word	0x0800b821
 800b810:	0800b827 	.word	0x0800b827
    case HAL_OK :
      usb_status = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73fb      	strb	r3, [r7, #15]
    break;
 800b818:	e00b      	b.n	800b832 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b81a:	2303      	movs	r3, #3
 800b81c:	73fb      	strb	r3, [r7, #15]
    break;
 800b81e:	e008      	b.n	800b832 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b820:	2301      	movs	r3, #1
 800b822:	73fb      	strb	r3, [r7, #15]
    break;
 800b824:	e005      	b.n	800b832 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b826:	2303      	movs	r3, #3
 800b828:	73fb      	strb	r3, [r7, #15]
    break;
 800b82a:	e002      	b.n	800b832 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b82c:	2303      	movs	r3, #3
 800b82e:	73fb      	strb	r3, [r7, #15]
    break;
 800b830:	bf00      	nop
  }
  return usb_status;
 800b832:	7bfb      	ldrb	r3, [r7, #15]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b856:	78fa      	ldrb	r2, [r7, #3]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7f6 f9a5 	bl	8001baa <HAL_PCD_EP_SetStall>
 800b860:	4603      	mov	r3, r0
 800b862:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	2b03      	cmp	r3, #3
 800b868:	d816      	bhi.n	800b898 <USBD_LL_StallEP+0x5c>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <USBD_LL_StallEP+0x34>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b887 	.word	0x0800b887
 800b878:	0800b88d 	.word	0x0800b88d
 800b87c:	0800b893 	.word	0x0800b893
    case HAL_OK :
      usb_status = USBD_OK;
 800b880:	2300      	movs	r3, #0
 800b882:	73fb      	strb	r3, [r7, #15]
    break;
 800b884:	e00b      	b.n	800b89e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b886:	2303      	movs	r3, #3
 800b888:	73fb      	strb	r3, [r7, #15]
    break;
 800b88a:	e008      	b.n	800b89e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b88c:	2301      	movs	r3, #1
 800b88e:	73fb      	strb	r3, [r7, #15]
    break;
 800b890:	e005      	b.n	800b89e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b892:	2303      	movs	r3, #3
 800b894:	73fb      	strb	r3, [r7, #15]
    break;
 800b896:	e002      	b.n	800b89e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b898:	2303      	movs	r3, #3
 800b89a:	73fb      	strb	r3, [r7, #15]
    break;
 800b89c:	bf00      	nop
  }
  return usb_status;
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8c2:	78fa      	ldrb	r2, [r7, #3]
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7f6 f9cf 	bl	8001c6a <HAL_PCD_EP_ClrStall>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d816      	bhi.n	800b904 <USBD_LL_ClearStallEP+0x5c>
 800b8d6:	a201      	add	r2, pc, #4	; (adr r2, 800b8dc <USBD_LL_ClearStallEP+0x34>)
 800b8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8dc:	0800b8ed 	.word	0x0800b8ed
 800b8e0:	0800b8f3 	.word	0x0800b8f3
 800b8e4:	0800b8f9 	.word	0x0800b8f9
 800b8e8:	0800b8ff 	.word	0x0800b8ff
    case HAL_OK :
      usb_status = USBD_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f0:	e00b      	b.n	800b90a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f6:	e008      	b.n	800b90a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8fc:	e005      	b.n	800b90a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8fe:	2303      	movs	r3, #3
 800b900:	73fb      	strb	r3, [r7, #15]
    break;
 800b902:	e002      	b.n	800b90a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b904:	2303      	movs	r3, #3
 800b906:	73fb      	strb	r3, [r7, #15]
    break;
 800b908:	bf00      	nop
  }
  return usb_status;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b926:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	da0c      	bge.n	800b94a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b936:	68f9      	ldr	r1, [r7, #12]
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	4613      	mov	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	440b      	add	r3, r1
 800b944:	3302      	adds	r3, #2
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	e00b      	b.n	800b962 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b950:	68f9      	ldr	r1, [r7, #12]
 800b952:	4613      	mov	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	440b      	add	r3, r1
 800b95c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b960:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
	...

0800b970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f5 ffa0 	bl	80018d4 <HAL_PCD_SetAddress>
 800b994:	4603      	mov	r3, r0
 800b996:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d816      	bhi.n	800b9cc <USBD_LL_SetUSBAddress+0x5c>
 800b99e:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <USBD_LL_SetUSBAddress+0x34>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800b9b5 	.word	0x0800b9b5
 800b9a8:	0800b9bb 	.word	0x0800b9bb
 800b9ac:	0800b9c1 	.word	0x0800b9c1
 800b9b0:	0800b9c7 	.word	0x0800b9c7
    case HAL_OK :
      usb_status = USBD_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b8:	e00b      	b.n	800b9d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9be:	e008      	b.n	800b9d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c4:	e005      	b.n	800b9d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ca:	e002      	b.n	800b9d2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d0:	bf00      	nop
  }
  return usb_status;
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9fa:	7af9      	ldrb	r1, [r7, #11]
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f7f6 f890 	bl	8001b24 <HAL_PCD_EP_Transmit>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ba08:	7dbb      	ldrb	r3, [r7, #22]
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d816      	bhi.n	800ba3c <USBD_LL_Transmit+0x60>
 800ba0e:	a201      	add	r2, pc, #4	; (adr r2, 800ba14 <USBD_LL_Transmit+0x38>)
 800ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba14:	0800ba25 	.word	0x0800ba25
 800ba18:	0800ba2b 	.word	0x0800ba2b
 800ba1c:	0800ba31 	.word	0x0800ba31
 800ba20:	0800ba37 	.word	0x0800ba37
    case HAL_OK :
      usb_status = USBD_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	75fb      	strb	r3, [r7, #23]
    break;
 800ba28:	e00b      	b.n	800ba42 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	75fb      	strb	r3, [r7, #23]
    break;
 800ba2e:	e008      	b.n	800ba42 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba30:	2301      	movs	r3, #1
 800ba32:	75fb      	strb	r3, [r7, #23]
    break;
 800ba34:	e005      	b.n	800ba42 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba36:	2303      	movs	r3, #3
 800ba38:	75fb      	strb	r3, [r7, #23]
    break;
 800ba3a:	e002      	b.n	800ba42 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	75fb      	strb	r3, [r7, #23]
    break;
 800ba40:	bf00      	nop
  }
  return usb_status;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	603b      	str	r3, [r7, #0]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba6a:	7af9      	ldrb	r1, [r7, #11]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	f7f6 f803 	bl	8001a7a <HAL_PCD_EP_Receive>
 800ba74:	4603      	mov	r3, r0
 800ba76:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ba78:	7dbb      	ldrb	r3, [r7, #22]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d816      	bhi.n	800baac <USBD_LL_PrepareReceive+0x60>
 800ba7e:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <USBD_LL_PrepareReceive+0x38>)
 800ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba84:	0800ba95 	.word	0x0800ba95
 800ba88:	0800ba9b 	.word	0x0800ba9b
 800ba8c:	0800baa1 	.word	0x0800baa1
 800ba90:	0800baa7 	.word	0x0800baa7
    case HAL_OK :
      usb_status = USBD_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	75fb      	strb	r3, [r7, #23]
    break;
 800ba98:	e00b      	b.n	800bab2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	75fb      	strb	r3, [r7, #23]
    break;
 800ba9e:	e008      	b.n	800bab2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800baa0:	2301      	movs	r3, #1
 800baa2:	75fb      	strb	r3, [r7, #23]
    break;
 800baa4:	e005      	b.n	800bab2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800baa6:	2303      	movs	r3, #3
 800baa8:	75fb      	strb	r3, [r7, #23]
    break;
 800baaa:	e002      	b.n	800bab2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800baac:	2303      	movs	r3, #3
 800baae:	75fb      	strb	r3, [r7, #23]
    break;
 800bab0:	bf00      	nop
  }
  return usb_status;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bace:	78fa      	ldrb	r2, [r7, #3]
 800bad0:	4611      	mov	r1, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7f6 f80e 	bl	8001af4 <HAL_PCD_EP_GetRxCount>
 800bad8:	4603      	mov	r3, r0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
	...

0800bae4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d002      	beq.n	800bafc <HAL_PCDEx_LPM_Callback+0x18>
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d013      	beq.n	800bb22 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bafa:	e023      	b.n	800bb44 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d007      	beq.n	800bb14 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bb04:	f000 f824 	bl	800bb50 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb08:	4b10      	ldr	r3, [pc, #64]	; (800bb4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	4a0f      	ldr	r2, [pc, #60]	; (800bb4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bb0e:	f023 0306 	bic.w	r3, r3, #6
 800bb12:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fb fe0c 	bl	8007738 <USBD_LL_Resume>
    break;
 800bb20:	e010      	b.n	800bb44 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fb fdf0 	bl	800770e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	4a04      	ldr	r2, [pc, #16]	; (800bb4c <HAL_PCDEx_LPM_Callback+0x68>)
 800bb3c:	f043 0306 	orr.w	r3, r3, #6
 800bb40:	6113      	str	r3, [r2, #16]
    break;
 800bb42:	bf00      	nop
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	e000ed00 	.word	0xe000ed00

0800bb50 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb54:	f7f4 fce8 	bl	8000528 <SystemClock_Config>
}
 800bb58:	bf00      	nop
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <__errno>:
 800bb5c:	4b01      	ldr	r3, [pc, #4]	; (800bb64 <__errno+0x8>)
 800bb5e:	6818      	ldr	r0, [r3, #0]
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20000194 	.word	0x20000194

0800bb68 <__libc_init_array>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	4e0d      	ldr	r6, [pc, #52]	; (800bba0 <__libc_init_array+0x38>)
 800bb6c:	4c0d      	ldr	r4, [pc, #52]	; (800bba4 <__libc_init_array+0x3c>)
 800bb6e:	1ba4      	subs	r4, r4, r6
 800bb70:	10a4      	asrs	r4, r4, #2
 800bb72:	2500      	movs	r5, #0
 800bb74:	42a5      	cmp	r5, r4
 800bb76:	d109      	bne.n	800bb8c <__libc_init_array+0x24>
 800bb78:	4e0b      	ldr	r6, [pc, #44]	; (800bba8 <__libc_init_array+0x40>)
 800bb7a:	4c0c      	ldr	r4, [pc, #48]	; (800bbac <__libc_init_array+0x44>)
 800bb7c:	f000 f8f6 	bl	800bd6c <_init>
 800bb80:	1ba4      	subs	r4, r4, r6
 800bb82:	10a4      	asrs	r4, r4, #2
 800bb84:	2500      	movs	r5, #0
 800bb86:	42a5      	cmp	r5, r4
 800bb88:	d105      	bne.n	800bb96 <__libc_init_array+0x2e>
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
 800bb8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb90:	4798      	blx	r3
 800bb92:	3501      	adds	r5, #1
 800bb94:	e7ee      	b.n	800bb74 <__libc_init_array+0xc>
 800bb96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb9a:	4798      	blx	r3
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	e7f2      	b.n	800bb86 <__libc_init_array+0x1e>
 800bba0:	0800be74 	.word	0x0800be74
 800bba4:	0800be74 	.word	0x0800be74
 800bba8:	0800be74 	.word	0x0800be74
 800bbac:	0800be78 	.word	0x0800be78

0800bbb0 <malloc>:
 800bbb0:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <malloc+0xc>)
 800bbb2:	4601      	mov	r1, r0
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	f000 b86d 	b.w	800bc94 <_malloc_r>
 800bbba:	bf00      	nop
 800bbbc:	20000194 	.word	0x20000194

0800bbc0 <free>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <free+0xc>)
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f000 b817 	b.w	800bbf8 <_free_r>
 800bbca:	bf00      	nop
 800bbcc:	20000194 	.word	0x20000194

0800bbd0 <memcpy>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	1e43      	subs	r3, r0, #1
 800bbd4:	440a      	add	r2, r1
 800bbd6:	4291      	cmp	r1, r2
 800bbd8:	d100      	bne.n	800bbdc <memcpy+0xc>
 800bbda:	bd10      	pop	{r4, pc}
 800bbdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbe4:	e7f7      	b.n	800bbd6 <memcpy+0x6>

0800bbe6 <memset>:
 800bbe6:	4402      	add	r2, r0
 800bbe8:	4603      	mov	r3, r0
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d100      	bne.n	800bbf0 <memset+0xa>
 800bbee:	4770      	bx	lr
 800bbf0:	f803 1b01 	strb.w	r1, [r3], #1
 800bbf4:	e7f9      	b.n	800bbea <memset+0x4>
	...

0800bbf8 <_free_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	d045      	beq.n	800bc8c <_free_r+0x94>
 800bc00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc04:	1f0c      	subs	r4, r1, #4
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	bfb8      	it	lt
 800bc0a:	18e4      	addlt	r4, r4, r3
 800bc0c:	f000 f8ac 	bl	800bd68 <__malloc_lock>
 800bc10:	4a1f      	ldr	r2, [pc, #124]	; (800bc90 <_free_r+0x98>)
 800bc12:	6813      	ldr	r3, [r2, #0]
 800bc14:	4610      	mov	r0, r2
 800bc16:	b933      	cbnz	r3, 800bc26 <_free_r+0x2e>
 800bc18:	6063      	str	r3, [r4, #4]
 800bc1a:	6014      	str	r4, [r2, #0]
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc22:	f000 b8a2 	b.w	800bd6a <__malloc_unlock>
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	d90c      	bls.n	800bc44 <_free_r+0x4c>
 800bc2a:	6821      	ldr	r1, [r4, #0]
 800bc2c:	1862      	adds	r2, r4, r1
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	bf04      	itt	eq
 800bc32:	681a      	ldreq	r2, [r3, #0]
 800bc34:	685b      	ldreq	r3, [r3, #4]
 800bc36:	6063      	str	r3, [r4, #4]
 800bc38:	bf04      	itt	eq
 800bc3a:	1852      	addeq	r2, r2, r1
 800bc3c:	6022      	streq	r2, [r4, #0]
 800bc3e:	6004      	str	r4, [r0, #0]
 800bc40:	e7ec      	b.n	800bc1c <_free_r+0x24>
 800bc42:	4613      	mov	r3, r2
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	b10a      	cbz	r2, 800bc4c <_free_r+0x54>
 800bc48:	42a2      	cmp	r2, r4
 800bc4a:	d9fa      	bls.n	800bc42 <_free_r+0x4a>
 800bc4c:	6819      	ldr	r1, [r3, #0]
 800bc4e:	1858      	adds	r0, r3, r1
 800bc50:	42a0      	cmp	r0, r4
 800bc52:	d10b      	bne.n	800bc6c <_free_r+0x74>
 800bc54:	6820      	ldr	r0, [r4, #0]
 800bc56:	4401      	add	r1, r0
 800bc58:	1858      	adds	r0, r3, r1
 800bc5a:	4282      	cmp	r2, r0
 800bc5c:	6019      	str	r1, [r3, #0]
 800bc5e:	d1dd      	bne.n	800bc1c <_free_r+0x24>
 800bc60:	6810      	ldr	r0, [r2, #0]
 800bc62:	6852      	ldr	r2, [r2, #4]
 800bc64:	605a      	str	r2, [r3, #4]
 800bc66:	4401      	add	r1, r0
 800bc68:	6019      	str	r1, [r3, #0]
 800bc6a:	e7d7      	b.n	800bc1c <_free_r+0x24>
 800bc6c:	d902      	bls.n	800bc74 <_free_r+0x7c>
 800bc6e:	230c      	movs	r3, #12
 800bc70:	602b      	str	r3, [r5, #0]
 800bc72:	e7d3      	b.n	800bc1c <_free_r+0x24>
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	1821      	adds	r1, r4, r0
 800bc78:	428a      	cmp	r2, r1
 800bc7a:	bf04      	itt	eq
 800bc7c:	6811      	ldreq	r1, [r2, #0]
 800bc7e:	6852      	ldreq	r2, [r2, #4]
 800bc80:	6062      	str	r2, [r4, #4]
 800bc82:	bf04      	itt	eq
 800bc84:	1809      	addeq	r1, r1, r0
 800bc86:	6021      	streq	r1, [r4, #0]
 800bc88:	605c      	str	r4, [r3, #4]
 800bc8a:	e7c7      	b.n	800bc1c <_free_r+0x24>
 800bc8c:	bd38      	pop	{r3, r4, r5, pc}
 800bc8e:	bf00      	nop
 800bc90:	20001b40 	.word	0x20001b40

0800bc94 <_malloc_r>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	1ccd      	adds	r5, r1, #3
 800bc98:	f025 0503 	bic.w	r5, r5, #3
 800bc9c:	3508      	adds	r5, #8
 800bc9e:	2d0c      	cmp	r5, #12
 800bca0:	bf38      	it	cc
 800bca2:	250c      	movcc	r5, #12
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	4606      	mov	r6, r0
 800bca8:	db01      	blt.n	800bcae <_malloc_r+0x1a>
 800bcaa:	42a9      	cmp	r1, r5
 800bcac:	d903      	bls.n	800bcb6 <_malloc_r+0x22>
 800bcae:	230c      	movs	r3, #12
 800bcb0:	6033      	str	r3, [r6, #0]
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
 800bcb6:	f000 f857 	bl	800bd68 <__malloc_lock>
 800bcba:	4a21      	ldr	r2, [pc, #132]	; (800bd40 <_malloc_r+0xac>)
 800bcbc:	6814      	ldr	r4, [r2, #0]
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	b991      	cbnz	r1, 800bce8 <_malloc_r+0x54>
 800bcc2:	4c20      	ldr	r4, [pc, #128]	; (800bd44 <_malloc_r+0xb0>)
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	b91b      	cbnz	r3, 800bcd0 <_malloc_r+0x3c>
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f000 f83d 	bl	800bd48 <_sbrk_r>
 800bcce:	6020      	str	r0, [r4, #0]
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f000 f838 	bl	800bd48 <_sbrk_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d124      	bne.n	800bd26 <_malloc_r+0x92>
 800bcdc:	230c      	movs	r3, #12
 800bcde:	6033      	str	r3, [r6, #0]
 800bce0:	4630      	mov	r0, r6
 800bce2:	f000 f842 	bl	800bd6a <__malloc_unlock>
 800bce6:	e7e4      	b.n	800bcb2 <_malloc_r+0x1e>
 800bce8:	680b      	ldr	r3, [r1, #0]
 800bcea:	1b5b      	subs	r3, r3, r5
 800bcec:	d418      	bmi.n	800bd20 <_malloc_r+0x8c>
 800bcee:	2b0b      	cmp	r3, #11
 800bcf0:	d90f      	bls.n	800bd12 <_malloc_r+0x7e>
 800bcf2:	600b      	str	r3, [r1, #0]
 800bcf4:	50cd      	str	r5, [r1, r3]
 800bcf6:	18cc      	adds	r4, r1, r3
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f000 f836 	bl	800bd6a <__malloc_unlock>
 800bcfe:	f104 000b 	add.w	r0, r4, #11
 800bd02:	1d23      	adds	r3, r4, #4
 800bd04:	f020 0007 	bic.w	r0, r0, #7
 800bd08:	1ac3      	subs	r3, r0, r3
 800bd0a:	d0d3      	beq.n	800bcb4 <_malloc_r+0x20>
 800bd0c:	425a      	negs	r2, r3
 800bd0e:	50e2      	str	r2, [r4, r3]
 800bd10:	e7d0      	b.n	800bcb4 <_malloc_r+0x20>
 800bd12:	428c      	cmp	r4, r1
 800bd14:	684b      	ldr	r3, [r1, #4]
 800bd16:	bf16      	itet	ne
 800bd18:	6063      	strne	r3, [r4, #4]
 800bd1a:	6013      	streq	r3, [r2, #0]
 800bd1c:	460c      	movne	r4, r1
 800bd1e:	e7eb      	b.n	800bcf8 <_malloc_r+0x64>
 800bd20:	460c      	mov	r4, r1
 800bd22:	6849      	ldr	r1, [r1, #4]
 800bd24:	e7cc      	b.n	800bcc0 <_malloc_r+0x2c>
 800bd26:	1cc4      	adds	r4, r0, #3
 800bd28:	f024 0403 	bic.w	r4, r4, #3
 800bd2c:	42a0      	cmp	r0, r4
 800bd2e:	d005      	beq.n	800bd3c <_malloc_r+0xa8>
 800bd30:	1a21      	subs	r1, r4, r0
 800bd32:	4630      	mov	r0, r6
 800bd34:	f000 f808 	bl	800bd48 <_sbrk_r>
 800bd38:	3001      	adds	r0, #1
 800bd3a:	d0cf      	beq.n	800bcdc <_malloc_r+0x48>
 800bd3c:	6025      	str	r5, [r4, #0]
 800bd3e:	e7db      	b.n	800bcf8 <_malloc_r+0x64>
 800bd40:	20001b40 	.word	0x20001b40
 800bd44:	20001b44 	.word	0x20001b44

0800bd48 <_sbrk_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4c06      	ldr	r4, [pc, #24]	; (800bd64 <_sbrk_r+0x1c>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4605      	mov	r5, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	6023      	str	r3, [r4, #0]
 800bd54:	f7f4 fe28 	bl	80009a8 <_sbrk>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_sbrk_r+0x1a>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_sbrk_r+0x1a>
 800bd60:	602b      	str	r3, [r5, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	20002bf8 	.word	0x20002bf8

0800bd68 <__malloc_lock>:
 800bd68:	4770      	bx	lr

0800bd6a <__malloc_unlock>:
 800bd6a:	4770      	bx	lr

0800bd6c <_init>:
 800bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6e:	bf00      	nop
 800bd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd72:	bc08      	pop	{r3}
 800bd74:	469e      	mov	lr, r3
 800bd76:	4770      	bx	lr

0800bd78 <_fini>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr
